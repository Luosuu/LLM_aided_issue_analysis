{
  "issue_number": 8369.0,
  "title": "[BUG] security: config rewrites of sentinel.conf set insecure file permissions",
  "body": "**Describe the bug**\r\n\r\nRunning Sentinel, as soon as an automatic config rewrite is performed, the file permissions of sentinel.conf are set to `0644` and redis:redis (user/group under which sentinel is running), irrespective of the original file permissions and ignoring `UMask` setting of systemd service unit. This exposes sensitive data by setting the file world-readable, e.g. `requirepass`/`auth-pass`.\r\n\r\n**To reproduce**\r\n\r\n- Creating `/etc/redis/sentinel.conf` with intended config parameters\r\n- Setting ownership to `root:redis` (i.e. user under which sentinel is invoked)\r\n- Setting file permissions to `0660`, to allow sentinel to write the file\r\n- Setting directory ownership and permissions of `/etc/redis/` to `root:redis` and `0770`\r\n- Start redis-sentinel\r\n\r\nprepared environment:\r\n```\r\ndrwxrwx---  2 root redis 4.0K Jan 20 12:23 .\r\ndrwxr-xr-x 69 root root  4.0K Jan 19 16:27 ..\r\n-rw-r-----  1 root redis 2.2K Jan 19 18:55 redis.conf\r\n-rw-rw----  1 root redis  599 Jan 20 12:23 sentinel.conf\r\n```\r\n\r\nafter starting redis-sentinel, the config is rewritten (`# Generated by CONFIG REWRITE` is added and some parameters) AND permissions are altered:\r\n```\r\ndrwxrwx---  2 root  redis 4.0K Jan 20 12:23 .\r\ndrwxr-xr-x 69 root  root  4.0K Jan 19 16:27 ..\r\n-rw-r-----  1 root  redis 2.2K Jan 19 18:55 redis.conf\r\n-rw-r--r--  1 redis redis  883 Jan 20 12:23 sentinel.conf\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe config rewrite is not supposed to alter file ownership nor permissions, especially not to **_insecure world-readable_**, putting sensitive data at risk.\r\n\r\n**Additional information**\r\n\r\nRunning on Debian 10, with recent redis-sentinel 6.0.9-2~bpo10+1 from buster-backports\r\nusing Debian's systemd unit, i.e. `User=redis`, `Group=redis`, `UMask=0007`",
  "state": "closed",
  "created_at": "2021-01-20T11:35:33Z",
  "updated_at": "2021-01-20T19:57:25Z",
  "closed_at": "2021-01-20T19:57:25Z",
  "labels": [],
  "comments_data": [
    {
      "id": 763575835,
      "user": "yossigo",
      "created_at": "2021-01-20T12:32:36Z",
      "body": "@tokred Thanks for reporting this! This seems to have been introduced due to a new (safer) way of rewriting configuration files. In the past the file was simply overwritten (same inode), but now Redis creates a new temporary files and then renames it over the old file.\r\n\r\nIt will be impossible to guarantee that file ownership is retained, but this should definitely be fixed to at least honor the `umask`."
    },
    {
      "id": 763616565,
      "user": "tokred",
      "created_at": "2021-01-20T13:47:59Z",
      "body": "@yossigo, thank you for confirmation and looking forward to the fix.\r\n\r\nFrankly, I find sentinel's approach of the config file getting rewritten less than ideal in the first place. It a) requires write permissions for the process' uid, b) breaks configuration deployments like Ansible (no idempotency of repeated runs as the deployed config will be altered locally), and c) kind of mixes static configuration with dynamic state under /etc. No personal criticism, just constructive feedback. :)\r\n\r\nRegards"
    },
    {
      "id": 763626067,
      "user": "yossigo",
      "created_at": "2021-01-20T14:03:38Z",
      "body": "@tokred I generally agree about the need to better separate static configuration and runtime state, but that's water under the bridge now. You may still be able to achieve idempotency if you create a separate pristine config file and a \"working config\" which is copied elsewhere."
    }
  ]
}