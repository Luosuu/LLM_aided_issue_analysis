{
  "issue_number": 4458.0,
  "title": "[Module][Bug] Replication does not work if called in different thread ",
  "body": "Hi all,\r\n\r\nI am tracing an issue that I reported in the module mail list: https://groups.google.com/forum/#!topic/redis-module-devs/ktAYnNOfv-k\r\n\r\nOverall the problem that I see is that the command RM_ReplicateVerbatim seems to have no effect if called after having blocked the client.\r\n\r\nFurter investigation (and a lot of gdb later) it seems like my description of the problem is at most imprecise.\r\nI believe that the problem is that the command RM_ReplicateVerbatim does not work if invoked in the reply callback.\r\n\r\nThe faster thing to test the hypothesis is to just call it somewhere else after the client is blocked and see if there are any effect, it is possible, I will do it, but it does require a non-trivial effort in my codebase, so please be patient. In the meantime, if you could either disprove or confirm the hypothesis it will be greatly appreciated.\r\n\r\nHowever reading the code it seems like the hypothesis is actually correct.\r\nWhen the client is unblocked the function `moduleHandleBlockedClients` should be called: https://github.com/antirez/redis/blob/553aa0e259a5b2c5f53dbc322a94b8f6930bc537/src/module.c#L3143\r\n\r\nThis function is turn call `moduleHandlePropagationAfterCommandCallback` https://github.com/antirez/redis/blob/553aa0e259a5b2c5f53dbc322a94b8f6930bc537/src/module.c#L426\r\n\r\nThat calls `preventCommandPropagation` which is defined in server.c and should prevent a function to be propagated https://github.com/antirez/redis/blob/57bd8feb8d81064cd53a7f124e7509134fb7459b/src/server.c#L2133\r\n\r\nI would like to understand if I am correctly reading the code and understanding the code base and as well I would like to understand the rationale behind this choice.\r\n\r\nI was calling the replication command in the reply callback to be sure that everything was actually complete, and the command I was replicating wasn't subject to the timeout. It seems like I was being a little too conservative.\r\n\r\nIf my comments and understanding of the code is correct, I may provide some more documentation to cover this cases so that someone else does not need to use gdb XP\r\n\r\nThanks for reading!\r\n\r\n",
  "state": "closed",
  "created_at": "2017-11-21T18:38:35Z",
  "updated_at": "2019-01-07T19:13:10Z",
  "closed_at": "2019-01-07T19:13:10Z",
  "labels": [],
  "comments_data": [
    {
      "id": 346909015,
      "user": "siscia",
      "created_at": "2017-11-25T00:27:51Z",
      "body": "A little update.\r\n\r\nI really start to believe that this is a bug in redis.\r\n\r\nHonestly I have chase this behaviour a little too much and for now I am giving up in understading what is going on.\r\n\r\nAnyway, let me explain the code path refering to this repo: https://github.com/siscia/rediSQL/tree/splitting\r\n\r\nWhen a particular command is called REDISQL.CREATE_DB a new database get created and along with it we also spawn a new thread that use a loop to listen to all the command concerning such database.\r\n\r\nThe loop: https://github.com/siscia/rediSQL/blob/splitting/src/redis.rs#L392\r\n\r\nInside the loop we listen for commands, each one get executed against the database and the we call the function return_value (https://github.com/siscia/rediSQL/blob/splitting/src/redis.rs#L402)\r\n\r\nreturn_value (https://github.com/siscia/rediSQL/blob/splitting/src/redis.rs#L341) should, in some cases, replicate verbatim the command. This does not happens.\r\n\r\nUsing gdb I figure out that the commands are actually added to server.also_propagate but then inside call @ server.c~2200:\r\n\r\n```\r\nThread 1 \"redis-server\" hit Hardware watchpoint 3: server.also_propagate                                                                           \r\n                                                                                                                                                  \r\nOld value = {ops = 0x0, numops = 4}                                                                                                                \r\nNew value = {ops = 0x0, numops = 0}                                                                                                                \r\ncall (c=c@entry=0x7ffff6b18b40, flags=flags@entry=15) at server.c:2204                                                                             \r\n2204        dirty = server.dirty;                                                                                                                  \r\n(gdb) where                                                                                                                                        \r\n#0  call (c=c@entry=0x7ffff6b18b40, flags=flags@entry=15) at server.c:2204                                                                         \r\n#1  0x000000000042c267 in processCommand (c=0x7ffff6b18b40) at server.c:2486                                                                       \r\n#2  0x000000000043bdf5 in processInputBuffer (c=0x7ffff6b18b40)                                                                                    \r\n    at networking.c:1330                                                                                                                           \r\n#3  0x000000000042598e in aeProcessEvents (                                                                                                        \r\n    eventLoop=eventLoop@entry=0x7ffff6a340a0, flags=flags@entry=11) at ae.c:421                                                                    \r\n#4  0x0000000000425dbb in aeMain (eventLoop=0x7ffff6a340a0) at ae.c:464                                                                            \r\n#5  0x0000000000422986 in main (argc=<optimized out>, argv=0x7fffffffdb48)                                                                         \r\n    at server.c:3865 \r\n```\r\nthe value get swapped to an empty array.\r\n\r\nWhat may be happening is that `RM_GetThreadSafeContext` generate a new client without setting any parameters like argv or argc.\r\n\r\nI tried to play with that function but I wasn't yet able to find a solution.\r\n"
    }
  ]
}