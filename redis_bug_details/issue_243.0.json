{
  "issue_number": 243.0,
  "title": "Crash with ASSERTION FAILED after longer uptime",
  "body": "I run a big ranking with redis but redis always crashes after some days of operation.\nThanks to version 2.4.4 I have something more detailed about it than just a signal: 11 crash reporting.\n\nI hope someone can find our what this is. Do you need more info from me?\n\n[10116] 10 Dec 17:44:28 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[10116] 10 Dec 17:44:28 # === ASSERTION FAILED ===\n[10116] 10 Dec 17:44:28 # ==> t_zset.c:2043 'rank' is not true\n[10116] 10 Dec 17:44:28 # (forcing SIGSEGV to print the bug report.)\n[10116] 10 Dec 17:44:28 #     Redis 2.4.4 crashed by signal: 11\n[10116] 10 Dec 17:44:28 #     Failed assertion: rank (t_zset.c:2043)\n[10116] 10 Dec 17:44:28 # --- STACK TRACE\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(zrankGenericCommand+0x259) [0x427fc9]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]\n[10116] 10 Dec 17:44:28 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fad195a7c4d]\n[10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server() [0x40c989]\n[10116] 10 Dec 17:44:28 # --- INFO OUTPUT\n[10116] 10 Dec 17:44:28 # redis_version:2.4.4M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M  \nmultiplexing_api:epollM \nprocess_id:10116M\nuptime_in_seconds:527463M\nuptime_in_days:6M \nlru_clock:232970M\nused_cpu_sys:1801.33M\nused_cpu_user:1398.54M\nused_cpu_sys_children:1088.90M\nused_cpu_user_children:19349.28M\nconnected_clients:4M\nconnected_slaves:0M\nclient_longest_output_list:0M\nclient_biggest_input_buf:0M\nblocked_clients:0M\nused_memory:1494171944M\nused_memory_human:1.39GM\nused_memory_rss:1501999104M\nused_memory_peak:1494171816M\nused_memory_peak_human:1.39GM\nmem_fragmentation_ratio:1.01M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:0M\nchanges_since_last_save:8015M\nbgsave_in_progress:0M\nlast_save_time:1323535184M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:2120M\ntotal_commands_processed:124112523M\nexpired_keys:0M  \nevicted_keys:0M\nkeyspace_hits:123622134M\nkeyspace_misses:488270M\npubsub_channels:0M\npubsub_patterns:0M\nlatest_fork_usec:43677M\nvm_enabled:0M\nrole:masterM\ndb0:keys=81,expires=0M\n\n[10116] 10 Dec 17:44:28 # --- CLIENT LIST OUTPUT\n[10116] 10 Dec 17:44:28 # addr=127.0.0.1:39284 fd=8 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\naddr=127.0.0.1:59485 fd=5 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\naddr=127.0.0.1:35242 fd=7 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:51220 fd=6 idle=17 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n\n[10116] 10 Dec 17:44:28 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n\nFor the next time it crashes I try to log what happens on client side, if it's even recognized by the client and what the last communication with redis was.\n",
  "state": "closed",
  "created_at": "2011-12-11T02:30:23Z",
  "updated_at": "2012-02-08T21:15:16Z",
  "closed_at": "2012-02-08T21:15:16Z",
  "labels": [
    "critical bug"
  ],
  "comments_data": [
    {
      "id": 3096213,
      "user": "antirez",
      "created_at": "2011-12-11T09:04:46Z",
      "body": "Hello d1april,\n\nthat's very bad... we are aware of this bug, but still no luck in\nrecreating it. We are not 100% sure but we think that there is a\nsequence of operations turning into a NaN, causing the bug. Another\nalternative is that the implementation of specially encoded sorted\nsets is 2.4 contains some error since this is one of the most\nimportant differences between the 2.2 and the 2.4 branch.\n\nPlease can you help fixing this bug? We need the best description you\ncan provide of the operations you perform against Redis, the size of\nyour sorted sets, and the range of the scores you add. I'll try to\ncreate a simulation to trigger the bug, and if this will not be\npossible, I'll provide you a modified version of Redis that will log\nmore of the state the instance has while crashing.\n\nAlso I've another question: is the stack trace always the same when\nRedis crashes?\n\nBtw in this issue expect from me all the collaboration, I think I'll\nstop any further development/activity for a few days in order to fix\nthis bug.\n\nThanks for reporting this bug,\nSalvatore\n\nOn Sun, Dec 11, 2011 at 3:30 AM, d1april\nreply@reply.github.com\nwrote:\n\n> I run a big ranking with redis but redis always crashes after some days of operation.\n> Thanks to version 2.4.4 I have something more detailed about it than just a signal: 11 crash reporting.\n> \n> I hope someone can find our what this is. Do you need more info from me?\n> \n> [10116] 10 Dec 17:44:28 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n> [10116] 10 Dec 17:44:28 # === ASSERTION FAILED ===\n> [10116] 10 Dec 17:44:28 # ==> t_zset.c:2043 'rank' is not true\n> [10116] 10 Dec 17:44:28 # (forcing SIGSEGV to print the bug report.)\n> [10116] 10 Dec 17:44:28 #     Redis 2.4.4 crashed by signal: 11\n> [10116] 10 Dec 17:44:28 #     Failed assertion: rank (t_zset.c:2043)\n> [10116] 10 Dec 17:44:28 # --- STACK TRACE\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(zrankGenericCommand+0x259) [0x427fc9]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]\n> [10116] 10 Dec 17:44:28 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fad195a7c4d]\n> [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server() [0x40c989]\n> [10116] 10 Dec 17:44:28 # --- INFO OUTPUT\n> [10116] 10 Dec 17:44:28 # redis_version:2.4.4M\n> redis_git_sha1:00000000M\n> redis_git_dirty:0M\n> arch_bits:64M\n> multiplexing_api:epollM\n> process_id:10116M\n> uptime_in_seconds:527463M\n> uptime_in_days:6M\n> lru_clock:232970M\n> used_cpu_sys:1801.33M\n> used_cpu_user:1398.54M\n> used_cpu_sys_children:1088.90M\n> used_cpu_user_children:19349.28M\n> connected_clients:4M\n> connected_slaves:0M\n> client_longest_output_list:0M\n> client_biggest_input_buf:0M\n> blocked_clients:0M\n> used_memory:1494171944M\n> used_memory_human:1.39GM\n> used_memory_rss:1501999104M\n> used_memory_peak:1494171816M\n> used_memory_peak_human:1.39GM\n> mem_fragmentation_ratio:1.01M\n> mem_allocator:jemalloc-2.2.5M\n> loading:0M\n> aof_enabled:0M\n> changes_since_last_save:8015M\n> bgsave_in_progress:0M\n> last_save_time:1323535184M\n> bgrewriteaof_in_progress:0M\n> total_connections_received:2120M\n> total_commands_processed:124112523M\n> expired_keys:0M\n> evicted_keys:0M\n> keyspace_hits:123622134M\n> keyspace_misses:488270M\n> pubsub_channels:0M\n> pubsub_patterns:0M\n> latest_fork_usec:43677M\n> vm_enabled:0M\n> role:masterM\n> db0:keys=81,expires=0M\n> \n> [10116] 10 Dec 17:44:28 # --- CLIENT LIST OUTPUT\n> [10116] 10 Dec 17:44:28 # addr=127.0.0.1:39284 fd=8 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\n> addr=127.0.0.1:59485 fd=5 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\n> addr=127.0.0.1:35242 fd=7 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n> addr=127.0.0.1:51220 fd=6 idle=17 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n> \n> [10116] 10 Dec 17:44:28 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n> \n> For the next time it crashes I try to log what happens on client side, if it's even recognized by the client and what the last communication with redis was.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/antirez/redis/issues/243\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3096347,
      "user": "antirez",
      "created_at": "2011-12-11T09:47:29Z",
      "body": "Hey Pieter, about this bug, remember our investigation/reasoning about\nhow a NaN was generated since there is no way in the code path?\nI think we overlooked that:\n\n#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n    float f = 0;\n\n```\nmemset(&f,0xff,1);\nprintf(\"%f\\n\", f);\nreturn 0;\n```\n\n}\n\n./a.out\nnan\n\nBasically an off-by-one bug can easily create a NaN accidentally so we\nneed to look into this as well.\n\nCheers,\nSalvatore\n\nOn Sun, Dec 11, 2011 at 10:04 AM, Salvatore Sanfilippo\nantirez@gmail.com wrote:\n\n> Hello d1april,\n> \n> that's very bad... we are aware of this bug, but still no luck in\n> recreating it. We are not 100% sure but we think that there is a\n> sequence of operations turning into a NaN, causing the bug. Another\n> alternative is that the implementation of specially encoded sorted\n> sets is 2.4 contains some error since this is one of the most\n> important differences between the 2.2 and the 2.4 branch.\n> \n> Please can you help fixing this bug? We need the best description you\n> can provide of the operations you perform against Redis, the size of\n> your sorted sets, and the range of the scores you add. I'll try to\n> create a simulation to trigger the bug, and if this will not be\n> possible, I'll provide you a modified version of Redis that will log\n> more of the state the instance has while crashing.\n> \n> Also I've another question: is the stack trace always the same when\n> Redis crashes?\n> \n> Btw in this issue expect from me all the collaboration, I think I'll\n> stop any further development/activity for a few days in order to fix\n> this bug.\n> \n> Thanks for reporting this bug,\n> Salvatore\n> \n> On Sun, Dec 11, 2011 at 3:30 AM, d1april\n> reply@reply.github.com\n> wrote:\n> \n> > I run a big ranking with redis but redis always crashes after some days of operation.\n> > Thanks to version 2.4.4 I have something more detailed about it than just a signal: 11 crash reporting.\n> > \n> > I hope someone can find our what this is. Do you need more info from me?\n> > \n> > [10116] 10 Dec 17:44:28 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n> > [10116] 10 Dec 17:44:28 # === ASSERTION FAILED ===\n> > [10116] 10 Dec 17:44:28 # ==> t_zset.c:2043 'rank' is not true\n> > [10116] 10 Dec 17:44:28 # (forcing SIGSEGV to print the bug report.)\n> > [10116] 10 Dec 17:44:28 #     Redis 2.4.4 crashed by signal: 11\n> > [10116] 10 Dec 17:44:28 #     Failed assertion: rank (t_zset.c:2043)\n> > [10116] 10 Dec 17:44:28 # --- STACK TRACE\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(zrankGenericCommand+0x259) [0x427fc9]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]\n> > [10116] 10 Dec 17:44:28 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fad195a7c4d]\n> > [10116] 10 Dec 17:44:28 # /usr/local/bin/redis-server() [0x40c989]\n> > [10116] 10 Dec 17:44:28 # --- INFO OUTPUT\n> > [10116] 10 Dec 17:44:28 # redis_version:2.4.4M\n> > redis_git_sha1:00000000M\n> > redis_git_dirty:0M\n> > arch_bits:64M\n> > multiplexing_api:epollM\n> > process_id:10116M\n> > uptime_in_seconds:527463M\n> > uptime_in_days:6M\n> > lru_clock:232970M\n> > used_cpu_sys:1801.33M\n> > used_cpu_user:1398.54M\n> > used_cpu_sys_children:1088.90M\n> > used_cpu_user_children:19349.28M\n> > connected_clients:4M\n> > connected_slaves:0M\n> > client_longest_output_list:0M\n> > client_biggest_input_buf:0M\n> > blocked_clients:0M\n> > used_memory:1494171944M\n> > used_memory_human:1.39GM\n> > used_memory_rss:1501999104M\n> > used_memory_peak:1494171816M\n> > used_memory_peak_human:1.39GM\n> > mem_fragmentation_ratio:1.01M\n> > mem_allocator:jemalloc-2.2.5M\n> > loading:0M\n> > aof_enabled:0M\n> > changes_since_last_save:8015M\n> > bgsave_in_progress:0M\n> > last_save_time:1323535184M\n> > bgrewriteaof_in_progress:0M\n> > total_connections_received:2120M\n> > total_commands_processed:124112523M\n> > expired_keys:0M\n> > evicted_keys:0M\n> > keyspace_hits:123622134M\n> > keyspace_misses:488270M\n> > pubsub_channels:0M\n> > pubsub_patterns:0M\n> > latest_fork_usec:43677M\n> > vm_enabled:0M\n> > role:masterM\n> > db0:keys=81,expires=0M\n> > \n> > [10116] 10 Dec 17:44:28 # --- CLIENT LIST OUTPUT\n> > [10116] 10 Dec 17:44:28 # addr=127.0.0.1:39284 fd=8 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\n> > addr=127.0.0.1:59485 fd=5 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\n> > addr=127.0.0.1:35242 fd=7 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n> > addr=127.0.0.1:51220 fd=6 idle=17 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n> > \n> > [10116] 10 Dec 17:44:28 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n> > \n> > For the next time it crashes I try to log what happens on client side, if it's even recognized by the client and what the last communication with redis was.\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/antirez/redis/issues/243\n> \n> ## \n> \n> Salvatore 'antirez' Sanfilippo\n> open source developer - VMware\n> \n> http://invece.org\n> \"We are what we repeatedly do. Excellence, therefore, is not an act,\n> but a habit.\" -- Aristotele\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3167066,
      "user": "dhcode",
      "created_at": "2011-12-15T18:58:38Z",
      "body": "Next crash appeared.\nThis time with another stack trace:\n\n[334] 15 Dec 16:12:12 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[334] 15 Dec 16:12:12 #     Redis 2.4.4 crashed by signal: 11\n[334] 15 Dec 16:12:12 #     Failed assertion: <no assertion failed> (<no file>:0)\n[334] 15 Dec 16:12:12 # --- STACK TRACE\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427cf0]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427cf0]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(zrankGenericCommand+0xfb) [0x427e6b]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]  \n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]  \n[334] 15 Dec 16:12:12 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fd473286c4d]\n[334] 15 Dec 16:12:12 # /usr/local/bin/redis-server() [0x40c989]\n[334] 15 Dec 16:12:12 # --- INFO OUTPUT\n[334] 15 Dec 16:12:12 # redis_version:2.4.4M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:334M\nuptime_in_seconds:401253M\nuptime_in_days:4M\nlru_clock:275617M\nused_cpu_sys:1556.41M\nused_cpu_user:1253.57M\nused_cpu_sys_children:883.48M\nused_cpu_user_children:18567.52M\nconnected_clients:4M\nconnected_slaves:0M \nclient_longest_output_list:0M\nclient_biggest_input_buf:0M  \nblocked_clients:0M\nused_memory:1448148104M\nused_memory_human:1.35GM\nused_memory_rss:1416597504M\nused_memory_peak:1569236456M\nused_memory_peak_human:1.46GM\nmem_fragmentation_ratio:0.98M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:0M\nchanges_since_last_save:556M\nbgsave_in_progress:0M\nlast_save_time:1323961888M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:5409M\ntotal_commands_processed:107631647M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:107623303M\nkeyspace_misses:2939M  \npubsub_channels:0M  \npubsub_patterns:0M  \nlatest_fork_usec:44174M \nvm_enabled:0M\nrole:masterM \ndb0:keys=81,expires=0M\n\n[334] 15 Dec 16:12:12 # --- CLIENT LIST OUTPUT\n[334] 15 Dec 16:12:12 # addr=127.0.0.1:50685 fd=6 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\naddr=127.0.0.1:50850 fd=8 idle=3 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:55510 fd=5 idle=17 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:44674 fd=7 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd  \n\n[334] 15 Dec 16:12:12 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n\nThis time I logged all command by my 4 clients send. I use redis with nodejs.\n\nc_redisclient_20111215_0939_691_0.log\n[1323961915480] zrevrank {\"key\":\"pc_stat.mvpr\",\"member\":236782663,\"err\":null,\"res\":46687}\n[1323961915480] zcard {\"key\":\"pc_stat.mvpr\",\"err\":null,\"res\":289992}\n[1323962955665] zrevrank {\"key\":\"ps3_stat.score\",\"member\":185975958,\"err\":\"Redis connection to 127.0.0.1:6379 failed - connect ECONNREFUSED\"}\n\nc_redisclient_20111215_1511_11850_0.log\n[1323961931333] zadd {\"key\":\"360_stat.c___hsd_ghva\",\"score\":82.41,\"member\":304878202,\"err\":null,\"res\":0}\n[1323961931333] zadd {\"key\":\"360_stat.mvpr\",\"score\":68,\"member\":304878202,\"err\":null,\"res\":0}\n[1323961933796] zadd {\"key\":\"pc_stat.score\",\"score\":5398600,\"member\":352288985,\"err\":\"Redis connection to 127.0.0.1:6379 failed - connect ECONNREFUSED\"}\n\nc_redisclient_20111215_1505_10469_0.log\n[1323961933771] zrevrank {\"key\":\"pc_stat.supkperc\",\"member\":182156670,\"err\":null,\"res\":73583}\n[1323961933771] zcard {\"key\":\"pc_stat.supkperc\",\"err\":null,\"res\":333994}\n[1323961933967] zrevrank {\"key\":\"pc_stat.hkperc\",\"member\":182156670,\"err\":\"Redis connection gone from close event.\"}\n\nc_redisclient_20111215_1505_10406_0.log\n[1323961934649] zrevrank {\"key\":\"ps3_stat.mvpr\",\"member\":369936597,\"err\":null,\"res\":23436}\n[1323961934649] zcard {\"key\":\"ps3_stat.mvpr\",\"err\":null,\"res\":80261}\n[1323961935312] zrevrank {\"key\":\"ps3_stat.score\",\"member\":320870348,\"err\":\"Redis connection gone from end event.\"}\n\nI have 6.8GB of logs like this between last start and this crash.\n\nI actively use 78 different keys. Every key has between 50k and 400k members and new members coming every day. Every day over 200k scores get updated from one client(I only have one that performs changes to the ranking). \nI guess it's a busy redis server.\nThe range of scores used is basically everything including lots of decimals because many values are calculated like score per minute values and I do not do any rounding before pushing them to redis.\n\nThe whole ranking is available there: http://bf3stats.com/leaderboard/all\nI have no clue how to reproduce this on purpose. It just appears after some time.\nThe commands send before the crash have no error or suspicious return values or any suspicious pattern.\n"
    },
    {
      "id": 3167259,
      "user": "antirez",
      "created_at": "2011-12-15T19:12:38Z",
      "body": "> I have 6.8GB of logs like this between last start and this crash.\n\nThanks, if you could send me those logs what I would try is to write a script doing all the ZADD commands in the logs, so that the corruption could be reproduced, given some luck.\n\nCould you please place this logs somewhere? Thanks.\n\nAnother important thing is, what Z\\* commands do you use? Just ZADD, ZCARD, ZREVRANK? This is very important to know for us.\n\nSalvatore\n"
    },
    {
      "id": 3177971,
      "user": "dhcode",
      "created_at": "2011-12-16T14:50:13Z",
      "body": "Next crash, sadly I had to disabled the client logging yesterday.\n\n[20713] 16 Dec 11:55:33 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[20713] 16 Dec 11:55:33 # === ASSERTION FAILED ===\n[20713] 16 Dec 11:55:33 # ==> t_zset.c:927 'zslDelete(zs->zsl,curscore,curobj)' is not true\n[20713] 16 Dec 11:55:33 # (forcing SIGSEGV to print the bug report.)\n[20713] 16 Dec 11:55:33 #     Redis 2.4.4 crashed by signal: 11\n[20713] 16 Dec 11:55:33 #     Failed assertion: zslDelete(zs->zsl,curscore,curobj) (t_zset.c:927)\n[20713] 16 Dec 11:55:33 # --- STACK TRACE\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(zaddGenericCommand+0x549) [0x428db9]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]  \n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f] \n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]\n[20713] 16 Dec 11:55:33 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fe382835c4d]\n[20713] 16 Dec 11:55:33 # /usr/local/bin/redis-server() [0x40c989]\n[20713] 16 Dec 11:55:33 # --- INFO OUTPUT\n[20713] 16 Dec 11:55:33 # redis_version:2.4.4M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:20713M\nuptime_in_seconds:67242M\nuptime_in_days:0M  \nlru_clock:282717M  \nused_cpu_sys:201.03M \nused_cpu_user:183.22M\nused_cpu_sys_children:127.96M  \nused_cpu_user_children:2301.18M\nconnected_clients:4M\nconnected_slaves:0M\nclient_longest_output_list:0M\nclient_biggest_input_buf:77M\nblocked_clients:0M\nused_memory:1441653080M  \nused_memory_human:1.34GM  \nused_memory_rss:1509560320M  \nused_memory_peak:1499991984M \nused_memory_peak_human:1.40GM\nmem_fragmentation_ratio:1.05M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:0M\nchanges_since_last_save:4405M\nbgsave_in_progress:1M\nlast_save_time:1324032629M \nbgrewriteaof_in_progress:0M\ntotal_connections_received:493M  \ntotal_commands_processed:13457933M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:13457447M\nkeyspace_misses:0M\npubsub_channels:0M\npubsub_patterns:0M\nlatest_fork_usec:42566M\nvm_enabled:0M\nrole:masterM\ndb0:keys=81,expires=0M\n\n[20713] 16 Dec 11:55:33 # --- CLIENT LIST OUTPUT\n[20713] 16 Dec 11:55:33 # addr=127.0.0.1:44207 fd=7 idle=0 flags=N db=0 sub=0 psub=0 qbuf=77 obl=0 oll=0 events=r cmd=zadd\naddr=127.0.0.1:48945 fd=5 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:53469 fd=6 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:33477 fd=8 idle=171 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=info\n\n[20713] 16 Dec 11:55:33 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n\nNow I activated the logs again to have all commands till the next crash.\n"
    },
    {
      "id": 3178086,
      "user": "antirez",
      "created_at": "2011-12-16T15:00:35Z",
      "body": "Thanks, I noticed this:\n\nused_memory_human:1.34GM\n\nBut when I play the log that you sent me the instance never uses so\nmuch memory, so the log I received did not started from a clean data\nset perhaps?\nAt this point two things could help:\n\n1) Please can you send me your dump.rdb file? I need to understand if\nit is already corrupted (that is, a score is a NaN) so the log can\nnever reproduce the bug, that is caused by previous state.\n2) May you run a modified version of Redis that I'm modifying so that\nit show more information on crash?\n\nThanks,\nSalvatore\n\nOn Fri, Dec 16, 2011 at 3:50 PM, Dominik\nreply@reply.github.com\nwrote:\n\n> used_memory_human:1.34GM\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3303284,
      "user": "dhcode",
      "created_at": "2011-12-29T18:10:31Z",
      "body": "Next crash happened:\n\n[4235] 29 Dec 18:12:41 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[4235] 29 Dec 18:12:41 # === ASSERTION FAILED ===\n[4235] 29 Dec 18:12:41 # ==> t_zset.c:2043 'rank' is not true\n[4235] 29 Dec 18:12:41 # (forcing SIGSEGV to print the bug report.)\n[4235] 29 Dec 18:12:41 #     Redis 2.4.4 crashed by signal: 11\n[4235] 29 Dec 18:12:41 #     Failed assertion: rank (t_zset.c:2043)\n[4235] 29 Dec 18:12:41 # --- STACK TRACE\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(_redisAssert+0x6f) [0x431d6f]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(zrankGenericCommand+0x259) [0x427fc9]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(call+0x34) [0x410784]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410acc]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b1f]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419bfc]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d433]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d67e]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server(main+0xff) [0x4128ff]\n[4235] 29 Dec 18:12:41 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7f92f503ac4d]\n[4235] 29 Dec 18:12:41 # /usr/local/bin/redis-server() [0x40c989]\n[4235] 29 Dec 18:12:41 # --- INFO OUTPUT\n[4235] 29 Dec 18:12:41 # redis_version:2.4.4M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:4235M\nuptime_in_seconds:1132009M\nuptime_in_days:13M\nlru_clock:397300M\nused_cpu_sys:4035.61M\nused_cpu_user:2883.55M\nused_cpu_sys_children:2509.00M\nused_cpu_user_children:45935.92M\nconnected_clients:4M\nconnected_slaves:0M\nclient_longest_output_list:0M\nclient_biggest_input_buf:0M\nblocked_clients:0M\nused_memory:1713945872M\nused_memory_human:1.60GM\nused_memory_rss:1696440320M\nused_memory_peak:1713945792M\nused_memory_peak_human:1.60GM\nmem_fragmentation_ratio:0.99M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:0M\nchanges_since_last_save:1079M\nbgsave_in_progress:0M\nlast_save_time:1325178736M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:8687M\ntotal_commands_processed:275142091M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:275133408M\nkeyspace_misses:0M\npubsub_channels:0M\npubsub_patterns:0M\nlatest_fork_usec:57056M\nvm_enabled:0M  \nrole:masterM\ndb0:keys=81,expires=0M\n\n[4235] 29 Dec 18:12:41 # --- CLIENT LIST OUTPUT\n[4235] 29 Dec 18:12:41 # addr=127.0.0.1:56674 fd=5 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrem\naddr=127.0.0.1:47936 fd=7 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\naddr=127.0.0.1:48012 fd=8 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:46350 fd=6 idle=215 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=info\n\n[4235] 29 Dec 18:12:41 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n\nNow we have the same assert message like the first one I posted.\nI have now 12GB (uncompressed) of log files which are packed about 2GB which document every command sent to redis.\n\nI installed now the new version 2.4.5. Lets see how long this lives.\n"
    },
    {
      "id": 3393092,
      "user": "dhcode",
      "created_at": "2012-01-07T00:39:02Z",
      "body": "This time it crashed again with new version and started fresh with no data.\n\n[26108] 07 Jan 00:43:08 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[26108] 07 Jan 00:43:08 #     Redis 2.4.5 crashed by signal: 11\n[26108] 07 Jan 00:43:08 #     Failed assertion: <no assertion failed> (<no file>:0)\n[26108] 07 Jan 00:43:08 # --- STACK TRACE\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427e50]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427e50]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(zrankGenericCommand+0xfb) [0x427fcb]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(call+0x34) [0x4107c4]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410b0c]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b6f]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419c4c]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d473]  \n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d6be]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server(main+0xff) [0x41293f]  \n[26108] 07 Jan 00:43:08 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7f7f61d70c4d]\n[26108] 07 Jan 00:43:08 # /usr/local/bin/redis-server() [0x40c9c9]\n[26108] 07 Jan 00:43:08 # --- INFO OUTPUT\n[26108] 07 Jan 00:43:08 # redis_version:2.4.5M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:26108M\nuptime_in_seconds:710714M\nuptime_in_days:8M\nlru_clock:468762M\nused_cpu_sys:2845.99M\nused_cpu_user:2002.62M\nused_cpu_sys_children:1446.47M\nused_cpu_user_children:31318.85M\nconnected_clients:4M\nconnected_slaves:0M \nclient_longest_output_list:0M\nclient_biggest_input_buf:0M  \nblocked_clients:0M\nused_memory:1481020848M\nused_memory_human:1.38GM\nused_memory_rss:1509715968M\nused_memory_peak:1481020864M\nused_memory_peak_human:1.38GM\nmem_fragmentation_ratio:1.02M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:0M\nchanges_since_last_save:10024M\nbgsave_in_progress:1M\nlast_save_time:1325893105M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:5130M\ntotal_commands_processed:193143574M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:193137167M\nkeyspace_misses:1278M  \npubsub_channels:0M  \npubsub_patterns:0M  \nlatest_fork_usec:43443M \nvm_enabled:0M\nrole:masterM \ndb0:keys=78,expires=0M\n\n[26108] 07 Jan 00:43:08 # --- CLIENT LIST OUTPUT\n[26108] 07 Jan 00:43:08 # addr=127.0.0.1:52391 fd=7 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\naddr=127.0.0.1:48166 fd=5 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\naddr=127.0.0.1:48950 fd=8 idle=282 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=info\naddr=127.0.0.1:53297 fd=6 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\n\n[26108] 07 Jan 00:43:08 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n"
    },
    {
      "id": 3416863,
      "user": "dhcode",
      "created_at": "2012-01-09T17:42:32Z",
      "body": "[23635] 09 Jan 09:33:04 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[23635] 09 Jan 09:33:04 #     Redis 2.4.5 crashed by signal: 11\n[23635] 09 Jan 09:33:04 #     Failed assertion: <no assertion failed> (<no file>:0)\n[23635] 09 Jan 09:33:04 # --- STACK TRACE\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427e50]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(zslGetRank+0x40) [0x427e50]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(zrankGenericCommand+0xfb) [0x427fcb]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(call+0x34) [0x4107c4]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410b0c]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b6f] \n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419c4c]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d473]  \n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d6be]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server(main+0xff) [0x41293f]  \n[23635] 09 Jan 09:33:04 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7fb52b36dc4d]\n[23635] 09 Jan 09:33:04 # /usr/local/bin/redis-server() [0x40c9c9]\n[23635] 09 Jan 09:33:04 # --- INFO OUTPUT\n[23635] 09 Jan 09:33:04 # redis_version:2.4.5M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:23635M\nuptime_in_seconds:137701M\nuptime_in_days:1M\nlru_clock:489222M  \nused_cpu_sys:730.64M \nused_cpu_user:515.57M\nused_cpu_sys_children:204.90M\nused_cpu_user_children:5041.82M\nconnected_clients:4M\nconnected_slaves:0M \nclient_longest_output_list:0M\nclient_biggest_input_buf:0M  \nblocked_clients:0M\nused_memory:1256305616M\nused_memory_human:1.17GM  \nused_memory_rss:1285152768M  \nused_memory_peak:1257221216M \nused_memory_peak_human:1.17GM\nmem_fragmentation_ratio:1.02M\nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:1M\nchanges_since_last_save:1992M\nbgsave_in_progress:0M\nlast_save_time:1326097845M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:1078M\ntotal_commands_processed:48958566M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:48956560M\nkeyspace_misses:929M  \npubsub_channels:0M  \npubsub_patterns:0M\nlatest_fork_usec:38500M\nvm_enabled:0M\nrole:masterM \naof_current_size:897799810M\naof_base_size:0M\naof_pending_rewrite:0M\naof_buffer_length:0M  \naof_pending_bio_fsync:0M\ndb0:keys=78,expires=0M  \n\n[23635] 09 Jan 09:33:04 # --- CLIENT LIST OUTPUT\n[23635] 09 Jan 09:33:04 # addr=127.0.0.1:55287 fd=9 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\naddr=127.0.0.1:45539 fd=8 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zrevrank\naddr=127.0.0.1:54710 fd=7 idle=268 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=info\naddr=127.0.0.1:34469 fd=6 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zcard\n\n[23635] 09 Jan 09:33:04 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n"
    },
    {
      "id": 3417227,
      "user": "antirez",
      "created_at": "2012-01-09T18:05:02Z",
      "body": "If redis would log the full command processed we could know the key name and the element creating the problem. It is not certain that this would help us, but it's worth a try... I've a few ideas about how to add such a feature easily, more news soon.\n\np.s. I just replayed your latest log without success unfortunately but for now only sequentially with \"cat\". Trying to run different processes for each of your real pids, so that at least it is more similar to what was happening in your box.\n"
    },
    {
      "id": 3417265,
      "user": "antirez",
      "created_at": "2012-01-09T18:07:28Z",
      "body": "Another interesting thing, you have very very big sorted sets since just 78 keys are taking 1.17GB of RAM. I think that in all the consistency tests we have we never use such big sorted sets, so maybe I should try some stress testing with sorted sets having more elements. Results soon about this as well. Thanks\n"
    },
    {
      "id": 3462102,
      "user": "dhcode",
      "created_at": "2012-01-12T12:06:51Z",
      "body": "[19101] 12 Jan 09:35:37 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[19101] 12 Jan 09:35:37 #     Redis 2.4.5 crashed by signal: 11\n[19101] 12 Jan 09:35:37 #     Failed assertion: <no assertion failed> (<no file>:0)\n[19101] 12 Jan 09:35:37 # --- STACK TRACE\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(zslInsert+0x70) [0x428530]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(zslInsert+0x70) [0x428530]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(zaddGenericCommand+0x352) [0x428d62]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(call+0x34) [0x4107c4]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(processCommand+0x26c) [0x410b0c]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(processInputBuffer+0x4f) [0x419b6f]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(readQueryFromClient+0x6c) [0x419c4c]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(aeProcessEvents+0x153) [0x40d473]  \n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(aeMain+0x2e) [0x40d6be]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server(main+0xff) [0x41293f]  \n[19101] 12 Jan 09:35:37 # /lib/libc.so.6(__libc_start_main+0xfd) [0x7f97d6560c4d]\n[19101] 12 Jan 09:35:37 # /usr/local/bin/redis-server() [0x40c9c9]\n[19101] 12 Jan 09:35:37 # --- INFO OUTPUT\n[19101] 12 Jan 09:35:37 # redis_version:2.4.5M\nredis_git_sha1:00000000M\nredis_git_dirty:0M\narch_bits:64M\nmultiplexing_api:epollM\nprocess_id:19101M\nuptime_in_seconds:147072M\nuptime_in_days:1M\nlru_clock:515157M\nused_cpu_sys:617.49M\nused_cpu_user:398.33M\nused_cpu_sys_children:86.64M\nused_cpu_user_children:1969.96M\nconnected_clients:1M\nconnected_slaves:0M \nclient_longest_output_list:0M\nclient_biggest_input_buf:0M  \nblocked_clients:0M\nused_memory:570575880M\nused_memory_human:544.14MM\nused_memory_rss:583987200M\nused_memory_peak:570574288M  \nused_memory_peak_human:544.14MM\nmem_fragmentation_ratio:1.02M  \nmem_allocator:jemalloc-2.2.5M\nloading:0M\naof_enabled:1M\nchanges_since_last_save:1698M\nbgsave_in_progress:0M\nlast_save_time:1326357235M\nbgrewriteaof_in_progress:0M\ntotal_connections_received:1M\ntotal_commands_processed:40557702M\nexpired_keys:0M\nevicted_keys:0M\nkeyspace_hits:40557624M\nkeyspace_misses:78M\npubsub_channels:0M \npubsub_patterns:0M\nlatest_fork_usec:17154M\nvm_enabled:0M\nrole:masterM \naof_current_size:433360548M\naof_base_size:0M\naof_pending_rewrite:0M\naof_buffer_length:978M\naof_pending_bio_fsync:0M\ndb0:keys=78,expires=0M  \n\n[19101] 12 Jan 09:35:37 # --- CLIENT LIST OUTPUT\n[19101] 12 Jan 09:35:37 # addr=127.0.0.1:52915 fd=6 idle=0 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=zadd\n\n[19101] 12 Jan 09:35:37 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n"
    },
    {
      "id": 3465841,
      "user": "antirez",
      "created_at": "2012-01-12T16:23:24Z",
      "body": "Hi Dominik,\n\ntoday I wrote too much in skype, so now I'm trying to make a bit of\norder about the informations I wrote about GDB :)\n\nBasically while a Redis instance is running, you can install GDB to\nit, that is, the debugger that allows us to inspect the state of the\nprogram after the crash.\n\nHere is how to do it. In one terminal I started Redis, and obtained\nthe process ID of Redis with:\n\n$ redis-cli info | grep process_id\nprocess_id:2215\n\nNow it's time to attach GDB. it is a good idea to start a 'screen'\nsession to attach GDB so that it can later be resumed when Redis\ncrashes.\nFirst of all I start GDB telling it to attach my process ID. To do so\nyou may need to switch to the root account (it depends on the Linux\nconfiguration):\n\n$ sudo gdb\nGNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08\nCopyright (C) 2011 Free Software Foundation, Inc.\n(gdb) attach 2215\n<... lots of debugging stuff printed ...>\n(gdb) continue\n\nas you can see you need to both attach the process, and then use the\n\"continue\" command to let your redis-server process continue running,\nsince GDB will stop it by default.\n\nNow you can quit the screen session waiting for a crash ...\n\nI'm now simulating the crash using the \"DEBUG SEGFAULT\" command to\nshow you what happens:\n\nProgram received signal SIGSEGV, Segmentation fault.\ndebugCommand (c=0xb718e000) at debug.c:214\n214         _((char_)-1) = 'x';\n(gdb)\n\nIf you use the \"bt\" command GDB will print a useful stack trace:\n\n(gdb) bt\n#0  debugCommand (c=0xb718e000) at debug.c:214\n#1  0x0805829f in call (c=0xb718e000) at redis.c:1152\n#2  0x0805a490 in processCommand (c=0xb718e000) at redis.c:1294\n#3  0x08061f07 in processInputBuffer (c=0xb718e000) at networking.c:863\n#4  0x08054b78 in aeProcessEvents (eventLoop=0xb6c060a0, flags=3) at ae.c:354\n#5  0x08054f5c in aeMain (eventLoop=0xb6c060a0) at ae.c:399\n#6  0x08053d55 in main (argc=1, argv=0xbf8db344) at redis.c:2119\n\nPlease save this output and send me it by email if possible.\n\nThen it is time to create the \"core dump\" file:\n\n(gdb) gcore\nSaved corefile core.2405\n\nNow if you send me the core file, and the redis-server binary that\nproduced the crash, I should be able to re-enter the GDB session in my\nsystem with the ability to investigate the _exact_ structure of the\nskiplist, all the state of the program, and so forth.\n\nThank you,\nSalvatore\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3466665,
      "user": "dhcode",
      "created_at": "2012-01-12T17:14:53Z",
      "body": "gdb is attached now and I will do that next time it crashes.\n"
    },
    {
      "id": 3472548,
      "user": "antirez",
      "created_at": "2012-01-12T23:24:16Z",
      "body": "On Thu, Jan 12, 2012 at 6:14 PM, Dominik\nreply@reply.github.com\nwrote:\n\n> gdb is attached now and I will do that next time it crashes.\n\nThanks, I'm continuing with the core review.\n\nSalvatore\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3517079,
      "user": "youurayy",
      "created_at": "2012-01-16T19:56:38Z",
      "body": "Just a guess - but d1april, did you try to run a memtest or other hardware tests on your machine where Redis crashes?\n"
    },
    {
      "id": 3517213,
      "user": "dhcode",
      "created_at": "2012-01-16T20:06:17Z",
      "body": "The root server is rented within a data center and runs very stable. Most other processes on that machine run very stable, too.\nIt's a production system, so I don't think doing such tests is a good idea. I'm curious about the next crash with gdb attached.\n"
    },
    {
      "id": 3518095,
      "user": "antirez",
      "created_at": "2012-01-16T21:00:58Z",
      "body": "On Mon, Jan 16, 2012 at 8:56 PM, Juraj Vitko\nreply@reply.github.com\nwrote:\n\n> Just a guess - but d1april, did you try to run a memtest or other hardware tests on your machine where Redis crashes?\n\nI tend to believe that there are 99.99% chances that is either a Redis\nbug (99%) or something related to the building environment that\nproduces bad code for some sorted set stuff (1%). Broken memory is\nunlikely to always crash Redis, and always crash it about sorted set\ncode implementation, the hash table should corrupt as well for\ninstance, both the main one (holding the keys) and the hash table that\nis used by every sorted set.\n\nFortunately we can rule out the 1% since Dominik is helping us to the\nextend of building a proxy so that he is sending the same traffic both\nto Redis compiled with gcc 4.4.5-8 and to a different host with a\ndifferent gcc version.\nAt the same time today I installed a Debian 6.0.3 featuring the same\ngcc version of the host experiencing the crash, and I'm stress testing\nit to see if it could be something related with gcc, but IMHO it's\nbetter to assume this is the 1% chance.\n\nMore likely there is an extremely rare bug in Redis, but with some\ntime we'll track it, especially since we are doing progresses in the\nway we are attacking the bug. To start Dominik is waiting for the next\ncrash to produce the core dump and send me it together with the\nexecutable, this way I and Pieter will be able to inspect memory and\nstate at the time of the crash, that could help.\nIf this does not work I'll create a fork of Redis that has a\npredictably shaped skiplists (using an independent PRNG just to pick\nthe random level of nodes), such a fork should let us replicate the\nbug replaying the AOF registered during the crash, plus the last\ncommand.\n\nIt is pretty impressive that no one is experiencing this bug indeed,\nbut still I consider not blaming Redis itself our last resort ;)\n\nCheers,\nSalvatore\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/antirez/redis/issues/243#issuecomment-3517079\n\n## \n\nSalvatore 'antirez' Sanfilippo\nopen source developer - VMware\n\nhttp://invece.org\n\"We are what we repeatedly do. Excellence, therefore, is not an act,\nbut a habit.\" -- Aristotele\n"
    },
    {
      "id": 3717219,
      "user": "szymon-jez",
      "created_at": "2012-01-30T10:17:35Z",
      "body": "I got a, probably similar, error while Redis was under heavy load:\n\n```\n[3149] 29 Jan 17:25:33 # === REDIS BUG REPORT START: Cut & paste starting from here ===\n[3149] 29 Jan 17:25:33 #     Redis 2.4.4 crashed by signal: 11\n[3149] 29 Jan 17:25:33 #     Failed assertion: <no assertion failed> (<no file>:0)\n[3149] 29 Jan 17:25:33 # --- STACK TRACE\n[3149] 29 Jan 17:25:33 # ./redis-server() [0x80851f3]\n[3149] 29 Jan 17:25:33 # ./redis-server() [0x808ebbf]\n[3149] 29 Jan 17:25:33 # ./redis-server(je_free+0x35a) [0x807f0ea]\n[3149] 29 Jan 17:25:33 # ./redis-server(slowlogFreeEntry+0x28) [0x807bd28]\n[3149] 29 Jan 17:25:33 # ./redis-server(listDelNode+0x32) [0x80514a2]\n[3149] 29 Jan 17:25:33 # ./redis-server(slowlogPushEntryIfNeeded+0x77) [0x807beb7]\n[3149] 29 Jan 17:25:33 # ./redis-server(call+0x75) [0x80550c5]\n[3149] 29 Jan 17:25:33 # ./redis-server(processCommand+0x253) [0x8056c13]\n[3149] 29 Jan 17:25:33 # ./redis-server(processInputBuffer+0x57) [0x805e7d7]\n[3149] 29 Jan 17:25:33 # ./redis-server(readQueryFromClient+0x85) [0x805e8d5]\n[3149] 29 Jan 17:25:33 # ./redis-server(aeProcessEvents+0x12e) [0x8051dee]\n[3149] 29 Jan 17:25:33 # ./redis-server(aeMain+0x37) [0x8052187]\n[3149] 29 Jan 17:25:33 # ./redis-server(main+0x110) [0x8057890]\n[3149] 29 Jan 17:25:33 # /lib32/libc.so.6(__libc_start_main+0xe7) [0xf75b1e37]\n[3149] 29 Jan 17:25:33 # ./redis-server() [0x80511b1]\n[3149] 29 Jan 17:25:33 # --- INFO OUTPUT\n[3149] 29 Jan 17:25:33 # redis_version:2.4.4\nredis_git_sha1:00000000\nredis_git_dirty:0\narch_bits:32\nmultiplexing_api:epoll\nprocess_id:3149\nuptime_in_seconds:352769\nuptime_in_days:4\nlru_clock:664857\nused_cpu_sys:23251.42\nused_cpu_user:16173.52\nused_cpu_sys_children:9795.19\nused_cpu_user_children:7721.67\nconnected_clients:12\nconnected_slaves:0\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\nused_memory:4064789620\nused_memory_human:3.79G\nused_memory_rss:4084191232\nused_memory_peak:4064771596\nused_memory_peak_human:3.79G\nmem_fragmentation_ratio:1.00\nmem_allocator:jemalloc-2.2.5\nloading:0\naof_enabled:0\nchanges_since_last_save:172547\nbgsave_in_progress:1\nlast_save_time:1327854257\nbgrewriteaof_in_progress:0\ntotal_connections_received:240\ntotal_commands_processed:3339961223\nexpired_keys:0\nevicted_keys:0\nkeyspace_hits:3257524674\nkeyspace_misses:82035803\npubsub_channels:1\npubsub_patterns:0\nlatest_fork_usec:54424\nvm_enabled:0\nrole:master\ndb0:keys=19175,expires=0\ndb1:keys=5431,expires=0\ndb3:keys=438,expires=0\n\n[3149] 29 Jan 17:25:33 # --- CLIENT LIST OUTPUT\n[3149] 29 Jan 17:25:33 # addr=127.0.0.1:37539 fd=6 idle=349310 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=slowlog\naddr=127.0.0.1:32846 fd=10 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=exists\naddr=127.0.0.1:34065 fd=11 idle=26 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=exec\naddr=127.0.0.1:34066 fd=12 idle=37759 flags=N db=1 sub=1 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=subscribe\naddr=127.0.0.1:40813 fd=5 idle=183759 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=lrem\naddr=127.0.0.1:36696 fd=8 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=sismember\naddr=127.0.0.1:36734 fd=15 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=hget\naddr=127.0.0.1:39132 fd=13 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=get\naddr=127.0.0.1:46486 fd=14 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=hget\naddr=127.0.0.1:33530 fd=7 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=rpush\naddr=127.0.0.1:41346 fd=16 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=7 oll=0 events=rw cmd=hget\naddr=127.0.0.1:54446 fd=9 idle=0 flags=N db=1 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=rpush\n\n[3149] 29 Jan 17:25:33 # === REDIS BUG REPORT END. Make sure to include from START to END. ===\n\nSegmentation fault\n[30611] 29 Jan 17:26:03 * DB saved on disk\n```\n"
    },
    {
      "id": 3717354,
      "user": "antirez",
      "created_at": "2012-01-30T10:27:03Z",
      "body": "Hello jeznet, your bug is completely unrelated, but looks like a real bug involving the handling of SLOWLOG. I'm investigating, and I'm opening a new issue with your original message. Thanks, Salvatore.\n"
    },
    {
      "id": 3717427,
      "user": "antirez",
      "created_at": "2012-01-30T10:32:00Z",
      "body": "@jeznet Issue added, https://github.com/antirez/redis/issues/322\n\nPlease if you can participate to this issue as it is likely that I'll need some help to track it. Thanks.\n"
    },
    {
      "id": 3717646,
      "user": "szymon-jez",
      "created_at": "2012-01-30T10:50:09Z",
      "body": "@antirez OK, I will.\n"
    },
    {
      "id": 3846949,
      "user": "antirez",
      "created_at": "2012-02-07T12:15:44Z",
      "body": "@d1april Hello, I guess there are no longer problems after the HW fix? If so I would close the issue. Thanks!\n"
    },
    {
      "id": 3876280,
      "user": "dhcode",
      "created_at": "2012-02-08T21:14:16Z",
      "body": "There are no further problems anymore after the RAM of the server has been replaced.\n"
    },
    {
      "id": 3876301,
      "user": "antirez",
      "created_at": "2012-02-08T21:15:16Z",
      "body": "@d1april Awesome! Closing, thank you.\n"
    }
  ]
}