{
  "issue_number": 1525.0,
  "title": "EVAL replicated + conditionals about key existence = replication bug.",
  "body": "Lua scripts may contain conditionals in order to run or not commands depending on the existence or not of keys. For example let's examine the following Lua script:\n\n```\nif redis.call(\"exists\",KEYS[1]) == 1\nthen\n    redis.call(\"incr\",\"mycounter\")\nend\n\nif redis.call(\"exists\",KEYS[1]) == 1\nthen\n    return redis.call(\"incr\",\"mycounter\")\nend\n```\n\nThe script executes two times the same _if key exists then increment counter_ logic. However the two executions will work differently in the master and the slaves.\n\nIn the master the first time the key may still exist, while the second time the key may no longer exist. This will result in the key incremented just one time. However as a side effect the master will generate a synthetic `DEL` command in the replication channel in order to force the slaves to expire the key (given that key expiration is master-driven).\n\nWhen the same script will run in the slave, the key will no longer be there, so the script will not increment the key.\n\nI reproduced the bug using the above Lua script and the following bash script:\n\n``` #!/bin/bash\nwhile [ 1 ]\ndo\n    redis-cli set x foo px 100 > /dev/null\n    sleep 0.092\n    redis-cli --eval /tmp/myscript.lua x > /dev/null\n    sleep 0.1\n    redis-cli get mycounter\n    redis-cli -p 6380 get mycounter\ndone\n```\n\nAfter a few iterations the two counters will desynchronized.\n## Proposed fix\n\nMy guess is that the best way to fix this issue is:\n- Don't expire keys when the client performing the lookup is flagged as being a Lua script.\n- However before the script execution, run the expireIfNeeded() function against all the elements in the KEYS[] array (that is, the keys passed to the script).\n\nNote that the second step is not required to guarantee consistency, but is required to guarantee a behavior that makes sense, that is, to expire keys ASAP when possible as the rest of the Redis semantics does.\n\nAn alternative way to address the problem is to replicate raw commands as proposed multiple times. Let's say that I don't believe this alone is sufficient to bias me towards this extreme solution (extreme as it will make Lua scripting bound to the replication link bandwidth), but it is true that this new bug adds some value to this alternative replication model for scripts.\n",
  "state": "closed",
  "created_at": "2014-01-25T15:02:59Z",
  "updated_at": "2017-07-15T13:04:10Z",
  "closed_at": "2017-07-15T13:04:10Z",
  "labels": [
    "critical bug"
  ],
  "comments_data": [
    {
      "id": 33290953,
      "user": "badboy",
      "created_at": "2014-01-25T15:11:24Z",
      "body": "If your first solution will be used, please make sure this is properly documented. Right now most users come and ask whether KEYS / ARGV seperation is neccessary in their script or not. For simple scripts right now it makes no difference but with this fix it can affect behaviour\n"
    },
    {
      "id": 33291009,
      "user": "badboy",
      "created_at": "2014-01-25T15:14:07Z",
      "body": "On second read I'm not even sure your proposed solution works for this case.\nIf I understand correctly when this script is executed on the master, the key is expired between the two if-conditions (resulting in just one `INCR` executed) whereas your proposed solution may remove the key BEFORE the script is executed (and thus `INCR` is never executed in the slave). Am I right here or did I not understand the problem in full?\n"
    },
    {
      "id": 33291068,
      "user": "antirez",
      "created_at": "2014-01-25T15:16:39Z",
      "body": "@badboy Replying to your two comments:\n\n1) Definitely... keys are expired anyway even if KEYS is never populated, and even if some key is accessed only via this broken script not populating KEYS, since there is also the background expiring. However it is better to document this behavior and in general to document that people writing scripts SHOULD advertise the keys they are going to use if they want a consistent behavior from Redis, and if they want their scripts to be portable to Redis Cluster (at least in the case a single key is used in the script).\n\n2) After the fix, the key will be expired before the script, a DEL will be synthesized in the replication channel, and later EVAL will be send to the replication channel, so the slave will see DEL + EVAL, and the key will not be there for the slave as well.\n"
    },
    {
      "id": 33291091,
      "user": "antirez",
      "created_at": "2014-01-25T15:17:16Z",
      "body": "In short with the fix, Lua scripts become atomic from the point of view of the key expire process, as keys can no longer expire in the middle, making them very similar to any other command in this regard.\n"
    },
    {
      "id": 33291134,
      "user": "badboy",
      "created_at": "2014-01-25T15:19:41Z",
      "body": "Ah, so the `expireIfNeeded` is done on the master, now I get it. That makes sense. Thanks.\n"
    },
    {
      "id": 33291302,
      "user": "antirez",
      "created_at": "2014-01-25T15:27:28Z",
      "body": "Two more things:\n- This issue also apply to AOF: reloading the AOF is not able to provide the same identical dataset if stuff expire in the middle of scripts execution.\n- After applying the following patch I verified that I can't trigger the issue again, at least in the specific example I provided above for reproduction:\n\n``` diff\ndiff --git a/src/db.c b/src/db.c\nindex b625fea..906acd4 100644\n--- a/src/db.c\n+++ b/src/db.c\n@@ -755,8 +755,13 @@ void propagateExpire(redisDb *db, robj *key) {\n }\n\n int expireIfNeeded(redisDb *db, robj *key) {\n-    long long when = getExpire(db,key);\n+    long long when;\n\n+    /* Don't expire keys during exection of Lua scripts: slaves /AOF\n+     * would not be able to replicate the script correctly otherwise. */\n+    if (server.lua_caller) return 0;\n+\n+    when = getExpire(db,key);\n     if (when < 0) return 0; /* No expire for this key */\n\n     /* Don't expire anything while loading. It will be done later. */\n```\n"
    },
    {
      "id": 315532730,
      "user": "antirez",
      "created_at": "2017-07-15T13:04:10Z",
      "body": "This should be fixed now (for a long time) but the issue remained open. Actually there is even explicit mention of the issue in the source code, but nobody closed this:\r\n\r\n```\r\n   /* If we are in the context of a Lua script, we claim that time is\r\n     * blocked to when the Lua script started. This way a key can expire\r\n     * only the first time it is accessed and not in the middle of the\r\n     * script execution, making propagation to slaves / AOF consistent.\r\n     * See issue #1525 on Github for more information. */\r\n    now = server.lua_caller ? server.lua_time_start : mstime();\r\n```"
    }
  ]
}