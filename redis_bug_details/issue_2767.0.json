{
  "issue_number": 2767.0,
  "title": "GEORADIUS returns the same key twice on Redis 3.1.999",
  "body": "# The bug\n\nA `GEORADIUS` query returns the same key twice. Since `GEORADIUS` [is defined as](http://redis.io/commands/georadius):\n\n> Return the members of a sorted set populated with geospatial information...\n\nI assume that having a duplicate in the set is an erroneous behaviour. \n# Steps to reproduce on `redis-cli`\n\n```\n127.0.0.1:6379[1]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 1\n127.0.0.1:6379[1]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 0\n127.0.0.1:6379[1]> GEORADIUS users 0 0 50000 km WITHCOORD\n1) 1) \"user_000000\"\n   2) 1) \"-47.271613776683807\"\n      2) \"-54.534504198047678\"\n2) 1) \"user_000000\"\n   2) 1) \"-47.271613776683807\"\n      2) \"-54.534504198047678\"\n```\n# Notes\n## Adding the key multiple times\n\nAdding the same key more than twice seems to add the key only twice:\n\n```\n127.0.0.1:6379[2]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 1\n127.0.0.1:6379[2]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 0\n127.0.0.1:6379[2]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 0\n127.0.0.1:6379[2]> GEOADD users -47.271613776683807 -54.534504198047678 user_000000\n(integer) 0\n127.0.0.1:6379[2]> GEORADIUS users 0 0 50000 km WITHCOORD\n1) 1) \"user_000000\"\n   2) 1) \"-47.271613776683807\"\n      2) \"-54.534504198047678\"\n2) 1) \"user_000000\"\n   2) 1) \"-47.271613776683807\"\n      2) \"-54.534504198047678\"\n```\n## Other coordinates\n\nThe bug was not reproduced with other coordinates, e.g.:\n\n```\n127.0.0.1:6379[2]> GEOADD users 10 10 'x'\n(integer) 1\n127.0.0.1:6379[2]> GEORADIUS users 10 10 500 km WITHCOORD\n1) 1) \"x\"\n   2) 1) \"10.000002086162567\"\n      2) \"10.00000092823273\"\n127.0.0.1:6379[2]> GEOADD users 10 10 'x'\n(integer) 0\n127.0.0.1:6379[2]> GEORADIUS users 10 10 500 km WITHCOORD\n1) 1) \"x\"\n   2) 1) \"10.000002086162567\"\n      2) \"10.00000092823273\"\n```\n# INFO\n\n```\n127.0.0.1:6379[2]> INFO\n# Server\nredis_version:3.1.999\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:68c55d2281f887ef\nredis_mode:standalone\nos:Darwin 14.5.0 x86_64\narch_bits:64\nmultiplexing_api:kqueue\ngcc_version:4.2.1\nprocess_id:7170\nrun_id:cb2d63f47c4d117f062149ff8fd95eb1481a1c4f\ntcp_port:6379\nuptime_in_seconds:45789\nuptime_in_days:0\nhz:10\nlru_clock:16197820\nconfig_file:\n\n# Clients\nconnected_clients:3\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n\n# Memory\nused_memory:1044320\nused_memory_human:1019.84K\nused_memory_rss:1204224\nused_memory_rss_human:1.15M\nused_memory_peak:1112096\nused_memory_peak_human:1.06M\ntotal_system_memory:8589934592\ntotal_system_memory_human:8.00G\nused_memory_lua:45056\nused_memory_lua_human:44.00K\nmaxmemory:0\nmaxmemory_human:0B\nmaxmemory_policy:volatile-lru\nmem_fragmentation_ratio:1.15\nmem_allocator:libc\n\n# Persistence\nloading:0\nrdb_changes_since_last_save:1\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1442260998\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:0\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_last_write_status:ok\n\n# Stats\ntotal_connections_received:311\ntotal_commands_processed:681139\ninstantaneous_ops_per_sec:0\ntotal_net_input_bytes:60480261\ntotal_net_output_bytes:7757783\ninstantaneous_input_kbps:0.00\ninstantaneous_output_kbps:0.00\nrejected_connections:0\nsync_full:0\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:0\nevicted_keys:0\nkeyspace_hits:417\nkeyspace_misses:33\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:871\nmigrate_cached_sockets:0\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n# CPU\nused_cpu_sys:32.24\nused_cpu_user:16.24\nused_cpu_sys_children:0.02\nused_cpu_user_children:0.00\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\ndb0:keys=2,expires=0,avg_ttl=0\ndb1:keys=1,expires=0,avg_ttl=0\ndb2:keys=1,expires=0,avg_ttl=0\n```\n",
  "state": "closed",
  "created_at": "2015-09-14T20:12:27Z",
  "updated_at": "2015-09-14T21:11:41Z",
  "closed_at": "2015-09-14T21:11:33Z",
  "labels": [
    "critical bug",
    "geo"
  ],
  "comments_data": [
    {
      "id": 140198892,
      "user": "antirez",
      "created_at": "2015-09-14T20:37:26Z",
      "body": "Thanks for reporting, actually you can use a single `GEOADD` command and yet the item will be reported twice. It is a bug with the GEORADIUS implementation and not with the underlying sorted set data structure. I'll fix this tomorrow hopefully.\n"
    },
    {
      "id": 140201008,
      "user": "antirez",
      "created_at": "2015-09-14T20:47:08Z",
      "body": "In this specific case the problem is due to the fact that the neighbors squares calculated for north_west and south_west are the same, due probably to the huge radius used. It's a corner case which should be pretty easy to fix AFAIK.\n"
    },
    {
      "id": 140207141,
      "user": "antirez",
      "created_at": "2015-09-14T21:11:41Z",
      "body": "Fixed, thanks for reporting.\n"
    }
  ]
}