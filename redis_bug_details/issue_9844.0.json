{
  "issue_number": 9844.0,
  "title": "[CRASH] Running the test with SANITIZER will fail every time, and success without SANITIZER.",
  "body": "I donâ€™t know if anyone else has encountered this problem(unstable  branch): running the test with SANITIZER will fail every time, and success without the SANITIZER.\r\n\r\n**Crash report**\r\n\r\nPaste the complete crash log between the quotes below. Please include a few lines from the log preceding the crash report to provide some context.\r\n\r\n```\r\n[ok]: Slave is able to evict keys created in writable slaves\r\n[exception]: Executing test client: I/O error reading reply.\r\nI/O error reading reply\r\n    while executing\r\n\"[srv $level \"client\"] {*}$args\"\r\n    (procedure \"r\" line 7)\r\n    invoked from within\r\n\"r xrevrange mystream + -\"\r\n    invoked from within\r\n\"expr {[r xrange mystream - +] == [lreverse [r xrevrange mystream + -]]}\"\r\n    (\"uplevel\" body line 1)\r\n    invoked from within\r\n\"uplevel 1 [list expr $condition]\"\r\n    (procedure \"assert\" line 2)\r\n    invoked from within\r\n\"assert {[r xrange mystream - +] == [lreverse [r xrevrange mystream + -]]}\"\r\n    (\"uplevel\" body line 2)\r\n    invoked from within\r\n\"uplevel 1 $code\"\r\n    (procedure \"test\" line 48)\r\n    invoked from within\r\n\"test {XREVRANGE returns the reverse of XRANGE} {\r\n        assert {[r xrange mystream - +] == [lreverse [r xrevrange mystream + -]]}\r\n    }\"\r\n    (\"uplevel\" body line 186)\r\n    invoked from within\r\n\"uplevel 1 $code \"\r\n    (procedure \"start_server\" line 3)\r\n    invoked from within\r\n\"start_server {\r\n    tags {\"stream\"}\r\n} {\r\n    test {XADD can add entries into a stream that XRANGE can fetch} {\r\n        r XADD mystream * item 1 value a\r\n...\"\r\n    (file \"tests/unit/type/stream.tcl\" line 52)\r\n    invoked from within\r\n\"source $path\"\r\n    (procedure \"execute_test_file\" line 4)\r\n    invoked from within\r\n\"execute_test_file $data\"\r\n    (procedure \"test_client_main\" line 10)\r\n    invoked from within\r\n\"test_client_main $::test_server_port \"\r\nKilling still running Redis server 43805\r\nKilling still running Redis server 43823\r\nKilling still running Redis server 43828\r\nKilling still running Redis server 44074\r\nKilling still running Redis server 44198\r\nKilling still running Redis server 44367\r\nKilling still running Redis server 44447\r\nKilling still running Redis server 44869\r\nKilling still running Redis server 44882\r\nKilling still running Redis server 45027\r\nKilling still running Redis server 45040\r\nKilling still running Redis server 45434\r\nKilling still running Redis server 45480\r\nKilling still running Redis server 45485\r\nKilling still running Redis server 45527\r\nKilling still running Redis server 45533\r\nKilling still running Redis server 45589\r\nKilling still running Redis server 45668\r\nKilling still running Redis server 45714\r\nKilling still running Redis server 45842\r\nKilling still running Redis server 45942\r\nKilling still running Redis server 45994\r\nKilling still running Redis server 46036\r\nKilling still running Redis server 46460\r\nKilling still running Redis server 46485\r\nKilling still running Redis server 46519\r\nI/O error reading reply\r\n    while executing\r\n\"{*}$r type $k\"\r\n    (procedure \"findKeyWithType\" line 7)\r\n    invoked from within\r\n\"findKeyWithType {*}$r zset\"\r\n    (\"uplevel\" body line 2)\r\n    invoked from within\r\n\"uplevel 1 [lindex $args $path]\"\r\n    (procedure \"randpath\" line 3)\r\n    invoked from within\r\n\"randpath {{*}$r zadd $k $d $v}  {{*}$r zrem $k $v}  {\r\n                            set otherzset [findKeyWithType {*}$r zset]\r\n                         ...\"\r\n    (procedure \"createComplexDataset\" line 74)\r\n    invoked from within\r\n\"createComplexDataset $r $ops\"\r\n    (procedure \"bg_complex_data\" line 5)\r\n    invoked from within\r\n\"bg_complex_data [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3] [lindex $argv 4]\"\r\n    (file \"tests/helpers/bg_complex_data.tcl\" line 13)\r\nI/O error reading reply\r\n    while executing\r\n\"{*}$r del $k\"\r\n    (\"uplevel\" body line 2)\r\n    invoked from within\r\n\"uplevel 1 [lindex $args $path]\"\r\n    (procedure \"randpath\" line 3)\r\n    invoked from within\r\n\"randpath {\r\n                {*}$r set $k $v\r\n            } {\r\n                {*}$r lpush $k $v\r\n            } {\r\n                {*}$r sadd $k $v\r\n        ...\"\r\n    (procedure \"createComplexDataset\" line 36)\r\n    invoked from within\r\n\"createComplexDataset $r $ops\"\r\n    (procedure \"bg_complex_data\" line 5)\r\n    invoked from within\r\n\"bg_complex_data [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3] [lindex $argv 4]\"\r\n    (file \"tests/helpers/bg_complex_data.tcl\" line 13)\r\nI/O error reading reply\r\n    while executing\r\n\"{*}$r type $k\"\r\n    (procedure \"findKeyWithType\" line 7)\r\n    invoked from within\r\n\"findKeyWithType {*}$r zset\"\r\n    (\"uplevel\" body line 2)\r\n    invoked from within\r\n\"uplevel 1 [lindex $args $path]\"\r\n    (procedure \"randpath\" line 3)\r\n    invoked from within\r\n\"randpath {{*}$r zadd $k $d $v}  {{*}$r zrem $k $v}  {\r\n                            set otherzset [findKeyWithType {*}$r zset]\r\n                         ...\"\r\n    (procedure \"createComplexDataset\" line 74)\r\n    invoked from within\r\n\"createComplexDataset $r $ops\"\r\n    (procedure \"bg_complex_data\" line 5)\r\n    invoked from within\r\n\"bg_complex_data [lindex $argv 0] [lindex $argv 1] [lindex $argv 2] [lindex $argv 3] [lindex $argv 4]\"\r\n    (file \"tests/helpers/bg_complex_data.tcl\" line 13)\r\nKilling still running Redis server 46530\r\n```\r\n\r\n**Additional information**\r\n\r\n1. OS distribution and version: \r\n   Linux 5.4.0-90-generic Ubuntu SMP Fri Oct 15 20:00:55 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n2. gcc version   \r\ngcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)\r\n\r\n3. Steps to reproduce (if any)    \r\nmake SANITIZER=address -j\r\n./runtest --verbose --tags -slow --dump-logs\r\n",
  "state": "closed",
  "created_at": "2021-11-24T14:29:00Z",
  "updated_at": "2021-11-29T08:59:59Z",
  "closed_at": "2021-11-29T08:58:47Z",
  "labels": [],
  "comments_data": [
    {
      "id": 980847545,
      "user": "oranagra",
      "created_at": "2021-11-28T06:21:33Z",
      "body": "it doesn't reproduce for me (any issue with `unit/type/stream`), and also not in github actions.\r\nplease make sure you have a clean build (run `make distclean` before).\r\nif you can still reproduce it, please look into it and either post more info or a PR to fix it.\r\n\r\np.s. i do however see issues with `integration/failover`:\r\n```\r\n*** [err]: failover command to specific replica works in tests/integration/failover.tcl\r\nExpected '3' to be equal to '2' (context: type eval line 38 cmd {assert_equal [expr [s -1 sync_partial_ok] - $initial_psyncs] 2} proc ::test)\r\n```\r\n and `integration/logging`:\r\n```\r\n==26745==The signal is caused by a WRITE memory access.\r\n    #0 0x5599ddfd850e in debugCommand /home/oran/work/redis/src/debug.c:493\r\n```\r\n@tezc FYI."
    },
    {
      "id": 981404085,
      "user": "tezc",
      "created_at": "2021-11-29T08:42:10Z",
      "body": "```sh\r\nozan@ozan-x1:~/Desktop/redis/src$ grep DESC /etc/lsb-release; gcc-9 --version\r\nDISTRIB_DESCRIPTION=\"Ubuntu 21.04\"\r\ngcc-9 (Ubuntu 9.3.0-23ubuntu2) 9.3.0\r\n\r\n\r\n```\r\nThis is my setup and running same command with you:  `./runtest --verbose --tags -slow --dump-logs`,  I don't see any issues. Please make sure you run `make distclean` as suggested, let us know if it helps.  \r\n"
    },
    {
      "id": 981415971,
      "user": "chenyang8094",
      "created_at": "2021-11-29T08:58:32Z",
      "body": "Yes, I did not reproduce it when I ran it just now. Then I looked at dmesg and found that there are OOM logs. It should be that other processes consumed a lot of memory during the previous run.\r\n\r\nThis is not a crash, I will close this issue, thanks for your reply."
    }
  ]
}