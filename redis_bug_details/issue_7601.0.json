{
  "issue_number": 7601.0,
  "title": "[BUG] lazyfree-lazy-server-del does not turn DELs into UNLINKs",
  "body": "**Describe the bug**\r\n\r\nWe discovered a potential bug with `lazyfree-lazy-server-del`. As far as I understand, this feature should implicitly turn `DEL` calls into `UNLINKs` -- that is to say, `dbAsyncDelete` calls.\r\n\r\nAfter enabling this feature, we still saw some very slow `DEL` calls, which promted us to investigate.\r\n\r\nLooking at the code, it appears that the setting may not actually be working as intended.\r\n\r\n`delCommand` calls into `delGenericCommand `: https://github.com/redis/redis/blob/5.0.7/src/db.c#L486-L488.\r\n\r\nAnd then `delGenericCommand` directly calls `dbSyncDelete`: https://github.com/redis/redis/blob/5.0.7/src/db.c#L473-L474.\r\n\r\nIt does not look at `server.lazyfree_lazy_server_del` in this code path, and it does not use `dbDelete` -- which _does_ consult `server.lazyfree_lazy_server_del`.\r\n\r\nA possible solution could be to do something like this:\r\n\r\n```c\r\nvoid delGenericCommand(client *c, int lazy) {\r\n    int numdel = 0, j;\r\n\r\n    if (server.lazyfree_lazy_server_del) {\r\n        lazy = 1;\r\n    }\r\n\r\n    ...\r\n```\r\n\r\nOr even just pass `server.lazyfree_lazy_server_del` as an argument from `delCommand`.\r\n\r\n**To reproduce**\r\n\r\n```\r\nconfig set lazyfree-lazy-server-del yes\r\ndel some-key\r\n```\r\n\r\nIt calls `dbSyncDelete`.\r\n\r\n**Expected behavior**\r\n\r\nIt calls `dbAsyncDelete`.\r\n\r\n**Additional information**\r\n\r\nDownstream ticket: https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/11018.\r\n\r\nIt'd be awesome if this could be backported to 5.x.",
  "state": "closed",
  "created_at": "2020-07-31T17:00:23Z",
  "updated_at": "2020-08-01T13:07:09Z",
  "closed_at": "2020-08-01T13:07:09Z",
  "labels": [],
  "comments_data": [
    {
      "id": 667520709,
      "user": "oranagra",
      "created_at": "2020-08-01T12:01:30Z",
      "body": "@igorwwwwwwwwwwwwwwwwwwww i think you're mixing lazyfree-lazy-**server**-del with lazyfree-lazy-**user**-del\r\n\r\nHere's a snippet from the documentation in [redis.conf](https://github.com/redis/redis/blob/unstable/redis.conf)\r\n```\r\n# 3) Because of a side effect of a command that stores data on a key that may\r\n#    already exist. For example the RENAME command may delete the old key\r\n#    content when it is replaced with another one. Similarly SUNIONSTORE\r\n#    or SORT with STORE option may delete existing keys. The SET command\r\n#    itself removes any old content of the specified key in order to replace\r\n#    it with the specified string.\r\nlazyfree-lazy-server-del no\r\n\r\n# It is also possible, for the case when to replace the user code DEL calls\r\n# with UNLINK calls is not easy, to modify the default behavior of the DEL\r\n# command to act exactly like UNLINK, using the following configuration\r\n# directive:\r\nlazyfree-lazy-user-del no\r\n```"
    },
    {
      "id": 667529341,
      "user": "igorwwwwwwwwwwwwwwwwwwww",
      "created_at": "2020-08-01T13:07:09Z",
      "body": "@oranagra Oh, I see. I must have misread this line from the [redis 5.x redis.conf](https://github.com/redis/redis/blob/5.0.7/redis.conf) as implying it would actually also apply to DEL calls:\r\n\r\n```\r\n# In all the above cases the default is to delete objects in a blocking way,\r\n# like if DEL was called. However you can configure each case specifically\r\n# in order to instead release memory in a non-blocking way like if UNLINK\r\n# was called, using the following configuration directives:\r\n```\r\n\r\nAnd looks like `lazyfree-lazy-user-del` was introduced in 6.0 (https://github.com/redis/redis/pull/6243), and the behaviour clarified.\r\n\r\nThanks, this explains it. In this case we will instead opt for explicit `UNLINK` calls for now, until we are ready to upgrade to redis 6.\r\n\r\nClosing. :) "
    }
  ]
}