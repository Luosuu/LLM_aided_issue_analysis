{
  "issue_number": 9903.0,
  "title": "[BUG] sanitizer address test failed in logging.tcl",
  "body": "**Describe the bug**\r\nSpecify the sanitizer compilation option as address, failed to specify when testing logging.tcl\r\n**To reproduce**\r\n1. make SANITIZER=address\r\n2. ./runtest --single  integration/logging\r\n3. The output is as follows\r\n```\r\n./runtest --single  integration/logging\r\nCleanup: may take some time... OK\r\nStarting test server at port 21079\r\n[ready]: 49264\r\nTesting integration/logging\r\n[ready]: 49265\r\n[ready]: 49266\r\n[ready]: 49267\r\n[ready]: 49268\r\n[ready]: 49269\r\n[ready]: 49270\r\n[ready]: 49271\r\n[ready]: 49273\r\n[ready]: 49272\r\n[ready]: 49275\r\n[ready]: 49276\r\n[ready]: 49274\r\n[ready]: 49277\r\n[ready]: 49278\r\n[ready]: 49279\r\n[ok]: Server is able to generate a stack trace on selected systems\r\n[ok]: Crash report generated on SIGABRT\r\n[err]: Sanitizer error: =================================================================\r\n==49320==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000794004 at pc 0x7f170605a50e bp 0x7fffb6334240 sp 0x7fffb63339f0\r\nREAD of size 122880 at 0x000000794004 thread T0\r\n    #0 0x7f170605a50d  (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\n    #1 0x5891bb in memtest_preserving_test /home/work/github/redis/src/memtest.c:317\r\n    #2 0x545301 in memtest_test_linux_anonymous_maps /home/work/github/redis/src/debug.c:1798\r\n    #3 0x545522 in doFastMemoryTest /home/work/github/redis/src/debug.c:1839\r\n    #4 0x54c27f in sigsegvHandler /home/work/github/redis/src/debug.c:1936\r\n    #5 0x7f1705ef2f9f  (/opt/compiler/gcc-8.2/lib/libpthread.so.0+0x10f9f)\r\n    #6 0x7f1705e28932 in __GI_epoll_wait (/opt/compiler/gcc-8.2/lib/libc.so.6+0xeb932)\r\n    #7 0x43f48c in aeApiPoll /home/work/github/redis/src/ae_epoll.c:113\r\n    #8 0x43f48c in aeProcessEvents /home/work/github/redis/src/ae.c:396\r\n    #9 0x44016c in aeMain /home/work/github/redis/src/ae.c:488\r\n    #10 0x433a86 in main /home/work/github/redis/src/server.c:8094\r\n    #11 0x7f1705d5eb8d in __libc_start_main /home/liruihao/mygcc82/glibc-2.21/csu/libc-start.c:289\r\n    #12 0x434d68 in _start (/home/work/github/redis/src/redis-server+0x434d68)\r\n\r\n0x000000794004 is located 60 bytes to the left of global variable 'newline_sent' defined in 'replication.c:1617:19' (0x794040) of size 8\r\n0x000000794004 is located 0 bytes to the right of global variable 'usemark' defined in 'replication.c:1753:16' (0x794000) of size 4\r\nSUMMARY: AddressSanitizer: global-buffer-overflow (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\nShadow bytes around the buggy address:\r\n  0x0000800ea7b0: 00 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7c0: 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0000800ea7d0: 00 00 00 00 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7e0: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea7f0: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9\r\n=>0x0000800ea800:[04]f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea810: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\r\n  0x0000800ea820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0000800ea830: 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9\r\n  0x0000800ea840: 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea850: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49320==ABORTING\r\n\r\n[ok]: Crash report generated on DEBUG SEGFAULT\r\n[err]: Sanitizer error: =================================================================\r\n==49373==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000794004 at pc 0x7fd9bf1b050e bp 0x7fff5971b700 sp 0x7fff5971aeb0\r\nREAD of size 122880 at 0x000000794004 thread T0\r\n    #0 0x7fd9bf1b050d  (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\n    #1 0x5891bb in memtest_preserving_test /home/work/github/redis/src/memtest.c:317\r\n    #2 0x545301 in memtest_test_linux_anonymous_maps /home/work/github/redis/src/debug.c:1798\r\n    #3 0x545522 in doFastMemoryTest /home/work/github/redis/src/debug.c:1839\r\n    #4 0x54c27f in sigsegvHandler /home/work/github/redis/src/debug.c:1936\r\n    #5 0x7fd9bf048f9f  (/opt/compiler/gcc-8.2/lib/libpthread.so.0+0x10f9f)\r\n    #6 0x54865e in debugCommand /home/work/github/redis/src/debug.c:493\r\n    #7 0x452206 in call /home/work/github/redis/src/server.c:4908\r\n    #8 0x455750 in processCommand /home/work/github/redis/src/server.c:5486\r\n    #9 0x49267b in processCommandAndResetClient /home/work/github/redis/src/networking.c:2147\r\n    #10 0x49a7c5 in processInputBuffer /home/work/github/redis/src/networking.c:2242\r\n    #11 0x4a1faf in readQueryFromClient /home/work/github/redis/src/networking.c:2354\r\n    #12 0x6404b6 in callHandler /home/work/github/redis/src/connhelpers.h:79\r\n    #13 0x6404b6 in connSocketEventHandler /home/work/github/redis/src/connection.c:295\r\n    #14 0x43f6eb in aeProcessEvents /home/work/github/redis/src/ae.c:428\r\n    #15 0x44016c in aeMain /home/work/github/redis/src/ae.c:488\r\n    #16 0x433a86 in main /home/work/github/redis/src/server.c:8094\r\n    #17 0x7fd9beeb4b8d in __libc_start_main /home/liruihao/mygcc82/glibc-2.21/csu/libc-start.c:289\r\n    #18 0x434d68 in _start (/home/work/github/redis/src/redis-server+0x434d68)\r\n\r\n0x000000794004 is located 60 bytes to the left of global variable 'newline_sent' defined in 'replication.c:1617:19' (0x794040) of size 8\r\n0x000000794004 is located 0 bytes to the right of global variable 'usemark' defined in 'replication.c:1753:16' (0x794000) of size 4\r\nSUMMARY: AddressSanitizer: global-buffer-overflow (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\nShadow bytes around the buggy address:\r\n  0x0000800ea7b0: 00 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7c0: 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0000800ea7d0: 00 00 00 00 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7e0: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea7f0: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9\r\n=>0x0000800ea800:[04]f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea810: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\r\n  0x0000800ea820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0000800ea830: 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9\r\n  0x0000800ea840: 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea850: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49373==ABORTING\r\n\r\n[1/1 done]: integration/logging (1 seconds)\r\n\r\n                   The End\r\n\r\nExecution time of different units:\r\n  1 seconds - integration/logging\r\n\r\n!!! WARNING The following tests failed:\r\n\r\n*** [err]: Sanitizer error: =================================================================\r\n==49320==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000794004 at pc 0x7f170605a50e bp 0x7fffb6334240 sp 0x7fffb63339f0\r\nREAD of size 122880 at 0x000000794004 thread T0\r\n    #0 0x7f170605a50d  (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\n    #1 0x5891bb in memtest_preserving_test /home/work/github/redis/src/memtest.c:317\r\n    #2 0x545301 in memtest_test_linux_anonymous_maps /home/work/github/redis/src/debug.c:1798\r\n    #3 0x545522 in doFastMemoryTest /home/work/github/redis/src/debug.c:1839\r\n    #4 0x54c27f in sigsegvHandler /home/work/github/redis/src/debug.c:1936\r\n    #5 0x7f1705ef2f9f  (/opt/compiler/gcc-8.2/lib/libpthread.so.0+0x10f9f)\r\n    #6 0x7f1705e28932 in __GI_epoll_wait (/opt/compiler/gcc-8.2/lib/libc.so.6+0xeb932)\r\n    #7 0x43f48c in aeApiPoll /home/work/github/redis/src/ae_epoll.c:113\r\n    #8 0x43f48c in aeProcessEvents /home/work/github/redis/src/ae.c:396\r\n    #9 0x44016c in aeMain /home/work/github/redis/src/ae.c:488\r\n    #10 0x433a86 in main /home/work/github/redis/src/server.c:8094\r\n    #11 0x7f1705d5eb8d in __libc_start_main /home/liruihao/mygcc82/glibc-2.21/csu/libc-start.c:289\r\n    #12 0x434d68 in _start (/home/work/github/redis/src/redis-server+0x434d68)\r\n\r\n0x000000794004 is located 60 bytes to the left of global variable 'newline_sent' defined in 'replication.c:1617:19' (0x794040) of size 8\r\n0x000000794004 is located 0 bytes to the right of global variable 'usemark' defined in 'replication.c:1753:16' (0x794000) of size 4\r\nSUMMARY: AddressSanitizer: global-buffer-overflow (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\nShadow bytes around the buggy address:\r\n  0x0000800ea7b0: 00 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7c0: 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0000800ea7d0: 00 00 00 00 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7e0: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea7f0: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9\r\n=>0x0000800ea800:[04]f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea810: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\r\n  0x0000800ea820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0000800ea830: 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9\r\n  0x0000800ea840: 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea850: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49320==ABORTING\r\n\r\n*** [err]: Sanitizer error: =================================================================\r\n==49373==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000794004 at pc 0x7fd9bf1b050e bp 0x7fff5971b700 sp 0x7fff5971aeb0\r\nREAD of size 122880 at 0x000000794004 thread T0\r\n    #0 0x7fd9bf1b050d  (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\n    #1 0x5891bb in memtest_preserving_test /home/work/github/redis/src/memtest.c:317\r\n    #2 0x545301 in memtest_test_linux_anonymous_maps /home/work/github/redis/src/debug.c:1798\r\n    #3 0x545522 in doFastMemoryTest /home/work/github/redis/src/debug.c:1839\r\n    #4 0x54c27f in sigsegvHandler /home/work/github/redis/src/debug.c:1936\r\n    #5 0x7fd9bf048f9f  (/opt/compiler/gcc-8.2/lib/libpthread.so.0+0x10f9f)\r\n    #6 0x54865e in debugCommand /home/work/github/redis/src/debug.c:493\r\n    #7 0x452206 in call /home/work/github/redis/src/server.c:4908\r\n    #8 0x455750 in processCommand /home/work/github/redis/src/server.c:5486\r\n    #9 0x49267b in processCommandAndResetClient /home/work/github/redis/src/networking.c:2147\r\n    #10 0x49a7c5 in processInputBuffer /home/work/github/redis/src/networking.c:2242\r\n    #11 0x4a1faf in readQueryFromClient /home/work/github/redis/src/networking.c:2354\r\n    #12 0x6404b6 in callHandler /home/work/github/redis/src/connhelpers.h:79\r\n    #13 0x6404b6 in connSocketEventHandler /home/work/github/redis/src/connection.c:295\r\n    #14 0x43f6eb in aeProcessEvents /home/work/github/redis/src/ae.c:428\r\n    #15 0x44016c in aeMain /home/work/github/redis/src/ae.c:488\r\n    #16 0x433a86 in main /home/work/github/redis/src/server.c:8094\r\n    #17 0x7fd9beeb4b8d in __libc_start_main /home/liruihao/mygcc82/glibc-2.21/csu/libc-start.c:289\r\n    #18 0x434d68 in _start (/home/work/github/redis/src/redis-server+0x434d68)\r\n\r\n0x000000794004 is located 60 bytes to the left of global variable 'newline_sent' defined in 'replication.c:1617:19' (0x794040) of size 8\r\n0x000000794004 is located 0 bytes to the right of global variable 'usemark' defined in 'replication.c:1753:16' (0x794000) of size 4\r\nSUMMARY: AddressSanitizer: global-buffer-overflow (/opt/compiler/gcc-8.2/lib/libasan.so.5+0x4250d)\r\nShadow bytes around the buggy address:\r\n  0x0000800ea7b0: 00 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7c0: 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00\r\n  0x0000800ea7d0: 00 00 00 00 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea7e0: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea7f0: f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9\r\n=>0x0000800ea800:[04]f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9\r\n  0x0000800ea810: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00\r\n  0x0000800ea820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0000800ea830: 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9\r\n  0x0000800ea840: 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 f9 f9 f9\r\n  0x0000800ea850: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49373==ABORTING\r\n\r\nCleanup: may take some time... OK\r\n```\r\n\r\n**Additional information**\r\nredis branch: unstable\r\ngcc version: 8.2.0 (GCC)\r\nOS: CentOS release 6.10 (Final)\r\nlinux kernel: Linux 2.6.32_1-18-0-0",
  "state": "open",
  "created_at": "2021-12-06T13:12:00Z",
  "updated_at": "2022-08-22T00:08:01Z",
  "closed_at": null,
  "labels": [],
  "comments_data": [
    {
      "id": 986809067,
      "user": "oranagra",
      "created_at": "2021-12-06T14:08:24Z",
      "body": "I'll use this opportunity to report something semi-related that i noticed and didn't have the time to look into:\r\naddress sanitizer with GCC v7.5.0 on Ubuntu 18.04\r\n\r\n./runtest --single unit/scripting\r\nproduces this:\r\n```\r\n[err]: Sanitizer error: =================================================================\r\n==1099==AddressSanitizer CHECK failed: ../../../../src/libsanitizer/asan/asan_thread.cc:318 \"((ptr[0] == kCurrentStackFrameMagic)) != (0)\" (0x0, 0x0)\r\n    #0 0x7fd3dc900bf2  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe9bf2)\r\n    #1 0x7fd3dc91f575 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x108575)\r\n    #2 0x7fd3dc905af2  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xeeaf2)\r\n    #3 0x7fd3dc844cf7  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x2dcf7)\r\n    #4 0x7fd3dc845b9d  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x2eb9d)\r\n    #5 0x7fd3dc847d7f  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x30d7f)\r\n    #6 0x7fd3dc900324  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe9324)\r\n    #7 0x7fd3dc8650cf  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x4e0cf)\r\n    #8 0x55b3776f2aca in read /usr/include/x86_64-linux-gnu/bits/unistd.h:44\r\n    #9 0x55b3776f2aca in zmalloc_get_rss /home/oran/work/redis/src/zmalloc.c:395\r\n    #10 0x55b3776d4504 in cronUpdateMemoryStats /home/oran/work/redis/src/server.c:3031\r\n    #11 0x55b3776da545 in serverCron /home/oran/work/redis/src/server.c:3132\r\n    #12 0x55b3776c567e in processTimeEvents /home/oran/work/redis/src/ae.c:319\r\n    #13 0x55b3776c567e in aeProcessEvents /home/oran/work/redis/src/ae.c:458\r\n    #14 0x55b3776c61ec in aeMain /home/oran/work/redis/src/ae.c:488\r\n    #15 0x55b3776b9a09 in main /home/oran/work/redis/src/server.c:8131\r\n    #16 0x7fd3dbc86bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)\r\n    #17 0x55b3776bad19 in _start (/home/oran/work/redis/src/redis-server+0xa2d19)\r\n```\r\n\r\n./runtest --single integration/failover\r\nproduces a hang in `failover command to specific replica works`"
    },
    {
      "id": 986859013,
      "user": "enjoy-binbin",
      "created_at": "2021-12-06T15:03:59Z",
      "body": "update (in now unstable branch, b40a9ba5fda9b28310964843831890144d8a77c2): \r\n> `gcc version 7.3.1 20180303 (Red Hat 7.3.1-5) (GCC)`\r\n\r\n./runtest --single integration/logging --dump-logs\r\n```\r\n*** [err]: Sanitizer error: =================================================================                                                                          [16/1873]\r\n==10350==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7ffe57847018 at pc 0x00000055bb2d bp 0x7ffe57846980 sp 0x7ffe57846970\r\nREAD of size 8 at 0x7ffe57847018 thread T0\r\n    #0 0x55bb2c in logStackContent /root/redis/self/redis/src/debug.c:1171\r\n    #1 0x563b6a in sigsegvHandler /root/redis/self/redis/src/debug.c:1937\r\n    #2 0x7f714d6735cf  (/lib64/libpthread.so.0+0xf5cf)\r\n    #3 0x7f714d395482 in __GI_epoll_wait (/lib64/libc.so.6+0xfe482)\r\n    #4 0x44a282 in aeApiPoll /root/redis/self/redis/src/ae_epoll.c:113\r\n    #5 0x44a282 in aeProcessEvents /root/redis/self/redis/src/ae.c:404\r\n    #6 0x44b3bc in aeMain /root/redis/self/redis/src/ae.c:496\r\n    #7 0x43eca1 in main /root/redis/self/redis/src/server.c:6789\r\n    #8 0x7f714d2b93d4 in __libc_start_main (/lib64/libc.so.6+0x223d4)\r\n    #9 0x43ff56  (/root/redis/self/redis/src/redis-server+0x43ff56)\r\n\r\nAddress 0x7ffe57847018 is located in stack of thread T0 at offset 24 in frame\r\n    #0 0x44a01f in aeProcessEvents /root/redis/self/redis/src/ae.c:358\r\n\r\n  This frame has 1 object(s):\r\n    [32, 48) 'tv' <== Memory access at offset 24 underflows this variable\r\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\r\n      (longjmp and C++ exceptions *are* supported)\r\nSUMMARY: AddressSanitizer: stack-buffer-underflow /root/redis/self/redis/src/debug.c:1171 in logStackContent\r\nShadow bytes around the buggy address:\r\n  0x10004af00db0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00dc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00de0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00df0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x10004af00e00: f1 f1 f1[f1]00 00 f2 f2 f3 f3 f3 f3 00 00 00 00\r\n  0x10004af00e10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00e20: f1 f1 f1 f1 00 00 f2 f2 f2 f2 f2 f2 00 00 f2 f2\r\n  0x10004af00e30: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10004af00e50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==10350==ABORTING\r\n```\r\n\r\n./runtest --single unit/scripting is ok\r\n\r\n./runtest --single integration/failover\r\nhang in `failover command to specific replica works`, stuck in `failover-in-progress`  for a very long times.. (the server not able to reponse the request, so each call hang)"
    },
    {
      "id": 1144539671,
      "user": "DarrenJiang13",
      "created_at": "2022-06-02T07:29:11Z",
      "body": "hi @menwenjun, I got the same problem as yours when:\r\n```\r\nmake SANITIZER=address -j\r\n./runtest --single integration/logging\r\n```\r\nI tried to add ignore option but still got failed\r\n```\r\nNO_SANITIZE(\"address\")\r\nint memtest_preserving_test(unsigned long *m, size_t bytes, int passes) {\r\n     ...\r\n}\r\n```\r\nmy OS system is like:\r\n```\r\nredis branch: unstable\r\ngcc version: 9.2.1 (GCC)\r\nOS: CentOS  7\r\nlinux kernel version: 7.2\r\n```\r\n\r\nHave you found the reason ? I check the sanitizer CI and find this test actually succeed in Ubuntu System. "
    },
    {
      "id": 1221467869,
      "user": "tezc",
      "created_at": "2022-08-21T04:48:42Z",
      "body": "Sorry folks, I didn't see this issue before. \r\n\r\nThat `NO_SANITIZE()` suppression will only work with GCC 8.1+. GCC introduced `no_sanitize()` attribute in GCC 8.1. So, failures with GCC 7.x are because of this I believe. \r\n\r\n@DarrenJiang13 I agree we should add \"address\" suppression to that function but I'm surprised it still fails. Can you confirm you did `make distclean` after adding that fix? (if you remember by any chance)"
    },
    {
      "id": 1221579242,
      "user": "DarrenJiang13",
      "created_at": "2022-08-21T16:34:04Z",
      "body": "@tezc I tried again just now, when I use gcc9.2.1 on `linux 3.10` and `linux 4.19`, the test still fails with `global-buffer-overflow` error even when added \"address\" suppression.  I did `make distclean` every time.  Hard to explain that.\r\n\r\n"
    },
    {
      "id": 1221651366,
      "user": "tezc",
      "created_at": "2022-08-22T00:08:01Z",
      "body": "Thanks for confirming. I'm out of ideas. Feels like it's a bug in that GCC version. "
    }
  ]
}