{
  "issue_number": 12762.0,
  "title": "[BUG] redis did not load dump.rdb after restart - all data lost",
  "body": "Used the default configuration of using snapshotting and no AOF:\r\n```\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n```\r\nIn fact redis.conf was exactly identical to the one that comes with Redis in my version of Debian (I have verified this).\r\n\r\nI had been running redis for almost a month (last time it restarted was due to a power outage), adding and modifying keys now and then. Today I wanted to enable AOF, so I changed from `appendonly no` to `appendonly yes` i redis.conf and did a `systemctl restart redis`. After that I got curious on how the old snapshot configuration I have actually works in practice so I created a few test keys using `redis-cli` while repeatedly doing `ls -l /var/lib/redis` to see when the snapshot would be saved. As expected, as soon as I had created 10 keys and 5 minutes had passed, the size and mtime of dump.rdb changed. Then I got curious on how many keys I actually have in total so I did a `keys *`. Slightly shocked to discover that the only existing keys was the 10 test keys I had just created. Fortunately I had less than 100 keys or so and the important ones can be recreated manually.\r\n\r\nTwo things worth mentioning:\r\n\r\nWhile I did the `ls -l` thing, I noticed dump.rdb decreased in size when it was written. To me it seems like it actually had my old keys in it at first but then got overwritten as soon as the first save was done (the original size seems to be roughly consistent with how many keys I had):\r\n\r\n```\r\nroot@x:~# ls /var/lib/redis/\r\ndump.rdb\r\nroot@x:~# nano -w /etc/redis/redis.conf \r\nroot@x:~# systemctl restart redis\r\nroot@x:~# ls /var/lib/redis/\r\nappendonly.aof\tdump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 32\r\n-rw-r----- 1 redis redis     0 14 nov 10.19 appendonly.aof\r\n-rw-rw---- 1 redis redis 30513 14 nov 10.19 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 36\r\n-rw-r----- 1 redis redis    53 14 nov 10.20 appendonly.aof\r\n-rw-rw---- 1 redis redis 30513 14 nov 10.19 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 36\r\n-rw-r----- 1 redis redis    53 14 nov 10.20 appendonly.aof\r\n-rw-rw---- 1 redis redis 30513 14 nov 10.19 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 36\r\n-rw-r----- 1 redis redis   115 14 nov 10.21 appendonly.aof\r\n-rw-rw---- 1 redis redis 30513 14 nov 10.19 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 36\r\n-rw-r----- 1 redis redis   115 14 nov 10.21 appendonly.aof\r\n-rw-rw---- 1 redis redis 30513 14 nov 10.19 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 8\r\n-rw-r----- 1 redis redis 365 14 nov 10.25 appendonly.aof\r\n-rw-rw---- 1 redis redis 188 14 nov 10.25 dump.rdb\r\nroot@x:~# ls  -l /var/lib/redis/\r\ntotalt 8\r\n-rw-r----- 1 redis redis 365 14 nov 10.25 appendonly.aof\r\n-rw-rw---- 1 redis redis 188 14 nov 10.25 dump.rdb\r\n\r\n```\r\n\r\n(I restarted Redis at 10:19am so that is consistent with Redis saving dump.rdb at shutdown as expected.)\r\n\r\nThe other thing is a few hours before I restarted Redis I got a \"redis.exceptions.ResponseError: Background save already in progress\" exception in the Python application that is more or less the sole user of Redis. It originated in this code which is new:\r\n\r\n```\r\np = r.pipeline()\r\np.SREM('x:to-process', found)\r\np.SADD('x:processing', id_)\r\np.execute()\r\nr.save()\r\n```\r\n\r\nThe idea of the immediate `save` is to be sure we can detect potentially \"half processed\" items after a power loss, which is crucial for what I'm doing. Presumably the reason for the error was that the srem and sadd triggered a background save which was still running. Just thought I should mention it.\r\n\r\nredis-server.log:\r\n\r\n```\r\n835:M 07 Nov 2023 12:05:10.404 * 1 changes in 900 seconds. Saving...\r\n835:M 07 Nov 2023 12:05:10.405 * Background saving started by pid 217274\r\n217274:C 07 Nov 2023 12:05:10.458 * DB saved on disk\r\n217274:C 07 Nov 2023 12:05:10.459 * RDB: 0 MB of memory used by copy-on-write\r\n835:M 07 Nov 2023 12:05:10.505 * Background saving terminated with success\r\n835:M 07 Nov 2023 12:24:11.009 * 1 changes in 900 seconds. Saving...\r\n835:M 07 Nov 2023 12:24:11.009 * Background saving started by pid 217335\r\n217335:C 07 Nov 2023 12:24:11.058 * DB saved on disk\r\n217335:C 07 Nov 2023 12:24:11.060 * RDB: 0 MB of memory used by copy-on-write\r\n835:M 07 Nov 2023 12:24:11.110 * Background saving terminated with success\r\n835:M 14 Nov 2023 06:50:21.147 * 1 changes in 900 seconds. Saving...\r\n835:M 14 Nov 2023 06:50:21.177 * Background saving started by pid 267982\r\n267982:C 14 Nov 2023 06:50:21.304 * DB saved on disk\r\n267982:C 14 Nov 2023 06:50:21.306 * RDB: 0 MB of memory used by copy-on-write\r\n835:M 14 Nov 2023 06:50:21.377 * Background saving terminated with success\r\n835:M 14 Nov 2023 08:05:22.081 * 1 changes in 900 seconds. Saving...\r\n835:M 14 Nov 2023 08:05:22.082 * Background saving started by pid 268074\r\n268074:C 14 Nov 2023 08:05:22.131 * DB saved on disk\r\n268074:C 14 Nov 2023 08:05:22.133 * RDB: 0 MB of memory used by copy-on-write\r\n835:M 14 Nov 2023 08:05:22.182 * Background saving terminated with success\r\n835:signal-handler (1699953597) Received SIGTERM scheduling shutdown...\r\n835:M 14 Nov 2023 10:19:57.167 # User requested shutdown...\r\n835:M 14 Nov 2023 10:19:57.167 * Saving the final RDB snapshot before exiting.\r\n835:M 14 Nov 2023 10:19:57.275 * DB saved on disk\r\n835:M 14 Nov 2023 10:19:57.275 * Removing the pid file.\r\n835:M 14 Nov 2023 10:19:57.275 # Redis is now ready to exit, bye bye...\r\n268498:C 14 Nov 2023 10:19:57.691 # WARNING supervised by systemd - you MUST set appropriate values for TimeoutStartSec and TimeoutStopSec in your service unit.\r\n268498:C 14 Nov 2023 10:19:57.691 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\r\n268498:C 14 Nov 2023 10:19:57.691 # Redis version=6.0.16, bits=64, commit=00000000, modified=0, pid=268498, just started\r\n268498:C 14 Nov 2023 10:19:57.691 # Configuration loaded\r\n                _._                                                  \r\n           _.-``__ ''-._                                             \r\n      _.-``    `.  `_.  ''-._           Redis 6.0.16 (00000000/0) 64 bit\r\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \r\n (    '      ,       .-`  | `,    )     Running in standalone mode\r\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\r\n |    `-._   `._    /     _.-'    |     PID: 268498\r\n  `-._    `-._  `-./  _.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |           http://redis.io        \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |                                  \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n      `-._    `-.__.-'    _.-'                                       \r\n          `-._        _.-'                                           \r\n              `-.__.-'                                               \r\n\r\n268498:M 14 Nov 2023 10:19:57.693 # Server initialized\r\n268498:M 14 Nov 2023 10:19:57.693 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\r\n268498:M 14 Nov 2023 10:19:57.693 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never').\r\n268498:M 14 Nov 2023 10:19:57.693 * Ready to accept connections\r\n268498:M 14 Nov 2023 10:25:20.819 * 10 changes in 300 seconds. Saving...\r\n268498:M 14 Nov 2023 10:25:20.860 * Background saving started by pid 268562\r\n268562:C 14 Nov 2023 10:25:20.906 * DB saved on disk\r\n268562:C 14 Nov 2023 10:25:20.907 * RDB: 0 MB of memory used by copy-on-write\r\n268498:M 14 Nov 2023 10:25:20.960 * Background saving terminated with success\r\n268498:M 14 Nov 2023 10:40:21.036 * 1 changes in 900 seconds. Saving...\r\n268498:M 14 Nov 2023 10:40:21.036 * Background saving started by pid 268639\r\n268639:C 14 Nov 2023 10:40:21.074 * DB saved on disk\r\n268639:C 14 Nov 2023 10:40:21.075 * RDB: 0 MB of memory used by copy-on-write\r\n268498:M 14 Nov 2023 10:40:21.137 * Background saving terminated with success\r\n\r\n```\r\n\r\nredis-server.service (not modified by me):\r\n\r\n```\r\n# /lib/systemd/system/redis-server.service\r\n[Unit]\r\nDescription=Advanced key-value store\r\nAfter=network.target\r\nDocumentation=http://redis.io/documentation, man:redis-server(1)\r\n\r\n[Service]\r\nType=notify\r\nExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no\r\nPIDFile=/run/redis/redis-server.pid\r\nTimeoutStopSec=0\r\nRestart=always\r\nUser=redis\r\nGroup=redis\r\nRuntimeDirectory=redis\r\nRuntimeDirectoryMode=2755\r\n\r\nUMask=007\r\nPrivateTmp=yes\r\nLimitNOFILE=65535\r\nPrivateDevices=yes\r\nProtectHome=yes\r\nReadOnlyDirectories=/\r\nReadWritePaths=-/var/lib/redis\r\nReadWritePaths=-/var/log/redis\r\nReadWritePaths=-/var/run/redis\r\n\r\nNoNewPrivileges=true\r\nCapabilityBoundingSet=CAP_SETGID CAP_SETUID CAP_SYS_RESOURCE\r\nMemoryDenyWriteExecute=true\r\nProtectKernelModules=true\r\nProtectKernelTunables=true\r\nProtectControlGroups=true\r\nRestrictRealtime=true\r\nRestrictNamespaces=true\r\nRestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX\r\n\r\n# redis-server can write to its own config file when in cluster mode so we\r\n# permit writing there by default. If you are not using this feature, it is\r\n# recommended that you replace the following lines with \"ProtectSystem=full\".\r\nProtectSystem=true\r\nReadWriteDirectories=-/etc/redis\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nAlias=redis.service\r\n```\r\n\r\nThis is all running on a physical machine that is not publicly accessible (and the Redis port is filtered by ufw regardless).\r\n\r\nDebian GNU/Linux 11 (bullseye)\r\nLinux x 5.10.0-19-amd64 #1 SMP Debian 5.10.149-2 (2022-10-21) x86_64 GNU/Linux\r\nFilesystem where /var/lib/redis is: ext4\r\nredis-server 5:6.0.16-1+deb11u2\r\nredis-py 4.3.4\r\n\r\nI checked the system journal and didn't see anything out of the ordinary from the time the system was last booted from either the kernel or from redis-server. I also did a `find / -name '*.rdb'` and only /var/lib/redis/dump.rdb comes up.\r\n\r\n```\r\nroot@x:~# redis-cli CONFIG GET dir\r\n1) \"dir\"\r\n2) \"/var/lib/redis\"\r\nroot@x:~# redis-cli CONFIG GET dbfilename\r\n1) \"dbfilename\"\r\n2) \"dump.rdb\"\r\n```\r\n",
  "state": "open",
  "created_at": "2023-11-14T12:34:56Z",
  "updated_at": "2023-11-15T08:49:57Z",
  "closed_at": null,
  "labels": [],
  "comments_data": [
    {
      "id": 1810499179,
      "user": "oranagra",
      "created_at": "2023-11-14T15:50:38Z",
      "body": "seems like you didn't follow the right procedure for enabling AOF, see another recent discussion: #12484\r\nwe're in the process of improving the documentation, hopefully this will reduce the chance of this mistake.\r\nDocs: https://github.com/redis/redis-doc/pull/2521\r\nConfig: https://github.com/redis/redis/pull/12506"
    },
    {
      "id": 1810788093,
      "user": "zuiderkwast",
      "created_at": "2023-11-14T17:40:56Z",
      "body": "@oranagra How hard would it be to add a safe-gard for this, so when redis starts with RDB+AOF enabled and there is an rdb dump but no AOF file, it either refuses to start at all or it loads the rdb dump? Any drawback with such behaviour?\r\n\r\nJust because people do this mistake, obviously, and data loss is a sad thing."
    },
    {
      "id": 1810819746,
      "user": "oranagra",
      "created_at": "2023-11-14T17:52:11Z",
      "body": "That behavior change can also lead to undesired results in existing deployments.\nI.e. someone that creates periodic snapshots, but decided to delete the aof and restart. Or someone with an old rdb file on the disk (and `save` config disabled).\nSo either way, to make this case safer, can break another case, and we should decide which one is more important."
    },
    {
      "id": 1810873423,
      "user": "zuiderkwast",
      "created_at": "2023-11-14T18:19:39Z",
      "body": "Ok, true, whatever we do, some case is affected. But avoiding data loss is maybe more important?\r\n\r\nIf the AOF is deleted when Redis is stopped, then maybe users can live with an error like \"Possible mistake leading to data loss detected: save and aof enabled but no aof file found and a dump.rdb found. Refusing to start. If you know what you're doing, delete or rename the dump.rdb and try again.\". No?"
    },
    {
      "id": 1811699657,
      "user": "enjoy-binbin",
      "created_at": "2023-11-15T02:22:07Z",
      "body": "we used to discuss it in [[#12098](https://github.com/redis/redis/issues/12098#issuecomment-1523235699)](https://github.com/redis/redis/issues/12098#issuecomment-1523235699)"
    },
    {
      "id": 1812034597,
      "user": "jogc",
      "created_at": "2023-11-15T08:49:56Z",
      "body": "> seems like you didn't follow the right procedure for enabling AOF, see another recent discussion: #12484 we're in the process of improving the documentation, hopefully this will reduce the chance of this mistake. Docs: [redis/redis-doc#2521](https://github.com/redis/redis-doc/pull/2521) Config: #12506\r\n\r\nGot it...I missed that section in the docs"
    }
  ]
}