{
  "issue_number": 8064.0,
  "title": "[BUG] Segfault with 6.0.9 when running under XALT",
  "body": "**Describe the bug**\r\n\r\nWe're seeing a segfault in Redis 6.0.9 when running under [XALT](https://github.com/xalt/xalt). XALT is a framework, mostly used on HPC systems, to gather statistics on software usage. It is activated by using `LD_PRELOAD` of a small XALT library that saves statistics on processes being run. What happens is that `redis-server` segfaults when the `LD_PRELOAD` is active:\r\n\r\n```\r\n(gdb) bt\r\n#0  0x00002aaaab996d04 in __strchr_sse42 () from /lib64/libc.so.6\r\n#1  0x00000000004b8c28 in spt_copyenv (oldenv=0x819ca0) at setproctitle.c:115\r\n#2  0x00000000004b8fb0 in spt_init (argc=1, argv=0x7fffffff5a88) at setproctitle.c:198\r\n#3  0x0000000000443404 in main (argc=1, argv=0x7fffffff5a88) at server.c:5168\r\n```\r\n\r\nWe're pretty sure this is a bug (or dependence on undefined behaviour) in Redis. Looking at the environment related code in `setproctitle.c`, especially `spt_copyenv()`, looks fishy. The environment is cleared using `clearenv()` (through `spt_clearenv()` in this case) but a pointer to the original `environ` is saved as `oldenv`. The old entries in `oldenv` are then processed and copied to the new environment with `setenv()`. But the latter calls will update entries in `environ`. What is unclear to me is what guarantees `clearenv()` gives about the content of `environ` after it is called. It might simply set `environ` to NULL, but still use the same memory for `setenv()` calls that follow, this is not clear. As `oldenv` still points to the old `environ` content it might depend on undefined behaviour normally, but that behaviour changes when running under XALT.\r\n\r\n**To reproduce**\r\n\r\nSee https://github.com/xalt/xalt/issues/41 for more details. Unfortunately, building and configuring XALT is a bit too extensive to add here.\r\n\r\n```\r\npaulm@tcn180 17:19 ~/c$ tar xf ~/dl/redis-6.0.9.tar.gz \r\npaulm@tcn180 17:19 ~/c$ cd redis-6.0.9/\r\npaulm@tcn180 17:19 ~/c/redis-6.0.9$ make -j32 noopt\r\ncd src && make noopt\r\nmake[1]: Entering directory `/nfs/home4/paulm/c/redis-6.0.9/src'\r\n    CC Makefile.dep\r\nmake[1]: Leaving directory `/nfs/home4/paulm/c/redis-6.0.9/src'\r\n...\r\nmake[2]: Leaving directory `/nfs/home4/paulm/c/redis-6.0.9/src'\r\nmake[1]: Leaving directory `/nfs/home4/paulm/c/redis-6.0.9/src'\r\n\r\n# Not running under XALT, all OK\r\npaulm@tcn180 17:20 ~/c/redis-6.0.9$ src/redis-server\r\n29208:C 16 Nov 2020 17:20:50.532 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\r\n29208:C 16 Nov 2020 17:20:50.532 # Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=29208, just started\r\n29208:C 16 Nov 2020 17:20:50.532 # Warning: no config file specified, using the default config. In order to specify a config file use src/redis-server /path/to/redis.conf\r\n                _._                                                  \r\n           _.-``__ ''-._                                             \r\n      _.-``    `.  `_.  ''-._           Redis 6.0.9 (00000000/0) 64 bit\r\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \r\n (    '      ,       .-`  | `,    )     Running in standalone mode\r\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\r\n |    `-._   `._    /     _.-'    |     PID: 29208\r\n  `-._    `-._  `-./  _.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |           http://redis.io        \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \r\n |    `-._`-._        _.-'_.-'    |                                  \r\n  `-._    `-._`-.__.-'_.-'    _.-'                                   \r\n      `-._    `-.__.-'    _.-'                                       \r\n          `-._        _.-'                                           \r\n              `-.__.-'                                               \r\n\r\n29208:M 16 Nov 2020 17:20:50.533 # Server initialized\r\n29208:M 16 Nov 2020 17:20:50.533 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\r\n29208:M 16 Nov 2020 17:20:50.533 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never').\r\n29208:M 16 Nov 2020 17:20:50.533 * Ready to accept connections\r\n<ctrl-C>\r\n\r\n# Get around the XALT filtering active on our system\r\npaulm@tcn180 17:20 ~/c/redis-6.0.9$ cp src/redis-server R\r\n\r\n# Running under XALT\r\npaulm@tcn180 17:20 ~/c/redis-6.0.9$ gdb ./R\r\nGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-119.el7\r\nCopyright (C) 2013 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>...\r\nReading symbols from /nfs/home4/paulm/c/redis-6.0.9/R...done.\r\n(gdb) run\r\nStarting program: /nfs/home4/paulm/c/redis-6.0.9/./R \r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\r\n[Detaching after fork from child process 29174]\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00002aaaab996d04 in __strchr_sse42 () from /lib64/libc.so.6\r\nMissing separate debuginfos, use: debuginfo-install glibc-2.17-307.el7.1.x86_64\r\n(gdb) bt\r\n#0  0x00002aaaab996d04 in __strchr_sse42 () from /lib64/libc.so.6\r\n#1  0x00000000004b8c28 in spt_copyenv (oldenv=0x819ca0) at setproctitle.c:115\r\n#2  0x00000000004b8fb0 in spt_init (argc=1, argv=0x7fffffff5a88) at setproctitle.c:198\r\n#3  0x0000000000443404 in main (argc=1, argv=0x7fffffff5a88) at server.c:5168\r\n```\r\n\r\n**Additional information**\r\n\r\n#5329 is about an unexpectedly empty environment for `redis-server` as reported by `/proc/<pid>/environ`. Looking at `spt_copyenv()` the environment might be empty due to the undefined behaviour being depended on, as `setenv()` is called for each entry in `oldenv`.\r\n\r\nThe trace above is on a RHEL 7.8 system, GCC 9.3.0.",
  "state": "closed",
  "created_at": "2020-11-18T12:05:19Z",
  "updated_at": "2020-11-24T20:45:33Z",
  "closed_at": "2020-11-24T15:58:11Z",
  "labels": [],
  "comments_data": [
    {
      "id": 729642498,
      "user": "paulmelis",
      "created_at": "2020-11-18T12:20:33Z",
      "body": "Actually a simple reproduction is suggested in https://github.com/xalt/xalt/issues/41 by @rtmclay. Copying the code of `spt_clearenv()` and `spt_copyenv()` into `t.c`, calling `setenv()` as the first thing in `main()`, followed by a call to `spt_copyenv()`.\r\n\r\n```\r\n#ifndef _GNU_SOURCE\r\n#define _GNU_SOURCE\r\n#endif\r\n\r\n#include <unistd.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\t/* malloc(3) setenv(3) clearenv(3) setproctitle(3) getprogname(3) */\r\n#include <stdio.h>\t/* vsnprintf(3) snprintf(3) */\r\n#include <errno.h>\t/* errno program_invocation_name program_invocation_short_name */\r\n\r\nstatic int spt_clearenv(void) {\r\n#if __GLIBC__\r\n\tclearenv();\r\n\r\n\treturn 0;\r\n#else\r\n\textern char **environ;\r\n\tstatic char **tmp;\r\n\r\n\tif (!(tmp = malloc(sizeof *tmp)))\r\n\t\treturn errno;\r\n\r\n\ttmp[0]  = NULL;\r\n\tenviron = tmp;\r\n\r\n\treturn 0;\r\n#endif\r\n} /* spt_clearenv() */\r\n\r\nstatic int spt_copyenv(char *oldenv[]) {\r\n\textern char **environ;\r\n\tchar *eq;\r\n\tint i, error;\r\n\r\n\tif (environ != oldenv)\r\n\t\treturn 0;\r\n\r\n\tif ((error = spt_clearenv()))\r\n\t\tgoto error;\r\n\r\n\tfor (i = 0; oldenv[i]; i++) {\r\n\t\tif (!(eq = strchr(oldenv[i], '=')))\r\n\t\t\tcontinue;\r\n\r\n\t\t*eq = '\\0';\r\n\t\terror = (0 != setenv(oldenv[i], eq + 1, 1))? errno : 0;\r\n\t\t*eq = '=';\r\n\r\n\t\tif (error)\r\n\t\t\tgoto error;\r\n\t}\r\n\r\n\treturn 0;\r\nerror:\r\n\tenviron = oldenv;\r\n\r\n\treturn error;\r\n} /* spt_copyenv() */\r\n\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n  setenv(\"MY_PROG_NAME\",\"cleanEnv\",1);\r\n\r\n  printf(\"environ = %p\\n\", environ);\r\n    \r\n  if (spt_copyenv(environ))\r\n    printf(\"ERROR in spt_copyenv()\\n\");\r\n}\r\n```\r\n\r\n```\r\npaulm@cmstorm 13:14:~$ gdb ./t\r\nGNU gdb (GDB) 9.2\r\nCopyright (C) 2020 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nType \"show copying\" and \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from ./t...\r\n(gdb) run\r\nStarting program: /home/paulm/t \r\nenviron = 0x5555555592a0\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff7ef649c in __strchr_avx2 () from /usr/lib/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff7ef649c in __strchr_avx2 () from /usr/lib/libc.so.6\r\n#1  0x00005555555551fe in spt_copyenv (oldenv=0x5555555592a0) at t.c:43\r\n#2  0x00005555555552f4 in main (argc=1, argv=0x7fffffffdab8) at t.c:68\r\n```\r\n\r\nValgrind shows that the contended memory in `spt_copyenv()` is allocated by the first `setenv()` but then freed by `clearenv()`. If you leave out the `setenv()` in `main()` the segfault doesn't happen.\r\n\r\n```\r\npaulm@cmstorm 13:15:~$ valgrind ./t\r\n==319297== Memcheck, a memory error detector\r\n==319297== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==319297== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info\r\n==319297== Command: ./t\r\n==319297== \r\nenviron = 0x4a7f040\r\n==319297== Invalid read of size 8\r\n==319297==    at 0x10927C: spt_copyenv (t.c:42)\r\n==319297==    by 0x1092F3: main (t.c:68)\r\n==319297==  Address 0x4a7f040 is 0 bytes inside a block of size 640 free'd\r\n==319297==    at 0x483B9AB: free (vg_replace_malloc.c:538)\r\n==319297==    by 0x48F2C24: clearenv (in /usr/lib/libc-2.32.so)\r\n==319297==    by 0x109191: spt_clearenv (t.c:14)\r\n==319297==    by 0x1091C0: spt_copyenv (t.c:39)\r\n==319297==    by 0x1092F3: main (t.c:68)\r\n==319297==  Block was alloc'd at\r\n==319297==    at 0x483A6AF: malloc (vg_replace_malloc.c:306)\r\n==319297==    by 0x48F270B: __add_to_environ (in /usr/lib/libc-2.32.so)\r\n==319297==    by 0x4842FD9: setenv (vg_replace_strmem.c:2133)\r\n==319297==    by 0x1092C9: main (t.c:64)\r\n==319297== \r\n...\r\n```"
    },
    {
      "id": 733223738,
      "user": "rtmclay",
      "created_at": "2020-11-24T20:45:33Z",
      "body": "This code change won't fix the issue.  Please see my comments to #8088."
    }
  ]
}