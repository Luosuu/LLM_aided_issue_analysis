{
  "issue_number": 10618.0,
  "title": "[BUG] Incorrect result of hincrbyfloat",
  "body": "![image](https://user-images.githubusercontent.com/6680856/164528455-1a6a9a6e-9987-4743-95dd-be78ead3c838.png)\r\nStart value 5200\r\nHINCRBYFLOAT mykey field 10.43\r\nResult value is:\r\n5210.43000000000000016\r\n\r\nTest playground:\r\nhttps://redis.io/commands/hincrbyfloat/\r\n\r\nSection example\r\n\r\nThe same problem at Redis 6 alpine docker image. How to fix it? ",
  "state": "closed",
  "created_at": "2022-04-21T18:28:53Z",
  "updated_at": "2022-04-22T07:06:17Z",
  "closed_at": "2022-04-22T07:06:17Z",
  "labels": [],
  "comments_data": [
    {
      "id": 1105923894,
      "user": "sundb",
      "created_at": "2022-04-22T01:53:57Z",
      "body": "This is not a bug, floating precision is different on different platforms."
    },
    {
      "id": 1106033768,
      "user": "petrixs",
      "created_at": "2022-04-22T05:48:15Z",
      "body": "@sundb At the same time Redis is a product which used for solving real tasks. Could you imagine situation when this behavior is useful?"
    },
    {
      "id": 1106044764,
      "user": "sundb",
      "created_at": "2022-04-22T06:09:14Z",
      "body": "@petrixs First, this behavior is not intentional by redis.\r\nIt is determined by the platforms and FPU, and the same floating-point number may have different expressions under different platforms or CPU.\r\nThis doesn't only happen in redis, just like judging `0.1 + 0.2 == 0.3` in any language on your computer, you will find that it returns false."
    },
    {
      "id": 1106067169,
      "user": "petrixs",
      "created_at": "2022-04-22T06:45:34Z",
      "body": "@sundb Is there a way to get the expected float except using hincrby and operating with integers this way?"
    },
    {
      "id": 1106077615,
      "user": "sundb",
      "created_at": "2022-04-22T07:02:58Z",
      "body": "@petrixs Looks like it doesn't.\r\nHowever, I often encounter this kind of problem in my daily work. \r\nIn order to avoid the precision deviation between the server and the client, we will multiply the floating decimal by 10000(keep 4 fractional numbers) before communicating, the use is the same, and it will eventually divide by 10000.\r\nNot sure if any other have a better practice."
    },
    {
      "id": 1106080059,
      "user": "petrixs",
      "created_at": "2022-04-22T07:06:17Z",
      "body": "@sundb thank you"
    }
  ]
}