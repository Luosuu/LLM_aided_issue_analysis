{
  "issue_number": 8062.0,
  "title": "[CRASH] Unable to start redis-server on Apple Silicon M1 as non-root",
  "body": "**Crash report**\r\n\r\nPaste the complete crash log between the quotes below. Please include a few lines from the log preceding the crash report to provide some context.\r\n\r\n```\r\nnick@nicks-mba bin % redis-server\r\n4428:C 17 Nov 2020 21:38:11.216 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\r\n4428:C 17 Nov 2020 21:38:11.216 # Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=4428, just started\r\n4428:C 17 Nov 2020 21:38:11.216 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf\r\n4428:M 17 Nov 2020 21:38:11.218 * Increased maximum number of open files to 10032 (it was originally set to 256).\r\n\r\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\r\n4428:M 17 Nov 2020 21:38:11.221 # Redis 6.0.9 crashed by signal: 11, si_code: 2\r\n4428:M 17 Nov 2020 21:38:11.221 # Crashed running the instruction at: 0x7fff203b9430\r\n4428:M 17 Nov 2020 21:38:11.221 # Accessing address: 0x306018000\r\n4428:M 17 Nov 2020 21:38:11.221 # Killed by PID: 0, UID: 0\r\n4428:M 17 Nov 2020 21:38:11.221 # Failed assertion: <no assertion failed> (<no file>:0)\r\n\r\n------ STACK TRACE ------\r\nEIP:\r\n0   libsystem_platform.dylib            0x00007fff203b9430 _platform_memset$VARIANT$Rosetta + 108\r\n\r\nBacktrace:\r\n0   redis-server                        0x0000000100eecbb7 logStackTrace + 110\r\n1   redis-server                        0x0000000100eecfd5 sigsegvHandler + 271\r\n2   libsystem_platform.dylib            0x00007fff203b6d7d _sigtramp + 29\r\n3   libsystem_malloc.dylib              0x00007fff2019c7aa tiny_free_no_lock + 1116\r\n4   redis-server                        0x0000000100f3d0c3 luaD_call + 97\r\n5   ???                                 0x0000000032aaaba2 0x0 + 850045858\r\n\r\n------ INFO OUTPUT ------\r\n# Server\r\nredis_version:6.0.9\r\nredis_git_sha1:00000000\r\nredis_git_dirty:0\r\nredis_build_id:ec508acaad782189\r\nredis_mode:standalone\r\nos:Darwin 20.1.0 x86_64\r\narch_bits:64\r\nmultiplexing_api:kqueue\r\natomicvar_api:atomic-builtin\r\ngcc_version:4.2.1\r\nprocess_id:4428\r\nrun_id:fc5670f4b55a97402bd9c0257ddf857c0f4879c7\r\ntcp_port:6379\r\nuptime_in_seconds:0\r\nuptime_in_days:0\r\nhz:10\r\nconfigured_hz:10\r\nlru_clock:11831571\r\nexecutable:/usr/local/Cellar/redis/6.0.9/bin/redis-server\r\nconfig_file:\r\nio_threads_active:0\r\n\r\n# Clients\r\nconnected_clients:0\r\nclient_recent_max_input_buffer:0\r\nclient_recent_max_output_buffer:0\r\nblocked_clients:0\r\ntracking_clients:0\r\nclients_in_timeout_table:0\r\n\r\n# Memory\r\nused_memory:1018304\r\nused_memory_human:994.44K\r\nused_memory_rss:0\r\nused_memory_rss_human:0B\r\nused_memory_peak:1018304\r\nused_memory_peak_human:994.44K\r\nused_memory_peak_perc:inf%\r\nused_memory_overhead:0\r\nused_memory_startup:0\r\nused_memory_dataset:1018304\r\nused_memory_dataset_perc:100.00%\r\nallocator_allocated:0\r\nallocator_active:0\r\nallocator_resident:0\r\ntotal_system_memory:17179869184\r\ntotal_system_memory_human:16.00G\r\nused_memory_lua:37888\r\nused_memory_lua_human:37.00K\r\nused_memory_scripts:0\r\nused_memory_scripts_human:0B\r\nnumber_of_cached_scripts:0\r\nmaxmemory:0\r\nmaxmemory_human:0B\r\nmaxmemory_policy:noeviction\r\nallocator_frag_ratio:nan\r\nallocator_frag_bytes:0\r\nallocator_rss_ratio:nan\r\nallocator_rss_bytes:0\r\nrss_overhead_ratio:nan\r\nrss_overhead_bytes:0\r\nmem_fragmentation_ratio:nan\r\nmem_fragmentation_bytes:0\r\nmem_not_counted_for_evict:0\r\nmem_replication_backlog:0\r\nmem_clients_slaves:0\r\nmem_clients_normal:0\r\nmem_aof_buffer:0\r\nmem_allocator:libc\r\nactive_defrag_running:0\r\nlazyfree_pending_objects:0\r\n\r\n# Persistence\r\nloading:0\r\nrdb_changes_since_last_save:0\r\nrdb_bgsave_in_progress:0\r\nrdb_last_save_time:1605667091\r\nrdb_last_bgsave_status:ok\r\nrdb_last_bgsave_time_sec:-1\r\nrdb_current_bgsave_time_sec:-1\r\nrdb_last_cow_size:0\r\naof_enabled:0\r\naof_rewrite_in_progress:0\r\naof_rewrite_scheduled:0\r\naof_last_rewrite_time_sec:-1\r\naof_current_rewrite_time_sec:-1\r\naof_last_bgrewrite_status:ok\r\naof_last_write_status:ok\r\naof_last_cow_size:0\r\nmodule_fork_in_progress:0\r\nmodule_fork_last_cow_size:0\r\n\r\n# Stats\r\ntotal_connections_received:0\r\ntotal_commands_processed:0\r\ninstantaneous_ops_per_sec:0\r\ntotal_net_input_bytes:0\r\ntotal_net_output_bytes:0\r\ninstantaneous_input_kbps:0.00\r\ninstantaneous_output_kbps:0.00\r\nrejected_connections:0\r\nsync_full:0\r\nsync_partial_ok:0\r\nsync_partial_err:0\r\nexpired_keys:0\r\nexpired_stale_perc:0.00\r\nexpired_time_cap_reached_count:0\r\nexpire_cycle_cpu_milliseconds:0\r\nevicted_keys:0\r\nkeyspace_hits:0\r\nkeyspace_misses:0\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\nmigrate_cached_sockets:0\r\nslave_expires_tracked_keys:0\r\nactive_defrag_hits:0\r\nactive_defrag_misses:0\r\nactive_defrag_key_hits:0\r\nactive_defrag_key_misses:0\r\ntracking_total_keys:0\r\ntracking_total_items:0\r\ntracking_total_prefixes:0\r\nunexpected_error_replies:0\r\ntotal_reads_processed:0\r\ntotal_writes_processed:0\r\nio_threaded_reads_processed:0\r\nio_threaded_writes_processed:0\r\n\r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\nmaster_replid:46fd7b1f73d20d31809d463ca9fa6e83dd8544ff\r\nmaster_replid2:0000000000000000000000000000000000000000\r\nmaster_repl_offset:0\r\nsecond_repl_offset:-1\r\nrepl_backlog_active:0\r\nrepl_backlog_size:1048576\r\nrepl_backlog_first_byte_offset:0\r\nrepl_backlog_histlen:0\r\n\r\n# CPU\r\nused_cpu_sys:0.007195\r\nused_cpu_user:0.014509\r\nused_cpu_sys_children:0.000000\r\nused_cpu_user_children:0.000000\r\n\r\n# Modules\r\n\r\n# Commandstats\r\n\r\n# Cluster\r\ncluster_enabled:0\r\n\r\n# Keyspace\r\n\r\n------ CLIENT LIST OUTPUT ------\r\n\r\n------ REGISTERS ------\r\n4428:M 17 Nov 2020 21:38:11.222 #\r\nRAX:0000000306017b80 RBX:0000000000000013\r\nRCX:0000000306018000 RDX:00007fd6be3ed8ce\r\nRDI:0000000306017b38 RSI:0000000000000000\r\nRBP:0000000306017910 RSP:0000000306017728\r\nR8 :0000000000000000 R9 :00000003060177e0\r\nR10:0000000100f587b3 R11:ffffffffffffffff\r\nR12:00000003060179b8 R13:00000000000000ff\r\nR14:0000000100f59127 R15:0000000100f89740\r\nRIP:00007fff203b9430 EFL:0000000000000202\r\nCS :000000000000002b FS:0000000000000000  GS:0000000000000000\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017737) -> 0000000109a3ea00\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017736) -> 0000000000000006\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017735) -> 0000000000000000\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017734) -> 0000000000002800\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017733) -> 0000000000000000\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017732) -> 00007fff2019a020\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017731) -> 0000000100f67bca\r\n4428:M 17 Nov 2020 21:38:11.222 # (0000000306017730) -> 0000000100efb4d6\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772f) -> 00000003060178a0\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772e) -> 00007fd9c4400000\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772d) -> 0000000100f5ad38\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772c) -> 00000000000018eb\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772b) -> 0000000100f55bcd\r\n4428:M 17 Nov 2020 21:38:11.222 # (000000030601772a) -> 0000000306017b38\r\n4428:M 17 Nov 2020 21:38:11.223 # (0000000306017729) -> 00007fd9c445a3b0\r\n4428:M 17 Nov 2020 21:38:11.223 # (0000000306017728) -> 0000000100f0bebb\r\n\r\n------ MODULES INFO OUTPUT ------\r\n\r\n------ DUMPING CODE AROUND EIP ------\r\nSymbol: _platform_memset$VARIANT$Rosetta (base: 0x7fff203b93c4)\r\nModule: /usr/lib/system/libsystem_platform.dylib (base 0x7fff203b3000)\r\n$ xxd -r -p /tmp/dump.hex /tmp/dump.bin\r\n$ objdump --adjust-vma=0x7fff203b93c4 -D -b binary -m i386:x86-64 /tmp/dump.bin\r\n------\r\n4428:M 17 Nov 2020 21:38:11.223 # dump of function (hexdump of 236 bytes):\r\n81e6ff00000048b90101010101010101480faff14889f94883fa400f82360100004881fa008000000f82a00000000faef0480fc337480fc37708480fc37710480fc37718480fc37720480fc37728480fc37730480fc37738488d4f404883e1c04801fa488d41404829c27631480fc331480fc37108480fc37110480fc37118480fc37120480fc37128480fc37130480fc371384883c1404883ea4077cf4801d1480fc331480fc37108480fc37110480fc37118480fc37120480fc37128480fc37130480fc371380faef84889f8c3488937488977084889771048897718488977204889772848897730488977\r\n\r\n=== REDIS BUG REPORT END. Make sure to include from START to END. ===\r\n```\r\n\r\n**Aditional information**\r\n\r\n*OS distribution and version:* macOS Big Sur 11.0.1, MacBook Air M1 (8-core, 7-core GPU)\r\n*Steps to reproduce (if any)*\r\n1. Installed via Rosetta-run Homebrew `arch -x86_64 brew install redis`.\r\n2. Run `redis-server` or `arch -x86_64 redis-server` as a normal user.\r\n3. Crash. \r\n\r\nRuns without issue with `sudo`.",
  "state": "closed",
  "created_at": "2020-11-18T02:46:04Z",
  "updated_at": "2023-09-13T06:57:19Z",
  "closed_at": "2020-12-08T09:27:31Z",
  "labels": [],
  "comments_data": [
    {
      "id": 729467285,
      "user": "oranagra",
      "created_at": "2020-11-18T06:38:56Z",
      "body": "@qwertywelch thank you for submitting this report.\r\n\r\ni'm guessing si_code of 2 means SEGV_ACCERR. can you please confirm (look for it in your `/usr/include` or equivalent).\r\n\r\nthe stack trace looks a bit odd, can you try to build redis with debug symbols and no optimizations (`make noopt`) and see if we get a better stack trace?"
    },
    {
      "id": 729495100,
      "user": "nw-b",
      "created_at": "2020-11-18T07:35:55Z",
      "body": "@oranagra This perhaps what you're looking for?\r\n\r\n```\r\nProcess:               redis-server [4212]\r\nPath:                  /usr/local/Cellar/redis/6.0.9/bin/redis-server\r\nIdentifier:            redis-server\r\nVersion:               ???\r\nCode Type:             X86-64 (Translated)\r\nParent Process:        ??? [1]\r\nResponsible:           redis-server [4212]\r\nUser ID:               501\r\n\r\nDate/Time:             2020-11-17 21:35:24.481 -0500\r\nOS Version:            macOS 11.0.1 (20B29)\r\nReport Version:        12\r\nAnonymous UUID:        52446E17-AB34-409E-A3F6-F73D0E0E79BF\r\n\r\n\r\nTime Awake Since Boot: 340 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\r\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000305c26000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Signal:    Segmentation fault: 11\r\nTermination Reason:    Namespace SIGNAL, Code 0xb\r\nTerminating Process:   redis-server [4212]\r\n\r\nVM Regions Near 0x305c26000:\r\n    Stack                       30542a000-305c26000    [ 8176K] rw-/rwx SM=PRV  \r\n--> \r\n    commpage (reserved)         fc0000000-1000000000   [  1.0G] ---/--- SM=NUL  reserved VM address space (unallocated)\r\n\r\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n0   ???                           \t0x00007ffe95c6a9bc ???\r\n1   libsystem_kernel.dylib        \t0x00007fff20343fde __kill + 10\r\n2   libsystem_platform.dylib      \t0x00007fff203b6d7d _sigtramp + 29\r\n3   libsystem_malloc.dylib        \t0x00007fff2019c7aa tiny_free_no_lock + 1116\r\n4   ???                           \t000000000000000000 0 + 0\r\n5   libsystem_c.dylib             \t0x00007fff2027f729 fopen + 116\r\n6                                 \t0x0000000100c06045 createPidFile + 53\r\n7                                 \t0x0000000100c06f9d main + 1163\r\n8   libdyld.dylib                 \t0x00007fff2038d631 start + 1\r\n\r\nThread 1:: com.apple.rosetta.exceptionserver\r\n0   runtime                       \t0x00007ffdffe28cb8 0x7ffdffe26000 + 11448\r\n1   runtime                       \t0x00007ffdffe32ee0 0x7ffdffe26000 + 52960\r\n2   runtime                       \t0x00007ffdffe33c3c 0x7ffdffe26000 + 56380\r\n\r\nThread 0 crashed with X86 Thread State (64-bit):\r\n  rax: 0x0000000000000000  rbx: 0x0000000000000415  rcx: 0x0000000000000000  rdx: 0x0000000000000001\r\n  rdi: 0x0000000000000000  rsi: 0x00007fff203b93c4  rbp: 0x00007fff88aba9d8  rsp: 0x00000000000130a8\r\n   r8: 0x0000001500000000   r9: 0x00007fff88aba9d8  r10: 0x0000000000000415  r11: 0x00007fff20343fc9\r\n  r12: 0x00000000000000ec  r13: 0x00007fb01c809005  r14: 0x000000000000000b  r15: 0x00000001097da088\r\n  rip: <unavailable>  rfl: 0x0000000000000283\r\n\r\n\r\nBinary Images:\r\n       0x100bf7000 -        0x100ccafff + (0) <29F294FA-7055-3ECB-B261-2474750DF6D1> \r\n       0x109186000 -        0x1091d5fff +libssl.1.1.dylib (0) <2BA6F0C6-7BAB-30E7-88CA-802EB05A2C10> /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\r\n       0x10929c000 -        0x10945bfff +libcrypto.1.1.dylib (0) <C47A045A-5436-3B19-A48D-4A2FE13CBBF9> /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib\r\n       0x200f17000 -        0x200fb2fff  dyld (832.7.1) <2705F0D8-C104-3DE9-BEB5-B1EF6E28656D> /usr/lib/dyld\r\n    0x7ffdffe26000 -     0x7ffdffe99fff +runtime (203.1.3) <32F67E63-80F9-3251-A012-C2AD43E420BE> /Library/Apple/*/runtime\r\n    0x7fff200aa000 -     0x7fff200abfff  libsystem_blocks.dylib (78) <83E2F888-F4C1-3181-B21B-136A0D7293DD> /usr/lib/system/libsystem_blocks.dylib\r\n    0x7fff200ac000 -     0x7fff200e1fff  libxpc.dylib (2038.40.38) <DC50F7DD-1C4B-3BD2-A54D-C5D7D97A3718> /usr/lib/system/libxpc.dylib\r\n    0x7fff200e2000 -     0x7fff200f9fff  libsystem_trace.dylib (1277.50.1) <94196441-5456-342D-84D1-C60A9249D273> /usr/lib/system/libsystem_trace.dylib\r\n    0x7fff200fa000 -     0x7fff20195fff  libcorecrypto.dylib (1000.40.21) <2FA5C1BD-F41C-3FCF-B1FA-7BED6E19ABEE> /usr/lib/system/libcorecrypto.dylib\r\n    0x7fff20196000 -     0x7fff201c2fff  libsystem_malloc.dylib (317.40.8) <3688DBCE-2FFD-3F98-B12B-69ABE231908D> /usr/lib/system/libsystem_malloc.dylib\r\n    0x7fff201c3000 -     0x7fff20207fff  libdispatch.dylib (1271.40.12) <C55547DC-A05B-34A1-BD41-D54948D8F57F> /usr/lib/system/libdispatch.dylib\r\n    0x7fff20208000 -     0x7fff20241fff  libobjc.A.dylib (818.2) <009C043E-EA6B-38AF-8ABD-C57E1B42A0EE> /usr/lib/libobjc.A.dylib\r\n    0x7fff20242000 -     0x7fff20244fff  libsystem_featureflags.dylib (28.40.2) <3E1E8F98-E791-301D-909F-4CA205C94D1A> /usr/lib/system/libsystem_featureflags.dylib\r\n    0x7fff20245000 -     0x7fff202cdfff  libsystem_c.dylib (1439.40.11) <8D791F3A-4848-302F-88CD-46D91DE73127> /usr/lib/system/libsystem_c.dylib\r\n    0x7fff202ce000 -     0x7fff20323fff  libc++.1.dylib (904.4) <E7F465AC-C8FF-31DB-8EC4-7EBBA7468EB5> /usr/lib/libc++.1.dylib\r\n    0x7fff20324000 -     0x7fff2033cfff  libc++abi.dylib (904.4) <253848B5-ED35-3202-8593-5DCC763A8192> /usr/lib/libc++abi.dylib\r\n    0x7fff2033d000 -     0x7fff2036bfff  libsystem_kernel.dylib (7195.50.7) <41068F5C-74E3-3C98-9256-6A18364FB5BA> /usr/lib/system/libsystem_kernel.dylib\r\n    0x7fff2036c000 -     0x7fff20377fff  libsystem_pthread.dylib (454.40.3) <78072EC6-2257-361A-AAF5-4A3C1832B5EB> /usr/lib/system/libsystem_pthread.dylib\r\n    0x7fff20378000 -     0x7fff203b2fff  libdyld.dylib (832.7.1) <0C66AB9F-E22C-3286-B76B-DA4008698CD2> /usr/lib/system/libdyld.dylib\r\n    0x7fff203b3000 -     0x7fff203bcfff  libsystem_platform.dylib (254.40.4) <6C05D209-129A-373A-A90D-CC27AB18C091> /usr/lib/system/libsystem_platform.dylib\r\n    0x7fff203bd000 -     0x7fff203e8fff  libsystem_info.dylib (542.40.3) <90DDEF9D-9DBA-3599-A9DD-A7F730AE945F> /usr/lib/system/libsystem_info.dylib\r\n    0x7fff22706000 -     0x7fff2270ffff  libsystem_darwin.dylib (1439.40.11) <3BD9046F-FAED-3FD9-8191-49A4618555A3> /usr/lib/system/libsystem_darwin.dylib\r\n    0x7fff22b20000 -     0x7fff22b2bfff  libsystem_notify.dylib (279.40.4) <73D358B2-6C2D-33DF-975C-BE9EE5F45A0F> /usr/lib/system/libsystem_notify.dylib\r\n    0x7fff24a75000 -     0x7fff24a83fff  libsystem_networkextension.dylib (1295.40.29) <84A5011E-1511-30C7-86D8-514CFA59EF42> /usr/lib/system/libsystem_networkextension.dylib\r\n    0x7fff24ae1000 -     0x7fff24af7fff  libsystem_asl.dylib (385) <EB8BA94D-1B45-322E-9D26-272872423807> /usr/lib/system/libsystem_asl.dylib\r\n    0x7fff26207000 -     0x7fff2620efff  libsystem_symptoms.dylib (1431.40.36) <81345ED1-342F-347F-B979-39846E607C8C> /usr/lib/system/libsystem_symptoms.dylib\r\n    0x7fff28531000 -     0x7fff28541fff  libsystem_containermanager.dylib (318.41.1) <BF178091-2151-3462-AB4F-A2E111650BA2> /usr/lib/system/libsystem_containermanager.dylib\r\n    0x7fff29247000 -     0x7fff2924afff  libsystem_configuration.dylib (1109.40.9) <EA408233-7EA5-33B5-B099-E9609DD3A0FF> /usr/lib/system/libsystem_configuration.dylib\r\n    0x7fff2924b000 -     0x7fff2924ffff  libsystem_sandbox.dylib (1441.40.38) <349F71A1-4C7C-3AE0-8A1B-B95CCBB2327F> /usr/lib/system/libsystem_sandbox.dylib\r\n    0x7fff29e5a000 -     0x7fff29e5cfff  libquarantine.dylib (119.40.2) <3DD7F9EE-9B9A-3896-A8CC-4D5BE49385AE> /usr/lib/system/libquarantine.dylib\r\n    0x7fff2a3dc000 -     0x7fff2a3e0fff  libsystem_coreservices.dylib (127) <670DDFEB-8100-3C51-BC96-76BD46A21DF6> /usr/lib/system/libsystem_coreservices.dylib\r\n    0x7fff2a5f7000 -     0x7fff2a642fff  libsystem_m.dylib (3186.40.2) <F1481BE9-A26B-3C4C-90BB-4EB46DFA1DE9> /usr/lib/system/libsystem_m.dylib\r\n    0x7fff2a644000 -     0x7fff2a649fff  libmacho.dylib (973.4) <F2E3F7A6-B15A-30ED-A6AD-4EFEC37CF3E7> /usr/lib/system/libmacho.dylib\r\n    0x7fff2a666000 -     0x7fff2a671fff  libcommonCrypto.dylib (60178.40.2) <66E10FDF-896D-35F4-B9A8-8EE9400AC23A> /usr/lib/system/libcommonCrypto.dylib\r\n    0x7fff2a672000 -     0x7fff2a67cfff  libunwind.dylib (200.10) <BD13DE19-15F8-3982-ACCB-CD8C036D5D2B> /usr/lib/system/libunwind.dylib\r\n    0x7fff2a67d000 -     0x7fff2a684fff  liboah.dylib (203.1.3) <5EC28751-3BE8-3BB7-9DBE-305225CBD41B> /usr/lib/liboah.dylib\r\n    0x7fff2a685000 -     0x7fff2a68ffff  libcopyfile.dylib (173.40.2) <17A9CD2E-0527-3FF7-9CFA-57B30133DFB5> /usr/lib/system/libcopyfile.dylib\r\n    0x7fff2a690000 -     0x7fff2a697fff  libcompiler_rt.dylib (102.2) <FE958653-7FEC-3ADD-9AC0-A386E47208CF> /usr/lib/system/libcompiler_rt.dylib\r\n    0x7fff2a698000 -     0x7fff2a69afff  libsystem_collections.dylib (1439.40.11) <31C10DA5-F9B8-36E4-B859-8F6B845FF65D> /usr/lib/system/libsystem_collections.dylib\r\n    0x7fff2a69b000 -     0x7fff2a69dfff  libsystem_secinit.dylib (87.40.10) <BB2A70F5-BECC-34BD-90FE-14D31C5FD80D> /usr/lib/system/libsystem_secinit.dylib\r\n    0x7fff2a69e000 -     0x7fff2a6a0fff  libremovefile.dylib (49.40.3) <24CE2291-AEB3-30C9-94E8-535AA6E9C6F2> /usr/lib/system/libremovefile.dylib\r\n    0x7fff2a6a1000 -     0x7fff2a6a1fff  libkeymgr.dylib (31) <B47F66C0-27F4-3B77-BAA0-85E895A7421D> /usr/lib/system/libkeymgr.dylib\r\n    0x7fff2a6a2000 -     0x7fff2a6a9fff  libsystem_dnssd.dylib (1310.40.42) <F54EC6FB-DEC3-3DA8-A749-4892F50D1F08> /usr/lib/system/libsystem_dnssd.dylib\r\n    0x7fff2a6aa000 -     0x7fff2a6affff  libcache.dylib (83) <C83C4423-D12A-32A0-875D-81450DF40F42> /usr/lib/system/libcache.dylib\r\n    0x7fff2a6b0000 -     0x7fff2a6b1fff  libSystem.B.dylib (1292.50.1) <14E3BB7B-B95F-3700-8D12-B9B2012C0AF8> /usr/lib/libSystem.B.dylib\r\n    0x7fff2dc37000 -     0x7fff2dc37fff  liblaunch.dylib (2038.40.38) <D71781B5-4034-3349-BBE5-4B796CD3629A> /usr/lib/system/liblaunch.dylib\r\n    0x7fff300d5000 -     0x7fff300d5fff  libsystem_product_info_filter.dylib (8.40.1) <FF59B842-1290-3C4A-9015-AC972563406E> /usr/lib/system/libsystem_product_info_filter.dylib\r\n\r\nTranslated Code Information:\r\n  tmp0: 0xffffffffffffffff tmp1: 0x00007ffe95c6a990 tmp2: 0x0000000100ecc500\r\n\r\n\r\nExternal Modification Summary:\r\n  Calls made by other processes targeting this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by all processes on this machine:\r\n    task_for_pid: 155\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n\r\nVM Region Summary:\r\nReadOnly portion of Libraries: Total=515.0M resident=0K(0%) swapped_out_or_unallocated=515.0M(100%)\r\nWritable regions: Total=295.6M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=295.6M(100%)\r\n \r\n                                VIRTUAL   REGION \r\nREGION TYPE                        SIZE    COUNT (non-coalesced) \r\n===========                     =======  ======= \r\nKernel Alloc Once                    8K        1 \r\nMALLOC                            26.1M       11 \r\nMALLOC guard page                   96K        4 \r\nMALLOC_MEDIUM (reserved)         120.0M        1         reserved VM address space (unallocated)\r\nRosetta Arena                     2048K        1 \r\nRosetta Generic                    720K      177 \r\nRosetta IndirectBranch              32K        1 \r\nRosetta JIT                      128.0M        1 \r\nRosetta Return Stack                20K        2 \r\nRosetta Thread Context              20K        2 \r\nStack                             8176K        1 \r\nStack Guard                       56.0M        1 \r\nVM_ALLOCATE                       8640K        4 \r\n__DATA                             661K       49 \r\n__DATA_CONST                       466K       36 \r\n__DATA_DIRTY                        58K       21 \r\n__LINKEDIT                       506.8M       11 \r\n__OBJC_RO                         61.0M        1 \r\n__OBJC_RW                         2466K        2 \r\n__TEXT                            8420K       47 \r\nmapped file                        4.1G       81 \r\nshared memory                       32K        2 \r\nunshared pmap                     2048K        1 \r\n===========                     =======  ======= \r\nTOTAL                              5.0G      458 \r\nTOTAL, minus reserved VM space     4.9G      458 \r\n```\r\n\r\nI'll try doing a debug build."
    },
    {
      "id": 729540027,
      "user": "oranagra",
      "created_at": "2020-11-18T09:06:29Z",
      "body": "ok, this stack trace looks much better `createPidFile` -> `fopen`.\r\nthe previous one showed `luaD_call` -> `tiny_free_no_lock`\r\nmaybe running it under `strace` will reveal something else? please try.\r\ni don't see how anything we do in redis can lead to `fopen` to cause segmentation fault.\r\nunless the filename is garbage, but then why would it succeed with `sudo`?"
    },
    {
      "id": 730201975,
      "user": "tf-ddanilyuk",
      "created_at": "2020-11-19T08:07:02Z",
      "body": "It does succeed with sudo"
    },
    {
      "id": 731718851,
      "user": "oranagra",
      "created_at": "2020-11-22T09:08:23Z",
      "body": "again, i suggest running it with `strace` to try to reveal more details.\r\n\r\ni really don't see how a bug in redis can lead to segfault in fopen unless the filename is garbage, and if that was the case it would have happened with sudo too."
    },
    {
      "id": 731724902,
      "user": "yossigo",
      "created_at": "2020-11-22T10:09:33Z",
      "body": "If I understand correctly, this is a x86_64 binary running on M1 arm64 after being translated so theoretically could also be an issue with the translation process. Not very optimistic about strace helping in this case, it may require someone taking a step further in debugging this on the said platform."
    },
    {
      "id": 731733006,
      "user": "oranagra",
      "created_at": "2020-11-22T11:25:56Z",
      "body": "@Developer-Ecosystem-Engineering maybe you know anyone that can look into a possible problem with the translator."
    },
    {
      "id": 731768818,
      "user": "austenc",
      "created_at": "2020-11-22T15:57:45Z",
      "body": "I also noticed this when trying to use Redis with homebrew on an M1 Mac. Homebrew reports that it started the server correctly, but it does not. \r\n\r\nRunning `redis-server` fails, but running `sudo redis-server` works. This is running x86_64 binary after being translated.\r\n\r\nFor folks who might be finding this thread, a \"workaround\" in the meantime is to start the Redis server like this manually:\r\n```\r\nsudo redis-server --daemonize yes\r\n```"
    },
    {
      "id": 731895720,
      "user": "Developer-Ecosystem-Engineering",
      "created_at": "2020-11-23T02:24:51Z",
      "body": "> @Developer-Ecosystem-Engineering maybe you know anyone that can look into a possible problem with the translator.\r\n\r\nTaking a look, might be a while given the time of year. "
    },
    {
      "id": 737544518,
      "user": "Developer-Ecosystem-Engineering",
      "created_at": "2020-12-02T22:52:54Z",
      "body": "Not reproducing this, working fine either way `sudo` or without.   I see at least two people reporting it. Was this a MacBook Pro? Mac mini? A [Feedback](https://feedbackassistant.apple.com) to Apple is the ideal way to kick off an investigation, as this is the Redis issue tracker. "
    },
    {
      "id": 737547042,
      "user": "austenc",
      "created_at": "2020-12-02T22:59:12Z",
      "body": "For me, it was happening on an 13\" M1 MacBook pro."
    },
    {
      "id": 737574630,
      "user": "williammck",
      "created_at": "2020-12-03T00:17:28Z",
      "body": "Same here - 13\" M1 MBP. I'm seeing it fail as both root and user through `brew services` (i.e. launchd), and just as user when running `redis-server` in CLI.\r\nI tried to see if I could get `dtruss` to do anything, but it apparently can't instrument processes running in Rosetta."
    },
    {
      "id": 737628857,
      "user": "mapringg",
      "created_at": "2020-12-03T02:50:19Z",
      "body": "I tried yesterday via arm version of homebrew and restarting the service works. However, I have the same problem two days ago."
    },
    {
      "id": 738536817,
      "user": "Developer-Ecosystem-Engineering",
      "created_at": "2020-12-04T03:14:03Z",
      "body": "It has been reproduced, don't think it is related to our original PR at the moment but still working on it thanks. "
    },
    {
      "id": 739016282,
      "user": "Developer-Ecosystem-Engineering",
      "created_at": "2020-12-04T20:57:29Z",
      "body": "This appears to be a long standing bug in Redis. It can reproduce on Intel or Apple silicon based Macs and is unrelated to our prior contribution. \r\n\r\nWhen _redis-server_ starts up, it takes note of where argv[0] is located and how far it, the other args, and env vars extend [1].  Later it overwrites that to customize what's shown in tools like _ps_ [2].  There's an assumption in the implementation that argv[0], the other args, and env vars are all stored contiguously, one string after the other.  So, it walks over each arg and env var keeping track of last address for all the strings.\r\n\r\nThe trouble comes when one adds a new env var before the initialization start / end of args and env vars takes place.  The new env var can be allocated in some other region, which breaks the assumption about all of them being together.  If the new env var is allocated in a lower memory address, no problem its ignored.  On the other hand, if the new env var is allocated in a higher memory address, it updates the notion of the end of the buffer.  Later, when Redis goes to memset / bzero the buffer, the length calculation is way too large and written off the end of thread 0's stack.\r\n\r\nAs for why _sudo_ works around the issue, it changes the env variables!  Why is it showing up now more often on Apple silicon? The stack for thread 0 on Apple silicon has a lot of open address space above. \r\n\r\nThere was a similar issue diagnosed https://github.com/redis/redis/pull/8088 a few days ago\r\n\r\n[1] https://github.com/redis/redis/blob/2f41a3856845265ffc6cc3a35524883a8690cff7/src/setproctitle.c#L182\r\n[2] https://github.com/redis/redis/blob/2f41a3856845265ffc6cc3a35524883a8690cff7/src/setproctitle.c#L251"
    },
    {
      "id": 739151095,
      "user": "oranagra",
      "created_at": "2020-12-05T09:19:25Z",
      "body": "@Developer-Ecosystem-Engineering thank you for this detailed analysis. \r\n@yossigo can you please handle this one. "
    },
    {
      "id": 739991648,
      "user": "yossigo",
      "created_at": "2020-12-07T15:31:37Z",
      "body": "Pushed a possible fix in #8150 but can someone who is able to reproduce this problem confirm that it is indeed solved? Thanks!"
    },
    {
      "id": 740394022,
      "user": "tayhalla",
      "created_at": "2020-12-08T05:49:36Z",
      "body": "@yossigo found this thread after I ran into this an hour ago w the new m1 macbook. Pulled your commit down, built all locally, and it's looking good over here. Nice work!"
    },
    {
      "id": 740444317,
      "user": "erf",
      "created_at": "2020-12-08T07:42:19Z",
      "body": "@yossigo I was also able to build it using your fix on an m1 macbook using rosetta and run it as a non root. \r\n\r\nI noticed some failing tests though (but that is probably not related) and i was not able to build it without rosetta. Are there any plans on supporting m1 builds?"
    },
    {
      "id": 740459824,
      "user": "yossigo",
      "created_at": "2020-12-08T08:14:51Z",
      "body": "Thanks @erf, Can you post more info about the build failures and failed tests please?"
    },
    {
      "id": 740606127,
      "user": "erf",
      "created_at": "2020-12-08T13:02:58Z",
      "body": "@yossigo i was able to build Redis now both with and without Rosetta (by opening iTerm2 with the `using Rosetta` checked). The test result was the same.\r\n\r\nSee attached [make_test_log.txt](https://github.com/redis/redis/files/5659274/make_test_log.txt) file.\r\n\r\n\r\n"
    },
    {
      "id": 740653188,
      "user": "yossigo",
      "created_at": "2020-12-08T14:29:54Z",
      "body": "@erf these are false test failures introduced in a new test of a recent commit, a fix was merged to `unstable` just now. Also the original problem is now merged so `unstable` should be OK on macOS/M1."
    },
    {
      "id": 749311875,
      "user": "anamba",
      "created_at": "2020-12-22T03:06:00Z",
      "body": "> As for why _sudo_ works around the issue, it changes the env variables!\r\n\r\nAha! That helped me find this simple workaround:\r\n\r\n```\r\nenv -i /usr/local/bin/redis-server --daemonize yes\r\n```\r\n\r\n(Yep, I just got a new M1 mac.)"
    },
    {
      "id": 762521976,
      "user": "rahim",
      "created_at": "2021-01-19T00:04:34Z",
      "body": "Thank you @anamba, super helpful.\r\n\r\nI hit this issue from the context of my brew service managed launchagent failing to start redis on boot (ie `brew services start redis@4.0`). For anyone in the same boat, I successfully applied the suggested env var isolation by editing the plist as follows\r\n\r\n```console\r\n$ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n```\r\n\r\n(I'm using the @4.0 formula here, but the default redis version should work similarly)\r\n\r\nUpdate ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n```diff\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n  <dict>\r\n    <key>KeepAlive</key>\r\n    <dict>\r\n      <key>SuccessfulExit</key>\r\n      <false/>\r\n    </dict>\r\n    <key>Label</key>\r\n    <string>homebrew.mxcl.redis@4.0</string>\r\n    <key>ProgramArguments</key>\r\n    <array>\r\n+     <string>env -i</string>\r\n      <string>/usr/local/opt/redis@4.0/bin/redis-server</string>\r\n      <string>/usr/local/etc/redis.conf</string>\r\n      <string>--daemonize no</string>\r\n    </array>\r\n    <key>RunAtLoad</key>\r\n    <true/>\r\n    <key>WorkingDirectory</key>\r\n    <string>/usr/local/var</string>\r\n    <key>StandardErrorPath</key>\r\n    <string>/usr/local/var/log/redis.log</string>\r\n    <key>StandardOutPath</key>\r\n    <string>/usr/local/var/log/redis.log</string>\r\n  </dict>\r\n</plist>\r\n```\r\n\r\n```console\r\n$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n```\r\n\r\nI contemplated opening a PR in brew for this, but hopefully this is a temporary bandaid until redis fix their bug.\r\n"
    },
    {
      "id": 762738194,
      "user": "oranagra",
      "created_at": "2021-01-19T10:05:01Z",
      "body": "FYI, this bug is fixed in Redis 5.0.11, 6.0.10 and 6.2 RC2"
    },
    {
      "id": 791321079,
      "user": "diabolo",
      "created_at": "2021-03-05T10:14:19Z",
      "body": "@rahim: Your plist fix is super helpful. I think you should contribute it to brew :)"
    },
    {
      "id": 811486616,
      "user": "Pyrolistical",
      "created_at": "2021-03-31T21:45:26Z",
      "body": "I couldn't get @rahim's solution to work with redis@3.2 by editing `/usr/local/Cellar/redis@3.2/3.2.13_1/homebrew.mxcl.redis@3.2.plist`\r\n\r\nBut @anamba's solution of directly running it worked"
    },
    {
      "id": 1717054150,
      "user": "xf329",
      "created_at": "2023-09-13T06:57:19Z",
      "body": "same solution works fine.\r\n\r\nbefore:\r\nbrew services start redis@4.0 —— status error\r\n/usr/local/opt/redis@4.0/bin/redis-server /usr/local/etc/redis.conf --daemonize no —— works fine\r\n\r\nafter:\r\nI change /usr/local/Cellar/redis@4.0/4.0.14_1/homebrew.mxcl.redis@4.0.plist to this:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n\t<key>KeepAlive</key>\r\n\t<true/>\r\n\t<key>Label</key>\r\n\t<string>homebrew.mxcl.redis@4.0</string>\r\n\t<key>LimitLoadToSessionType</key>\r\n\t<array>\r\n\t\t<string>Aqua</string>\r\n\t\t<string>Background</string>\r\n\t\t<string>LoginWindow</string>\r\n\t\t<string>StandardIO</string>\r\n\t\t<string>System</string>\r\n\t</array>\r\n\t<key>ProgramArguments</key>\r\n\t<array>\r\n\t\t<string>arch</string>\r\n\t\t<string>-x86_64</string>\r\n\t\t<string>/usr/local/opt/redis@4.0/bin/redis-server</string>\r\n\t\t<string>/usr/local/etc/redis.conf</string>\r\n\t\t<string>--daemonize</string>\r\n\t\t<string>no</string>\r\n\t</array>\r\n\t<key>RunAtLoad</key>\r\n\t<true/>\r\n\t<key>StandardErrorPath</key>\r\n\t<string>/usr/local/var/log/redis.log</string>\r\n\t<key>StandardOutPath</key>\r\n\t<string>/usr/local/var/log/redis.log</string>\r\n\t<key>WorkingDirectory</key>\r\n\t<string>/usr/local/var</string>\r\n</dict>\r\n</plist>\r\n```\r\n```cmd\r\n$ brew services list\r\nName      Status  User    File\r\nredis@4.0 started xxx ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n```\r\n\r\n> Thank you @anamba, super helpful.\r\n> \r\n> I hit this issue from the context of my brew service managed launchagent failing to start redis on boot (ie `brew services start redis@4.0`). For anyone in the same boat, I successfully applied the suggested env var isolation by editing the plist as follows\r\n> \r\n> ```\r\n> $ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n> ```\r\n> \r\n> (I'm using the @4.0 formula here, but the default redis version should work similarly)\r\n> \r\n> Update ~/Library/LaunchAgents/[homebrew.mxcl.redis@4.0.plist](mailto:homebrew.mxcl.redis@4.0.plist)\r\n> \r\n> ```diff\r\n> <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n> <plist version=\"1.0\">\r\n>   <dict>\r\n>     <key>KeepAlive</key>\r\n>     <dict>\r\n>       <key>SuccessfulExit</key>\r\n>       <false/>\r\n>     </dict>\r\n>     <key>Label</key>\r\n>     <string>homebrew.mxcl.redis@4.0</string>\r\n>     <key>ProgramArguments</key>\r\n>     <array>\r\n> +     <string>env -i</string>\r\n>       <string>/usr/local/opt/redis@4.0/bin/redis-server</string>\r\n>       <string>/usr/local/etc/redis.conf</string>\r\n>       <string>--daemonize no</string>\r\n>     </array>\r\n>     <key>RunAtLoad</key>\r\n>     <true/>\r\n>     <key>WorkingDirectory</key>\r\n>     <string>/usr/local/var</string>\r\n>     <key>StandardErrorPath</key>\r\n>     <string>/usr/local/var/log/redis.log</string>\r\n>     <key>StandardOutPath</key>\r\n>     <string>/usr/local/var/log/redis.log</string>\r\n>   </dict>\r\n> </plist>\r\n> ```\r\n> \r\n> ```\r\n> $ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis@4.0.plist\r\n> ```\r\n> \r\n> I contemplated opening a PR in brew for this, but hopefully this is a temporary bandaid until redis fix their bug.\r\n\r\n"
    }
  ]
}