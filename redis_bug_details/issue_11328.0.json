{
  "issue_number": 11328.0,
  "title": "[BUG] Bug in Redis-Benchmark",
  "body": "1. Firstly, Redis-benchmark will return 'NULL' in **get test** if there is an empty database, so all the benchmark begin with a **get test** cannot response with right result, because all the return are 'NULL'.\r\n2. Secondly, the problem continue from the first one. The **-d** option of Redis-benchmark has no effect in get test due to we can only get a 'NULL' response(just several bytes).\r\n3. Thirdly, but if your Redis-benchmark start with a **set test** or set some payloads in advance, especially with a big size payload, all the **get test** from that on will be influenced, no matter what **-d** option pointed out.\r\n",
  "state": "open",
  "created_at": "2022-09-27T12:42:33Z",
  "updated_at": "2022-09-27T13:45:21Z",
  "closed_at": null,
  "labels": [
    "state:to-be-closed"
  ],
  "comments_data": [
    {
      "id": 1259457265,
      "user": "glarer",
      "created_at": "2022-09-27T12:48:03Z",
      "body": "Here I start with an empty database and request for **get test** with **-d 16384**, then I can get 174K RPS.\r\n<img width=\"707\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19928321/192529330-775e5c8d-9724-4623-92c7-939e0938eab7.png\">\r\nBut if I do a **set** like this, \r\n<img width=\"686\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19928321/192529760-2852a67e-3d64-4118-854d-d2f33e3b194c.png\">\r\nall the **get test** will be influencd like below.(**-d 3** & **-d 1024** & **-d 16384**)\r\n<img width=\"688\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19928321/192530389-48733452-1e80-477d-a25c-27de4e60668f.png\">\r\n<img width=\"683\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19928321/192530435-d6d7faed-4304-4b8a-a622-2f19229eb3f8.png\">\r\n<img width=\"699\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19928321/192530470-0ccab643-b02d-4a11-8a9d-d8f3b075fb6f.png\">\r\n\r\n"
    },
    {
      "id": 1259499982,
      "user": "filipecosta90",
      "created_at": "2022-09-27T13:21:12Z",
      "body": "@GlareR IMHO the responsibility for ensuring that the same conditions are met at the start of the benchmark are outside the scope of the benchmark tool and should be part of the responsibility of the person doing the benchmark. \r\nMeaning the tool is just a tool, and IMO you're describing that you get non-deterministic results due to the benchmark -- which is not true: If you provide the same start conditions to the benchmark, you'll always get the approximate same outcome. \r\nBottom line, if you properly setup and teardown the benchmark, the above won't happen. \r\n- I suggest for any `GET` test that you ensure that you have the proper key(s) pre-populated. Likewise, tearing down the setup should also take care of cleaning the used benchmark keys. \r\nMarking this issue to be closed given IMHO see no change should be applied to redis-benchmark as a consequence of the described above.  "
    },
    {
      "id": 1259533861,
      "user": "hnhyzz",
      "created_at": "2022-09-27T13:45:21Z",
      "body": "@filipecosta90 The problem is that the -d argument does not make sense for -t GET at all.\r\nThe usage indicates that \"-d <size>          Data size of SET/GET value in bytes (default 3)\"\r\nHowever, for -t GET, redis-benchmark does not set the data size. The data size is solely decided by the entry in the DB for the key.\r\nMaybe we could make clear in the usage that the -d argument only decides the data size of SET?\r\n\r\nBTW, it is not intuitive for the benchmark user to know which key the GET benchmark would use. To test GET, I will simply bencmark SET for the same size first to add the entry, but I still do not know which key was set. \r\nIs it possible that redis-benchmark could firstly set an entry for the key to be accessed, when benchmarking GET? For users, it would be more friendly."
    }
  ]
}