{
  "issue_number": 10599.0,
  "title": "[BUG] SSUBSCRIBE - (Error) CROSSSLOT keys in request don't hash to the same slot",
  "body": "**Describe the bug**\r\n\r\nCommand : SSUBSCRIBE\r\n\r\nWhile the subscribe command allows multiple channels to be subscribed at the same time, using subscribe causes an error\r\n\r\nCommand Help shows that multiple channel inputs are possible.\r\n\r\n![image](https://user-images.githubusercontent.com/21598248/163904975-35020c80-8788-4927-8933-94074c68286a.png)\r\n\r\n**To reproduce**\r\n\r\n![image](https://user-images.githubusercontent.com/21598248/163904902-7924684f-cd8f-4956-9d9c-856298787eb7.png)\r\n\r\n\r\n**Expected behavior**\r\n\r\nSubscribe Multiple Channels\r\n\r\n**Additional information**\r\n\r\nMy Env Running With docker-compose Cluster Using blow Docker Images And Cluster Info\r\n\r\nUsing Dokcer Image : redis:7.0-rc  DIGEST:sha256:bd71d9d956fd6bdab5208889bcd7a26a563e3e34c211c2d44534a2e14f304f95\r\n\r\n127.0.0.1:6380> cluster info\r\ncluster_state:ok\r\ncluster_slots_assigned:16384\r\ncluster_slots_ok:16384\r\ncluster_slots_pfail:0\r\ncluster_slots_fail:0\r\ncluster_known_nodes:3\r\ncluster_size:3\r\ncluster_current_epoch:3\r\ncluster_my_epoch:2\r\ncluster_stats_messages_ping_sent:5179\r\ncluster_stats_messages_pong_sent:5349\r\ncluster_stats_messages_meet_sent:1\r\ncluster_stats_messages_sent:10529\r\ncluster_stats_messages_ping_received:5349\r\ncluster_stats_messages_pong_received:5180\r\ncluster_stats_messages_publish_received:2\r\ncluster_stats_messages_received:10531\r\ntotal_cluster_links_buffer_limit_exceeded:0\r\n127.0.0.1:6380> info\r\n# Server\r\nredis_version:6.9.242\r\nredis_git_sha1:00000000\r\nredis_git_dirty:0\r\nredis_build_id:aa708bfe91aa2537\r\nredis_mode:cluster\r\nos:Linux 5.10.16.3-microsoft-standard-WSL2 x86_64\r\narch_bits:64\r\nmultiplexing_api:epoll\r\natomicvar_api:c11-builtin\r\ngcc_version:10.2.1\r\nprocess_id:1\r\nprocess_supervised:no\r\nrun_id:7396d9a095b9ce5b23c9c4643a26255188ff1461\r\ntcp_port:6380\r\nserver_time_usec:1650332952689600\r\nuptime_in_seconds:3383\r\nuptime_in_days:0\r\nhz:10\r\nconfigured_hz:10\r\nlru_clock:6165784\r\nexecutable:/data/redis-server\r\nconfig_file:/usr/local/etc/redis/redis.conf\r\nio_threads_active:0\r\n\r\n# Clients\r\nconnected_clients:3\r\ncluster_connections:4\r\nmaxclients:10000\r\nclient_recent_max_input_buffer:20480\r\nclient_recent_max_output_buffer:0\r\nblocked_clients:0\r\ntracking_clients:1\r\nclients_in_timeout_table:0\r\n\r\n# Memory\r\nused_memory:1996328\r\nused_memory_human:1.90M\r\nused_memory_rss:14036992\r\nused_memory_rss_human:13.39M\r\nused_memory_peak:2071352\r\nused_memory_peak_human:1.98M\r\nused_memory_peak_perc:96.38%\r\nused_memory_overhead:1595480\r\nused_memory_startup:1585536\r\nused_memory_dataset:400848\r\nused_memory_dataset_perc:97.58%\r\nallocator_allocated:2154672\r\nallocator_active:2584576\r\nallocator_resident:7675904\r\ntotal_system_memory:16648155136\r\ntotal_system_memory_human:15.50G\r\nused_memory_lua:37888\r\nused_memory_vm_eval:37888\r\nused_memory_lua_human:37.00K\r\nused_memory_scripts_eval:0\r\nnumber_of_cached_scripts:0\r\nnumber_of_functions:0\r\nnumber_of_libraries:0\r\nused_memory_vm_functions:37888\r\nused_memory_vm_total:75776\r\nused_memory_vm_total_human:74.00K\r\nused_memory_functions:184\r\nused_memory_scripts:184\r\nused_memory_scripts_human:184B\r\nmaxmemory:0\r\nmaxmemory_human:0B\r\nmaxmemory_policy:noeviction\r\nallocator_frag_ratio:1.20\r\nallocator_frag_bytes:429904\r\nallocator_rss_ratio:2.97\r\nallocator_rss_bytes:5091328\r\nrss_overhead_ratio:1.83\r\nrss_overhead_bytes:6361088\r\nmem_fragmentation_ratio:7.09\r\nmem_fragmentation_bytes:12057848\r\nmem_not_counted_for_evict:8\r\nmem_replication_backlog:0\r\nmem_total_replication_buffers:0\r\nmem_clients_slaves:0\r\nmem_clients_normal:5400\r\nmem_cluster_links:4352\r\nmem_aof_buffer:8\r\nmem_allocator:jemalloc-5.2.1\r\nactive_defrag_running:0\r\nlazyfree_pending_objects:0\r\nlazyfreed_objects:0\r\n\r\n# Persistence\r\nloading:0\r\nasync_loading:0\r\ncurrent_cow_peak:0\r\ncurrent_cow_size:0\r\ncurrent_cow_size_age:0\r\ncurrent_fork_perc:0.00\r\ncurrent_save_keys_processed:0\r\ncurrent_save_keys_total:0\r\nrdb_changes_since_last_save:0\r\nrdb_bgsave_in_progress:0\r\nrdb_last_save_time:1650329569\r\nrdb_last_bgsave_status:ok\r\nrdb_last_bgsave_time_sec:-1\r\nrdb_current_bgsave_time_sec:-1\r\nrdb_saves:0\r\nrdb_last_cow_size:0\r\nrdb_last_load_keys_expired:0\r\nrdb_last_load_keys_loaded:0\r\naof_enabled:1\r\naof_rewrite_in_progress:0\r\naof_rewrite_scheduled:0\r\naof_last_rewrite_time_sec:-1\r\naof_current_rewrite_time_sec:-1\r\naof_last_bgrewrite_status:ok\r\naof_rewrites:0\r\naof_last_write_status:ok\r\naof_last_cow_size:0\r\nmodule_fork_in_progress:0\r\nmodule_fork_last_cow_size:0\r\naof_current_size:0\r\naof_base_size:0\r\naof_pending_rewrite:0\r\naof_buffer_length:0\r\naof_pending_bio_fsync:0\r\naof_delayed_fsync:0\r\n\r\n# Stats\r\ntotal_connections_received:461\r\ntotal_commands_processed:935\r\ninstantaneous_ops_per_sec:0\r\ntotal_net_input_bytes:97282\r\ntotal_net_output_bytes:150616\r\ninstantaneous_input_kbps:0.00\r\ninstantaneous_output_kbps:0.00\r\nrejected_connections:0\r\nsync_full:0\r\nsync_partial_ok:0\r\nsync_partial_err:0\r\nexpired_keys:0\r\nexpired_stale_perc:0.00\r\nexpired_time_cap_reached_count:0\r\nexpire_cycle_cpu_milliseconds:24\r\nevicted_keys:0\r\nevicted_clients:0\r\ntotal_eviction_exceeded_time:0\r\ncurrent_eviction_exceeded_time:0\r\nkeyspace_hits:0\r\nkeyspace_misses:0\r\npubsub_channels:0\r\npubsub_patterns:0\r\nlatest_fork_usec:0\r\ntotal_forks:0\r\nmigrate_cached_sockets:0\r\nslave_expires_tracked_keys:0\r\nactive_defrag_hits:0\r\nactive_defrag_misses:0\r\nactive_defrag_key_hits:0\r\nactive_defrag_key_misses:0\r\ntotal_active_defrag_time:0\r\ncurrent_active_defrag_time:0\r\ntracking_total_keys:0\r\ntracking_total_items:0\r\ntracking_total_prefixes:0\r\nunexpected_error_replies:0\r\ntotal_error_replies:4\r\ndump_payload_sanitizations:0\r\ntotal_reads_processed:1057\r\ntotal_writes_processed:600\r\nio_threaded_reads_processed:0\r\nio_threaded_writes_processed:0\r\nreply_buffer_shrinks:6\r\nreply_buffer_expands:0\r\n\r\n# Replication\r\nrole:master\r\nconnected_slaves:0\r\nmaster_failover_state:no-failover\r\nmaster_replid:ec2f1f5972cb67c54f6b1cf8124e35e2f1900db1\r\nmaster_replid2:0000000000000000000000000000000000000000\r\nmaster_repl_offset:0\r\nsecond_repl_offset:-1\r\nrepl_backlog_active:0\r\nrepl_backlog_size:1048576\r\nrepl_backlog_first_byte_offset:0\r\nrepl_backlog_histlen:0\r\n\r\n# CPU\r\nused_cpu_sys:1.322589\r\nused_cpu_user:1.265571\r\nused_cpu_sys_children:0.000000\r\nused_cpu_user_children:0.001399\r\nused_cpu_sys_main_thread:1.316688\r\nused_cpu_user_main_thread:1.267466\r\n\r\n# Modules\r\n\r\n# Errorstats\r\nerrorstat_CROSSSLOT:count=1\r\nerrorstat_ERR:count=3\r\n\r\n# Cluster\r\ncluster_enabled:1\r\n",
  "state": "closed",
  "created_at": "2022-04-19T01:59:50Z",
  "updated_at": "2022-05-23T02:23:18Z",
  "closed_at": "2022-05-23T02:23:17Z",
  "labels": [
    "state:to-be-closed"
  ],
  "comments_data": [
    {
      "id": 1101928790,
      "user": "enjoy-binbin",
      "created_at": "2022-04-19T02:24:15Z",
      "body": "see https://github.com/redis/redis/issues/8029#issuecomment-793160824\r\nPUBSUBLOCAL is the new form of channels which is bounded to a slot (inside Redis shard). This is essential to scale the pubsub in a Redis cluster mode as the regular PUBSUB channel propagates the messages across the cluster which is not scalable. For Redis non cluster mode, the behaviour is consistent with the earlier pubsub channel. For Redis cluster mode, appropriate redirection will be provided as it will be assigned to a HASH SLOT and the data will be available only within the shard (MASTER/REPLICA) where the slot would exist.\r\n\r\nand https://redis.io/commands/ssubscribe/\r\nIn a Redis cluster, shard channels are assigned to slots by the same algorithm used to assign keys to slots. Client(s) can subscribe to a node covering a slot (primary/replica) to receive the messages published."
    },
    {
      "id": 1101959612,
      "user": "madolson",
      "created_at": "2022-04-19T03:36:14Z",
      "body": "@ktj1312 You need to send two separate ssubscribe commands, like so:\r\n```\r\nSSUBCRIBE ch1\r\nSSUBCRIBE ch2\r\n```\r\n\r\nYou can still run them on the same node, they just can't be in the same command."
    },
    {
      "id": 1101977956,
      "user": "ktj1312",
      "created_at": "2022-04-19T04:18:28Z",
      "body": "@madolson \r\n\r\nNow I understand the structure.\r\n\r\nHowever, If multiple channels cannot be subscribed with a single command at the same time, wouldn't it be right for the document to be modified?\r\n\r\nhttps://redis.io/commands/ssubscribe/\r\n\r\nFor now : **Subscribes the client to the specified shard channels.**\r\nModyfied : **Subscribes the client to the specified shard channel. (only one channel at one command)**\r\n\r\nThis will make the command clear. Please consider that.\r\n\r\n![image](https://user-images.githubusercontent.com/21598248/163919230-afcf01a0-bb23-4e44-ba28-7a05cd0066b2.png)\r\n"
    },
    {
      "id": 1102956572,
      "user": "madolson",
      "created_at": "2022-04-19T18:27:29Z",
      "body": "You can subscribe to multiple channels, they just all have to be in the same slot. Perhaps we can make a small documentation update here. @hpatro ^ ?"
    },
    {
      "id": 1134097954,
      "user": "enjoy-binbin",
      "created_at": "2022-05-23T02:23:17Z",
      "body": "https://github.com/redis/redis-doc/pull/1883\r\nthe doc has been updated, closing"
    }
  ]
}