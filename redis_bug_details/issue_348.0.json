{
  "issue_number": 348.0,
  "title": "Crash in t_zset.c using 2.4.7",
  "body": "We are testing an upgrade from Redis 1.2.2 to 2.4.7 and found that our server crashed almost immediately. This is from one of our QA servers, which only has a 30MB database. RHEL 5.6, x64, 4GB RAM.\n\nIf this is due to something in our build environment then recompiling will not be an issue, however the bigger concern is that there may trouble upgrading from 1.2.2. \n\nFeb 21 15:40:29 app02q-cl-tor01 redis[15989]: WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: === REDIS BUG REPORT START: Cut & paste starting from here ===\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: === ASSERTION FAILED ===\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: ==> t_zset.c:507 'p != NULL' is not true\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: (forcing SIGSEGV to print the bug report.)\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]:     Redis 2.4.7 crashed by signal: 11\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]:     Failed assertion: p != NULL (t_zset.c:507)\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: --- STACK TRACE\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(_redisAssert+0x72) [0x42ef02]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(_redisAssert+0x72) [0x42ef02]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(zzlIsInRange+0xa5) [0x4248e5]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(zzlFirstInRange+0x32) [0x424a32]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(genericZrangebyscoreCommand+0x574) [0x425054]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(call+0x34) [0x40f0c4]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(processCommand+0x210) [0x40f3b0]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(processInputBuffer+0x4d) [0x41795d]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(readQueryFromClient+0x10f) [0x41838f]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(aeProcessEvents+0x173) [0x40bed3]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(aeMain+0x2e) [0x40c0ee]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server(main+0xed) [0x41105d]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /lib64/libc.so.6(__libc_start_main+0xf4) [0x3ed361d994]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: /opt/redis-2.4/src/redis-server [0x40b4a9]\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: --- INFO OUTPUT\n db0:keys=543713,expires=345046 redis[15989]: redis_version:2.4.7\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: --- CLIENT LIST OUTPUT\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: addr=127.0.0.1:37843 fd=6 idle=1 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=sismember addr=127.0.0.1:37845 fd=7 idle=2 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=lpop addr=127.0.0.1:37846 fd=8 idle=103 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=get addr=127.0.0.1:37847 fd=9 idle=2 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=lpop addr=127.0.0.1:37849 fd=10 idle=2 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=lpop addr=127.0.0.1:37850 fd=11 idle=2 flags=N db=0 sub=0 psub=0 qbuf=0 obl=0 oll=0 events=r cmd=lpop addr=127.0.0.1:37851 fd=12 idle=0 flags=N db=0 sub=0 psub=0 qbuf=2 obl=0 oll=0 events=r cmd=zrangebyscore \nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: --- CURRENT CLIENT INFO\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: client: addr=127.0.0.1:37851 fd=12 idle=0 flags=N db=0 sub=0 psub=0 qbuf=2 obl=0 oll=0 events=r cmd=zrangebyscore\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[0]: 'zrangebyscore'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[1]: 'resque:delayed_queue_schedule'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[2]: '-inf'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[3]: '1329857012'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[4]: 'LIMIT'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[5]: '0'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: argv[6]: '1'\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: key 'resque:delayed_queue_schedule' found in DB containing the following object:\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: Object type: 3\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: Object encoding: 5\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: Object refcount: 1\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: Sorted set size: 0\nFeb 21 15:43:32 app02q-cl-tor01 redis[15989]: === REDIS BUG REPORT END. Make sure to include from START to END. ===      Please report the crash opening an issue on github:          http://github.com/antirez/redis/issues\n",
  "state": "closed",
  "created_at": "2012-02-21T21:01:16Z",
  "updated_at": "2012-02-22T14:24:10Z",
  "closed_at": "2012-02-22T14:24:07Z",
  "labels": [
    "critical bug"
  ],
  "comments_data": [
    {
      "id": 4091665,
      "user": "antirez",
      "created_at": "2012-02-21T23:15:39Z",
      "body": "Hello, I think this is due to the fact that in Redis 1.2.2 you could have empty sorted sets, while in 2.4.x they are not handled properly (now keys holding empty collections are deleted).\nThe fix is to modify Redis 2.4.x so that it discards this empty keys at RDB loading time. I'll write a patch tomorrow, however if there are no sensible information in the RDB file produced originally by Redis 1.2.2 and you can easily send it to me, it may help, but it is not strictly required.\n\nThanks for submitting,\nSalvatore\n"
    },
    {
      "id": 4100402,
      "user": "antirez",
      "created_at": "2012-02-22T08:56:13Z",
      "body": "Hello again, I fixed the bug and now Redis 2.4 and unstable are able to handle empty sorted sets, however the right fix should involve not loading them at all from old versions of RDB files, so probably the right fix will end being a bit more complex than that. For now leaving the issue open, but from your point of view upgrading to the latest 2.4 branch commit should fix the issue. However you'll still have those empty sorted sets around in memory, that should be harmless but are not \"correct\" accordingly to the new (>= 2.0) Redis semantic.\n\nMore news soon :)\n"
    },
    {
      "id": 4104678,
      "user": "rmcdonough",
      "created_at": "2012-02-22T14:17:38Z",
      "body": "The patch worked flawlessly!\n\nWe are very, very grateful, and impressed. Our love of Redis only grows\nover time.\n\nWe can see from the Redis project site that you are no longer accepting\ndonations, however please do let us know if there is anything we can do to\nshow our appreciation. Just as an FYI, we are using Redis heavily across a\nlarge number of our sites, and have had very, very few issues.\n- hotornot.com\n- cougarlife.com\n- establishedmen.com\n\nOn Wed, Feb 22, 2012 at 3:56 AM, Salvatore Sanfilippo <\nreply@reply.github.com\n\n> wrote:\n> \n> Hello again, I fixed the bug and now Redis 2.4 and unstable are able to\n> handle empty sorted sets, however the right fix should involve not loading\n> them at all from old versions of RDB files, so probably the right fix will\n> end being a bit more complex than that. For now leaving the issue open, but\n> from your point of view upgrading to the latest 2.4 branch commit should\n> fix the issue. However you'll still have those empty sorted sets around in\n> memory, that should be harmless but are not \"correct\" accordingly to the\n> new (>= 2.0) Redis semantic.\n> \n> More news soon :)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/antirez/redis/issues/348#issuecomment-4100402\n\n## \n\nRich McDonough\nrich.mcdonough@gmail.com\n\n\"Just because it's in a book doesn't mean that it's true.\"\n"
    },
    {
      "id": 4104805,
      "user": "antirez",
      "created_at": "2012-02-22T14:24:10Z",
      "body": "Great to know! Thank you for reporting.\n\nFortunately now all the development is funded by VMware, but well there is no best for of appreciation than to open an issue when there is something wrong and then report back, so thanks!\n\nI think it's worth closing this issue because it is a shame to add more code to avoid loading empty zsets now that are handled well, because 1.2 -> 2.4 upgrades are rare and checking the size of the loaded object will slow down the loading process. It's important to note that after the first write to this \"empty\" objects Redis will detect them and will delete the key.\n\nThank you,\nSalvatore\n"
    }
  ]
}