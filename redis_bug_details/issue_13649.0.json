{
  "issue_number": 13649.0,
  "title": "[CRASH] redis crashes due to corrupted in-memory data structure",
  "body": "**Crash report**\r\n\r\nWe are running redis 5.0.4 with 4 master + 4 slave nodes and 40+ GiB data per node.\r\n\r\nTwo out of four slave nodes crash every single time when BGSAVE is executed and we never get rdb saved successfully since then. The crashes were memory related. Redis either tried to allocate insanely large memory, or faced NULL dict pointer.\r\n\r\nFor the former case, the large number, which redis tried to allocate as bytes, were actually a part of a key string. Say, \r\n\r\n```\r\n3472901146147829813 + 3 = 0x38 0x38 0x30 0x34 0x31 0x39 0x32 0x30 = \"88041920\"\r\n```\r\nIt implies wrong `sdslen(obj->ptr)` due to corrupted string object.\r\n\r\nWe are wondering what could be the reason or how to fix it. Thanks in advance.\r\n\r\nHere go typical logs. Complete sample logs are attached.\r\n\r\n```log\r\n4804:S 05 Nov 2024 02:57:10.830 # Background saving terminated by signal 11\r\n4804:S 05 Nov 2024 08:46:51.041 * Background saving started by pid 13134\r\n13134:C 05 Nov 2024 08:50:34.709 # Out Of Memory allocating 3472901146147829813 bytes!\r\n...\r\n13134:C 05 Nov 2024 08:50:34.710 # (forcing SIGSEGV in order to print the stack trace)\r\n13134:C 05 Nov 2024 08:50:34.710 # ------------------------------------------------\r\n13134:C 05 Nov 2024 08:50:34.710 # Redis 5.0.4 crashed by signal: 11\r\n13134:C 05 Nov 2024 08:50:34.710 # Crashed running the instruction at: 0x46f103\r\n13134:C 05 Nov 2024 08:50:34.710 # Accessing address: 0xffffffffffffffff\r\n13134:C 05 Nov 2024 08:50:34.710 # Failed assertion: <no assertion failed> (<no file>:0)\r\n```\r\n```log\r\n29363:C 05 Nov 2024 03:11:00.862 # Redis 5.0.4 crashed by signal: 11\r\n29363:C 05 Nov 2024 03:11:00.862 # Crashed running the instruction at: 0x42a820\r\n29363:C 05 Nov 2024 03:11:00.862 # Accessing address: (nil)\r\n29363:C 05 Nov 2024 03:11:00.862 # Failed assertion: <no assertion failed> (<no file>:0)\r\n```\r\n[crash-1.log](https://github.com/user-attachments/files/17699984/crash-1.log)\r\n[crash-2.log](https://github.com/user-attachments/files/17699968/crash-2.log)\r\n[crash-3.log](https://github.com/user-attachments/files/17699975/crash-3.log)\r\n",
  "state": "open",
  "created_at": "2024-11-11T09:12:31Z",
  "updated_at": "2024-11-19T03:11:09Z",
  "closed_at": null,
  "labels": [],
  "comments_data": [
    {
      "id": 2467937803,
      "user": "sundb",
      "created_at": "2024-11-11T11:24:50Z",
      "body": "@bpint do you have keys larger than 2gb?"
    },
    {
      "id": 2468063059,
      "user": "bpint",
      "created_at": "2024-11-11T12:28:33Z",
      "body": "noop. I don't think we have large keys or values. We are also very concerning about the data integrity right now.\r\n\r\nSimilar issuses are,\r\n\r\n- [Redis 5.0.4 crashed by signal: 11](https://github.com/redis/redis/issues/6781)\r\n\r\n- [Background saving terminated by signal 11](https://github.com/RedisBloom/RedisBloom/issues/672)\r\n\r\n- [Redis 6.2.5 crashed by signal: 11, si_code: 128 in rdbSaveObjectType](https://github.com/redis/redis/issues/9551)\r\n\r\n- [[BUG] Redis crashing 7.2.2](https://github.com/redis/redis/issues/12876)\r\n\r\nSome insparing investigations,\r\n\r\n- [RediSearch Crashes](https://github.com/RediSearch/RediSearch/issues/918)\r\n\r\n- [Redis 3.2.3 crashed by signal: 11 服务宕机问题排查](http://www.shutdown.cn/post/redis-3_2_3-crash-signal-11/)"
    },
    {
      "id": 2468087286,
      "user": "sundb",
      "created_at": "2024-11-11T12:40:55Z",
      "body": "@bpint can you share your executable file(redis-server) with me(debing.sun@redis.com), thanks."
    },
    {
      "id": 2484616477,
      "user": "bpint",
      "created_at": "2024-11-19T03:11:08Z",
      "body": "@sundb really sorry that it took so long to get the binary file from the production system.\r\n\r\nthe file was sent to your mailbox, and the crash log is,\r\n\r\n```log\r\nCore was generated by `redis-rdb-bgsave 198.218.61.34:17382 [cl'.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  0x0000000000442ed8 in sdssplitargs (line=0x3 <Address 0x3 out of bounds>, argc=0x0) at sds.c:1097\r\n1097in sds.c\r\n```\r\n\r\nthanks a lot."
    }
  ]
}