{
  "issue_number": 12200.0,
  "title": "[BUG] Hang in SRANDMEMBER call during CoW fork saving",
  "body": "Our application uses Lua EVAL/EVALSHA to do most heavy lifting of logic that requires atomic database changes.\r\nDuring normal operation, Redis has a seemingly random chance to hang during the (only) `SRANDMEMBER` call of our Lua code when performing a background save (using either RDB or AOF) where it doesn't recover from even after the background save finishes.\r\nWe're unable to determine a solid reproduction case at this point since we can't pinpoint exactly what's causing it yet but across multiple GDB backtraces (below) we _believe_ that we were able to figure out that when Redis is hanging during the command call, it's always stuck in [this while loop](https://github.com/redis/redis/blob/7.0.11/src/t_set.c#L779-L793), although we're not 100% sure about that.\r\n\r\nThe version of Redis we're using is 7.0.11 running inside Docker with this configuration:\r\n```\r\nactivedefrag yes\r\nactive-defrag-ignore-bytes 100mb\r\nactive-defrag-threshold-lower 10\r\nactive-defrag-threshold-upper 50\r\nactive-defrag-cycle-min 1\r\nactive-defrag-cycle-max 25\r\nactive-defrag-max-scan-fields 10000\r\nlazyfree-lazy-eviction yes\r\nlazyfree-lazy-expire yes\r\nlazyfree-lazy-server-del yes\r\nreplica-lazy-flush yes\r\nlazyfree-lazy-user-del yes\r\nappendonly yes\r\nauto-aof-rewrite-percentage 100\r\nauto-aof-rewrite-min-size 1gb\r\nclient-output-buffer-limit slave 10737418240 1073741824 300\r\nbind 0.0.0.0\r\nport ${PORT}\r\nrequirepass ${PASS}\r\nsave ''\r\nlua-time-limit 5000\r\nbusy-reply-threshold 5000\r\n```\r\n\r\nNote that while we have AOF configured here with RDB being disabled, we also tried running this Redis server with AOF disabled and RDB set to snapshot every 5 minutes after 1 change. We also tried explicitly setting `lua-time-limit` and `busy-reply-threshold` in the startup configuration as well as setting `CONFIG SET watchdog-period 1000` during runtime but none of those has produced any usable logs at the time Redis became unresponsive.\r\n\r\nLogs indicate that the hangs always happen during a background save:\r\n\r\nAOF rewrite:\r\n```\r\n1:M 18 May 2023 12:46:34.929 * Starting automatic rewriting of AOF on 100% growth                                                                                          \r\n1:M 18 May 2023 12:46:34.930 * Creating AOF incr file appendonly.aof.4377.incr.aof on background rewrite\r\n1:M 18 May 2023 12:46:35.164 * Background append only file rewriting started by pid 59\r\n<Redis became unresponsive at 12:47:23>\r\n59:C 18 May 2023 12:47:37.119 * Successfully created the temporary AOF base file temp-rewriteaof-bg-59.aof\r\n59:C 18 May 2023 12:47:37.260 * Fork CoW for AOF rewrite: current 1572 MB, peak 1572 MB, average 818 MB\r\n```\r\n\r\nAOF rewrite:\r\n```\r\n1:M 19 May 2023 02:08:38.075 * Starting automatic rewriting of AOF on 100% growth\r\n1:M 19 May 2023 02:08:38.076 * Creating AOF incr file appendonly.aof.4385.incr.aof on background rewrite\r\n1:M 19 May 2023 02:08:38.345 * Background append only file rewriting started by pid 25\r\n<Redis became unresponsive at 02:08:50>\r\n25:C 19 May 2023 02:10:04.373 * Successfully created the temporary AOF base file temp-rewriteaof-bg-25.aof\r\n25:C 19 May 2023 02:10:04.591 * Fork CoW for AOF rewrite: current 605 MB, peak 605 MB, average 329 MB\r\n```\r\n\r\nRDB save:\r\n```\r\n1:M 19 May 2023 04:25:55.055 * 1 changes in 300 seconds. Saving...\r\n1:M 19 May 2023 04:25:55.374 * Background saving started by pid 28\r\n<Redis became unresponsive at 04:25:58>\r\n28:C 19 May 2023 04:27:20.861 * DB saved on disk\r\n28:C 19 May 2023 04:27:21.083 * Fork CoW for RDB: current 142 MB, peak 142 MB, average 96 MB\r\n```\r\n\r\n```\r\n2023-05-18T13:02:50+00:00\r\n#0  _dictKeyIndex (existing=0x0, hash=4486456289374595091, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1054\r\n#1  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#2  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#3  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:02:56+00:00\r\n#0  0x00007f56c792531f in random () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x00007f56c7925799 in rand () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#2  0x0000558d682d3764 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:797\r\n#3  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#4  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#5  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#6  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#7  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#8  0x0000558d683b9e88 in luaD_precall ()\r\n#9  0x0000558d683c4110 in luaV_execute ()\r\n#10 0x0000558d683ba525 in luaD_call ()\r\n#11 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#12 0x0000558d683ba6d0 in luaD_pcall ()\r\n#13 0x0000558d683b79f8 in lua_pcall ()\r\n#14 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#15 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#16 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#17 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#18 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#19 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#20 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#21 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#22 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#23 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#24 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#25 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:00+00:00\r\n#0  0x0000558d682d4abe in dictSdsKeyCompare (d=<optimized out>, key1=<optimized out>, key2=<optimized out>) at server.c:244\r\n#1  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=15826992378078849043, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#2  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#3  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#4  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#5  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#6  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#7  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#8  0x0000558d683b9e88 in luaD_precall ()\r\n#9  0x0000558d683c4110 in luaV_execute ()\r\n#10 0x0000558d683ba525 in luaD_call ()\r\n#11 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#12 0x0000558d683ba6d0 in luaD_pcall ()\r\n#13 0x0000558d683b79f8 in lua_pcall ()\r\n#14 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#15 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#16 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#17 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#18 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#19 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#20 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#21 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#22 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#23 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#24 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#25 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:05+00:00\r\n#0  0x0000558d682e30b9 in sdsfree (s=<optimized out>) at sds.c:196\r\n#1  0x0000558d68318938 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:792\r\n#2  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#3  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#4  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#5  0x0000558d683b9e88 in luaD_precall ()\r\n#6  0x0000558d683c4110 in luaV_execute ()\r\n#7  0x0000558d683ba525 in luaD_call ()\r\n#8  0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#9  0x0000558d683ba6d0 in luaD_pcall ()\r\n#10 0x0000558d683b79f8 in lua_pcall ()\r\n#11 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#12 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#13 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#14 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#15 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#16 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#17 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#18 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#19 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#20 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#21 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#22 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:10+00:00\r\n#0  dictGetSomeKeys (d=d@entry=0x7f552a142cf8, des=0x7ffc86daaac0, des@entry=0x7ffc86daaaa0, count=<optimized out>, count@entry=15) at dict.c:764\r\n#1  0x0000558d682d3759 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:791\r\n#2  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#3  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:16+00:00\r\n#0  sz_index2size_lookup (index=1) at include/jemalloc/internal/sz.h:199\r\n#1  sz_index2size (index=1) at include/jemalloc/internal/sz.h:207\r\n#2  arena_salloc (ptr=<optimized out>, tsdn=<optimized out>) at include/jemalloc/internal/arena_inlines_b.h:195\r\n#3  isalloc (ptr=<optimized out>, tsdn=<optimized out>) at include/jemalloc/internal/jemalloc_internal_inlines_c.h:38\r\n#4  je_malloc_usable_size (ptr=ptr@entry=0x7f56906063c0) at src/jemalloc.c:3740\r\n#5  0x0000558d682e69fe in zfree (ptr=0x7f56906063c0) at zmalloc.c:372\r\n#6  zfree (ptr=0x7f56906063c0) at zmalloc.c:364\r\n#7  0x0000558d68318938 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:792\r\n#8  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#9  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#10 0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#11 0x0000558d683b9e88 in luaD_precall ()\r\n#12 0x0000558d683c4110 in luaV_execute ()\r\n#13 0x0000558d683ba525 in luaD_call ()\r\n#14 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#15 0x0000558d683ba6d0 in luaD_pcall ()\r\n#16 0x0000558d683b79f8 in lua_pcall ()\r\n#17 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#18 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#19 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#20 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#21 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#22 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#23 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#24 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#25 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#26 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#27 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#28 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:20+00:00\r\n#0  0x00007f56c7a42a31 in ?? () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x0000558d682d4ab2 in dictSdsKeyCompare (d=<optimized out>, key1=<optimized out>, key2=<optimized out>) at server.c:243\r\n#2  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=16039903783278520339, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:24+00:00\r\n#0  dictGetSomeKeys (d=d@entry=0x7f552a142cf8, des=des@entry=0x7ffc86daaaa0, count=<optimized out>, count@entry=15) at dict.c:738\r\n#1  0x0000558d682d3759 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:791\r\n#2  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#3  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:29+00:00\r\n#0  dictGetSomeKeys (d=d@entry=0x7f552a142cf8, des=0x7ffc86daab00, des@entry=0x7ffc86daaaa0, count=<optimized out>, count@entry=15) at dict.c:733\r\n#1  0x0000558d682d3759 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:791\r\n#2  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#3  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:34+00:00\r\n#0  0x0000558d682d27be in dictTypeExpandAllowed (d=0x7f549517e318) at dict.c:989\r\n#1  _dictExpandIfNeeded (d=0x7f549517e318) at dict.c:1008\r\n#2  _dictKeyIndex (existing=0x0, hash=4334487920869140499, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1048\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:38+00:00\r\n#0  0x0000558d682d4a7d in sdslen (s=0x7f56909d2311 \"i:blZ7htj\") at sds.h:89\r\n#1  dictSdsKeyCompare (d=<optimized out>, key1=0x7f56906063c1, key2=0x7f56909d2311) at server.c:241\r\n#2  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=2834940632465860627, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:44+00:00\r\n#0  dictGetSomeKeys (d=d@entry=0x7f552a142cf8, des=0x7ffc86daaac0, des@entry=0x7ffc86daaaa0, count=<optimized out>, count@entry=15) at dict.c:768\r\n#1  0x0000558d682d3759 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:791\r\n#2  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#3  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:03:51+00:00\r\n#0  0x00007f56c7a42a28 in ?? () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x0000558d682d4ab2 in dictSdsKeyCompare (d=<optimized out>, key1=<optimized out>, key2=<optimized out>) at server.c:243\r\n#2  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=1090945667569254371, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:04:13+00:00\r\n#0  zfree (ptr=0x7f56906063c0) at zmalloc.c:373\r\n#1  zfree (ptr=0x7f56906063c0) at zmalloc.c:364\r\n#2  0x0000558d68318938 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:792\r\n#3  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#4  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#5  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#6  0x0000558d683b9e88 in luaD_precall ()\r\n#7  0x0000558d683c4110 in luaV_execute ()\r\n#8  0x0000558d683ba525 in luaD_call ()\r\n#9  0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#10 0x0000558d683ba6d0 in luaD_pcall ()\r\n#11 0x0000558d683b79f8 in lua_pcall ()\r\n#12 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#13 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#14 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#15 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#16 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#17 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#18 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#19 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#20 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#21 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#22 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#23 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:04:17+00:00\r\n#0  0x0000558d682d35d9 in dictGetSomeKeys (d=d@entry=0x7f552a142cf8, des=des@entry=0x7ffc86daaaa0, count=<optimized out>, count@entry=15) at dict.c:755\r\n#1  0x0000558d682d3759 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:791\r\n#2  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#3  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:04:23+00:00\r\n#0  0x00007f56c7a42a24 in ?? () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x0000558d682d4ab2 in dictSdsKeyCompare (d=<optimized out>, key1=<optimized out>, key2=<optimized out>) at server.c:243\r\n#2  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=17057246290930548707, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:04:27+00:00\r\n#0  0x00007f56c7925330 in random () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x00007f56c7925799 in rand () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#2  0x0000558d682d3764 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:797\r\n#3  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#4  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#5  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#6  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#7  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#8  0x0000558d683b9e88 in luaD_precall ()\r\n#9  0x0000558d683c4110 in luaV_execute ()\r\n#10 0x0000558d683ba525 in luaD_call ()\r\n#11 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#12 0x0000558d683ba6d0 in luaD_pcall ()\r\n#13 0x0000558d683b79f8 in lua_pcall ()\r\n#14 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#15 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#16 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#17 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#18 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#19 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#20 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#21 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#22 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#23 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#24 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#25 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:04:32+00:00\r\n#0  0x00007f56c7925712 in random_r () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x00007f56c79252dd in random () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#2  0x00007f56c7925799 in rand () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#3  0x0000558d682d3764 in dictGetFairRandomKey (d=0x7f552a142cf8) at dict.c:797\r\n#4  0x0000558d683179b9 in setTypeRandomElement (setobj=0x7f563c36d7c0, sdsele=0x7ffc86daab80, llele=0x7ffc86daab88) at t_set.c:213\r\n#5  0x0000558d68318889 in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:780\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:21:03+00:00\r\n#0  0x00007f56c7a42a28 in ?? () from target:/lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x0000558d682d4ab2 in dictSdsKeyCompare (d=<optimized out>, key1=<optimized out>, key2=<optimized out>) at server.c:243\r\n#2  0x0000558d682d2904 in _dictKeyIndex (existing=0x0, hash=18240379238795239395, key=0x7f56906063c1, d=0x7f549517e318) at dict.c:1055\r\n#3  dictAddRaw (d=0x7f549517e318, key=0x7f56906063c1, existing=0x0) at dict.c:337\r\n#4  0x0000558d682d2b01 in dictAdd (d=d@entry=0x7f549517e318, key=key@entry=0x7f56906063c1, val=val@entry=0x0) at dict.c:302\r\n#5  0x0000558d6831885e in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:789\r\n#6  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#7  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#8  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#9  0x0000558d683b9e88 in luaD_precall ()\r\n#10 0x0000558d683c4110 in luaV_execute ()\r\n#11 0x0000558d683ba525 in luaD_call ()\r\n#12 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#13 0x0000558d683ba6d0 in luaD_pcall ()\r\n#14 0x0000558d683b79f8 in lua_pcall ()\r\n#15 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#16 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#17 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#18 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#19 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#20 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#21 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#22 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#23 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#24 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#25 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#26 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n\r\n2023-05-18T13:32:52+00:00\r\n#0  extend_to_usable (ptr=ptr@entry=0x7f56906063c0, size=size@entry=16) at zmalloc.c:107\r\n#1  0x0000558d682e6320 in zmalloc_usable (size=size@entry=11, usable=usable@entry=0x7ffc86daab18) at zmalloc.c:162\r\n#2  0x0000558d682e2dc3 in _sdsnewlen (init=0x7f56004947b1, initlen=9, trymalloc=<optimized out>) at sds.c:117\r\n#3  0x0000558d6831884a in srandmemberWithCountCommand (c=0x7f56c7525000) at t_set.c:784\r\n#4  0x0000558d682d94db in call (c=c@entry=0x7f56c7525000, flags=15) at server.c:3385\r\n#5  0x0000558d683a68fd in scriptCall (run_ctx=run_ctx@entry=0x7ffc86dab0f0, err=err@entry=0x7ffc86daaca8) at script.c:570\r\n#6  0x0000558d683a4756 in luaRedisGenericCommand (lua=0x558d69f537f0, raise_error=1) at script_lua.c:936\r\n#7  0x0000558d683b9e88 in luaD_precall ()\r\n#8  0x0000558d683c4110 in luaV_execute ()\r\n#9  0x0000558d683ba525 in luaD_call ()\r\n#10 0x0000558d683b9858 in luaD_rawrunprotected ()\r\n#11 0x0000558d683ba6d0 in luaD_pcall ()\r\n#12 0x0000558d683b79f8 in lua_pcall ()\r\n#13 0x0000558d683a5ddb in luaCallFunction (run_ctx=0x7ffc86dab0f0, lua=0x558d69f537f0, keys=0x7f56c7434668, nkeys=0, args=0x7f56c7434668, nargs=10, debug_enabled=0) at script_lua.c:1678\r\n#14 0x0000558d6834c503 in evalGenericCommand (c=0x7f56aff39a00, evalsha=1) at eval.c:553\r\n#15 0x0000558d682d94db in call (c=c@entry=0x7f56aff39a00, flags=flags@entry=15) at server.c:3385\r\n#16 0x0000558d682dbca5 in processCommand (c=c@entry=0x7f56aff39a00) at server.c:4019\r\n#17 0x0000558d682f36ee in processCommandAndResetClient (c=0x7f56aff39a00) at networking.c:2473\r\n#18 processInputBuffer (c=0x7f56aff39a00) at networking.c:2577\r\n#19 0x0000558d682f65e0 in readQueryFromClient (conn=<optimized out>) at networking.c:2713\r\n#20 0x0000558d6839ebc8 in callHandler (handler=<optimized out>, conn=0x7f552bb06380) at connhelpers.h:79\r\n#21 connSocketEventHandler (el=<optimized out>, fd=<optimized out>, clientData=0x7f552bb06380, mask=<optimized out>) at connection.c:310\r\n#22 0x0000558d682d099a in aeProcessEvents (eventLoop=eventLoop@entry=0x7f56c742b1e0, flags=flags@entry=27) at ae.c:436\r\n#23 0x0000558d682d0d3d in aeMain (eventLoop=0x7f56c742b1e0) at ae.c:496\r\n#24 0x0000558d682cc5f1 in main (argc=<optimized out>, argv=0x7ffc86dab498) at server.c:7168\r\n```\r\n\r\n[Here](https://github.com/redis/redis/files/11513911/logs.txt) is also the output of `ltrace -ffs256 -p<pid>` of the hanging Redis process.",
  "state": "closed",
  "created_at": "2023-05-19T04:04:06Z",
  "updated_at": "2023-06-16T16:13:09Z",
  "closed_at": "2023-06-16T16:13:09Z",
  "labels": [],
  "comments_data": [
    {
      "id": 1554133327,
      "user": "sundb",
      "created_at": "2023-05-19T07:13:17Z",
      "body": "@Fusl Can you provide the parameters of the `srandmember` command and the length of this key? \r\nMy guess is that the `dictAdd()` is abnormally slow because the rehash of the dictionary is suspended during the rdb saving or aof rewrite."
    },
    {
      "id": 1554450702,
      "user": "Fusl",
      "created_at": "2023-05-19T11:44:47Z",
      "body": "I can't exactly tell the parameters of the `srandmember` call since most of the decision logic happens during runtime in the Lua script but from a quick `monitor` I can see that we're limiting the call to a max count of 30 at this time, however, the count can be lower than that as well:\r\n```\r\n1684496276.975048 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496276.980532 [0 lua] \"srandmember\" \"imgur:todo\" \"10\"\r\n1684496276.981337 [0 lua] \"srandmember\" \"imgur:todo\" \"27\"\r\n1684496276.982097 [0 lua] \"srandmember\" \"imgur:todo\" \"3\" \r\n1684496276.995408 [0 lua] \"srandmember\" \"imgur:todo\" \"15\"\r\n1684496276.996122 [0 lua] \"srandmember\" \"imgur:todo\" \"7\" \r\n1684496276.996658 [0 lua] \"srandmember\" \"imgur:todo\" \"11\"\r\n1684496276.997268 [0 lua] \"srandmember\" \"imgur:todo\" \"2\" \r\n1684496277.008314 [0 lua] \"srandmember\" \"imgur:todo\" \"27\"\r\n1684496277.012712 [0 lua] \"srandmember\" \"imgur:todo\" \"13\"\r\n1684496277.036401 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.065458 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.070976 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.071830 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.073522 [0 lua] \"srandmember\" \"imgur:todo\" \"22\"\r\n1684496277.081004 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.082138 [0 lua] \"srandmember\" \"imgur:todo\" \"1\" \r\n1684496277.093768 [0 lua] \"srandmember\" \"imgur:todo\" \"29\"\r\n1684496277.103692 [0 lua] \"srandmember\" \"imgur:todo\" \"25\"\r\n1684496277.118868 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n1684496277.125603 [0 lua] \"srandmember\" \"imgur:todo\" \"18\"\r\n1684496277.134662 [0 lua] \"srandmember\" \"imgur:todo\" \"28\"\r\n1684496277.145458 [0 lua] \"srandmember\" \"imgur:todo\" \"27\"\r\n1684496277.149010 [0 lua] \"srandmember\" \"imgur:todo\" \"12\"\r\n1684496277.156520 [0 lua] \"srandmember\" \"imgur:todo\" \"13\"\r\n1684496277.177948 [0 lua] \"srandmember\" \"imgur:todo\" \"30\"\r\n```\r\nThe current `scard` of this key is `5747349`. Do note though that the Lua script that executes the `srandmember` also immediately afterwards does a `srem` after making some further decisions on the set member string, so it's quite possible that this set was a little larger than reporting this bug initially, but still well below 10M entries."
    },
    {
      "id": 1554460464,
      "user": "sundb",
      "created_at": "2023-05-19T11:54:05Z",
      "body": "@Fusl Thx, Can you also provide the output of `INFO ALL` and `SLOWLOG GET`? \r\nMaybe also include lua scripts if possible."
    },
    {
      "id": 1554476660,
      "user": "Fusl",
      "created_at": "2023-05-19T12:08:07Z",
      "body": "[`info all`](https://github.com/redis/redis/files/11516651/info_all.txt)\r\n[`slowlog get`](https://github.com/redis/redis/files/11516649/slowlog_get.txt)\r\n[`script.lua`](https://github.com/redis/redis/files/11516650/project_request.content.eval0.lua.txt)\r\n"
    },
    {
      "id": 1554480231,
      "user": "Fusl",
      "created_at": "2023-05-19T12:11:38Z",
      "body": "Note that we're currently running Redis without `activedefrag yes` to see if that's maybe causing issues for us and it's been chugging along since 6 hours again. However, that also doesn't mean a lot since Redis has been happy for a few days before suddenly not being happy anymore and hanging multiple times within an hour after restarting the container."
    },
    {
      "id": 1555963468,
      "user": "oranagra",
      "created_at": "2023-05-20T18:05:16Z",
      "body": "@sundb your theory is interesting. It means that srandmember isn't hand, it just becomes slower during fork, and then when run repeatedly it looks like it's hand.\nThis rehashing prevention is something that was changed in one of the recent versions.\nAnyway, if that's that, it should be easy to fix, by pre-expanding the dict.\n@Fusl let us know if you'll be able to test a patch to prove it."
    },
    {
      "id": 1555968338,
      "user": "Fusl",
      "created_at": "2023-05-20T18:33:36Z",
      "body": "I can test a patch if given in form of a Docker image."
    },
    {
      "id": 1556056655,
      "user": "enjoy-binbin",
      "created_at": "2023-05-21T01:13:18Z",
      "body": "I see we did call dictExpand first, this is an empty dict, so it will skip the rehash and then finish the expand.\r\nthe count is 30, so this dictionary should also be small\r\n\r\nhttps://github.com/redis/redis/blob/7.0.11/src/t_set.c#L774-L794\r\n```\r\n    /* CASE 4: We have a big set compared to the requested number of elements.\r\n     * In this case we can simply get random elements from the set and add\r\n     * to the temporary set, trying to eventually get enough unique elements\r\n     * to reach the specified count. */\r\n    else {\r\n        unsigned long added = 0;\r\n        sds sdsele;\r\n\r\n        dictExpand(d, count);\r\n        while (added < count) {\r\n            encoding = setTypeRandomElement(set,&ele,&llele);\r\n            if (encoding == OBJ_ENCODING_INTSET) {\r\n                sdsele = sdsfromlonglong(llele);\r\n            } else {\r\n                sdsele = sdsdup(ele);\r\n            }\r\n            /* Try to add the object to the dictionary. If it already exists\r\n             * free it, otherwise increment the number of objects we have\r\n             * in the result dictionary. */\r\n            if (dictAdd(d,sdsele,NULL) == DICT_OK)\r\n                added++;\r\n            else\r\n                sdsfree(sdsele);\r\n        }\r\n    }\r\n```"
    },
    {
      "id": 1556086977,
      "user": "Fusl",
      "created_at": "2023-05-21T05:23:39Z",
      "body": "From looking through the `logs.txt` ltrace file attached in my initial bug report post it looks like it's getting stuck in this while loop because it keeps missing the `if (dictAdd(d,sdsele,NULL) == DICT_OK)` condition because `setTypeRandomElement` keeps returning the same entries repeatedly, thus ending up in an infinite loop condition:\r\n```\r\n~/Downloads > cat logs.txt | fgrep memcpy | cut -d'\"' -f2 | head\r\ni:D8ZgAFd\r\ni:kub6c1U\r\ni:8FOvrOb\r\ni:JOy6XF6\r\ni:kub6c1U\r\ni:3EoJJ9A\r\ni:2j8F8yR\r\ni:8FOvrOb\r\ni:Ca0vivs\r\ni:cjfhC8r\r\n```\r\n```\r\n~/Downloads > cat logs.txt | fgrep memcpy | cut -d'\"' -f2 | wc -l\r\n4021\r\n```\r\n```\r\n~/Downloads > cat logs.txt | fgrep memcpy | cut -d'\"' -f2 | sort -u | wc -l\r\n29\r\n```\r\n```\r\n~/Downloads > cat logs.txt | fgrep memcpy | cut -d'\"' -f2 | sort | uniq -c | sort -nk1,1\r\n     99 i:cjfhC8r\r\n    114 i:0MbpsVS\r\n    118 i:Y50L9kv\r\n    122 i:JOy6XF6\r\n    123 i:iLsWxYn\r\n    123 i:vLH6ekx\r\n    124 i:47TNxEw\r\n    125 i:D8ZgAFd\r\n    126 i:0KJoCZD\r\n    126 i:2j8F8yR\r\n    126 i:THCgaW5\r\n    132 i:TujMofJ\r\n    132 i:dUZXiJy\r\n    133 i:bON8Faw\r\n    136 i:Ca0vivs\r\n    136 i:Spz2BLF\r\n    141 i:7rwtfe7\r\n    141 i:Dtb2VA7\r\n    141 i:KzxS7Zx\r\n    141 i:S99DlMj\r\n    144 i:Bd0HtRi\r\n    144 i:sloc6wM\r\n    150 i:iOLgwqS\r\n    151 i:3EoJJ9A\r\n    151 i:kub6c1U\r\n    152 i:YrguwbM\r\n    154 i:g7rKNjj\r\n    163 i:O1ezsVh\r\n    253 i:8FOvrOb\r\n```"
    },
    {
      "id": 1556202583,
      "user": "oranagra",
      "created_at": "2023-05-21T15:06:41Z",
      "body": "The only reason i can think of that setTypeRandomElement will return the same elements many times if if the dict's hash table is seriously too small (maybe if there are constantly forks, and _dictExpandIfNeeded never happens).\r\n\r\nit would be nice if we could print the size of the hash table, but sadly, it looks like the only way to do that is by DEBUG HTSTAT-KEY, but that one is also printing bucket statistics, which will take too long to gather on this key (could cause redis to hang).\r\n\r\nmaybe we can patch redis to have a light version of HTSTAT, one that just prints the sizes of the hash tables. but it would mean restarting the server and hoping to still be able to reproduce this."
    },
    {
      "id": 1557222305,
      "user": "oranagra",
      "created_at": "2023-05-22T13:26:57Z",
      "body": "i've run a test to see how long would `DEBUG HTSTAT-KEY` take.\r\non 5m entries it took me roughly 100ms, and on 15m it took some 400ms.\r\nso maybe that's acceptable for you to try."
    },
    {
      "id": 1559059470,
      "user": "sundb",
      "created_at": "2023-05-23T10:58:08Z",
      "body": "@Fusl Did you do a lot of delete operations(srem or spop) on this set?"
    },
    {
      "id": 1559064540,
      "user": "Fusl",
      "created_at": "2023-05-23T11:01:08Z",
      "body": "Yes, this set is in constant movement with millions of items getting added and removed every few minutes. At this very moment, the set is empty because of the project behind it having run out of data to process, so I can't easily reproduce the original issue."
    },
    {
      "id": 1560754386,
      "user": "sundb",
      "created_at": "2023-05-24T09:20:50Z",
      "body": "```c\r\n#define HASHTABLE_MIN_FILL        10      /* Minimal hash table fill 10% */\r\nint dictNeedsResize(dict *dict) {\r\n    long long size, used;\r\n\r\n    size = dictSlots(dict);\r\n    used = dictSize(dict);\r\n    return (size > DICT_HT_INITIAL_SIZE &&\r\n            (used*100/size < HASHTABLE_MIN_FILL));\r\n}\r\n\r\nvoid test() {\r\n    dict *dict_ret = dictCreate(&BenchmarkDictType);\r\n    dict *dict = dictCreate(&BenchmarkDictType);\r\n    long count = 5000000;\r\n    char buf[4096];\r\n    init_genrand64(1684911460);\r\n\r\n    /* Create a dict with 5,000,000 elements */\r\n    dictSetResizeEnabled(DICT_RESIZE_AVOID);\r\n    for (int j = 0; j < count; j++) {\r\n        int retval = dictAdd(dict,stringFromLongLong(j),(void*)j);\r\n        assert(retval == DICT_OK);\r\n    }\r\n    assert((long)dictSize(dict) == count);\r\n\r\n    /* Wait for rehashing. */\r\n    while (dictIsRehashing(dict)) {\r\n        dictRehashMilliseconds(dict,100);\r\n    }\r\n\r\n    /* Delete to 10,000 elements left. */\r\n    int del = 4990000;\r\n    while (del--) {\r\n        dictEntry *de = dictGetRandomKey(dict);\r\n        char *str = dictGetKey(de);\r\n        assert((dictDelete(dict, str) == DICT_OK));\r\n    }\r\n\r\n    /* Restart rehash */\r\n    dictSetResizeEnabled(DICT_RESIZE_ENABLE);\r\n    assert(dictNeedsResize(dict));\r\n    dictResize(dict);\r\n    dictRehashNum(dict, 93900);\r\n\r\n    /* Print ht stats */\r\n    dictGetStats(buf,sizeof(buf),dict,1);\r\n    printf(\"%s\\n\", buf);\r\n    printf(\"dict->rehashidx: %d\\n\", dict->rehashidx);\r\n\r\n    /* Disable rehash and get random keys from this dict */\r\n    dictSetResizeEnabled(DICT_RESIZE_AVOID);\r\n    for (int i = 0; i < 1000; i++) {\r\n        dictEntry *de = dictGetFairRandomKey(dict);\r\n        char *str = dictGetKey(de);\r\n        dictAdd(dict_ret, zstrdup(str), NULL);\r\n        // printf(\"random key: %s\\n\", str);\r\n    }\r\n    printf(\"unique dict size: %ld\\n\", dictSize(dict_ret));\r\n\r\n    dictRelease(dict); \r\n    dictRelease(dict_ret);\r\n}\r\n```\r\n\r\nOutput:\r\n```sh\r\nHash table 0 stats (main hash table):\r\n table size: 1048576\r\n number of elements: 1066\r\n different slots: 538\r\n max chain length: 7\r\n avg chain length (counted): 1.98\r\n avg chain length (computed): 1.98\r\n Chain length distribution:\r\n   0: 1048038 (99.95%)\r\n   1: 249 (0.02%)\r\n   2: 151 (0.01%)\r\n   3: 75 (0.01%)\r\n   4: 37 (0.00%)\r\n   5: 17 (0.00%)\r\n   6: 6 (0.00%)\r\n   7: 3 (0.00%)\r\nHash table 1 stats (rehashing target):\r\n table size: 16384\r\n number of elements: 8934\r\n different slots: 4172\r\n max chain length: 15\r\n avg chain length (counted): 2.14\r\n avg chain length (computed): 2.14\r\n Chain length distribution:\r\n   0: 12212 (74.54%)\r\n   1: 1865 (11.38%)\r\n   2: 1108 (6.76%)\r\n   3: 552 (3.37%)\r\n   4: 335 (2.04%)\r\n   5: 163 (0.99%)\r\n   6: 78 (0.48%)\r\n   7: 36 (0.22%)\r\n   8: 14 (0.09%)\r\n   9: 12 (0.07%)\r\n   10: 5 (0.03%)\r\n   11: 1 (0.01%)\r\n   13: 2 (0.01%)\r\n   15: 1 (0.01%)\r\n\r\ndict->rehashidx: 943760\r\nunique dict size: 71\r\n```\r\n\r\n## Steps:\r\n1) Disable rehash (set dict_can_resize to DICT_RESIZE_AVOID)\r\n2) Create a dict with 5,000,000 elements and rehash it.\r\n3) Delete the elements of this dictionary to 100,000.\r\n4) Enable rehash (set dict_can_resize to DICT_RESIZE_ENABLE)\r\n5) Rehash the dict so that `rehashidx` goes as far as possible to the end of dict[0].\r\n    In the above example, let the `rehashidx` reach 943760, the maximum is 1048576.\r\n6) Get 1000 random keys from this dict.\r\n\r\nFrom the above logs, we can find that we get 1000 random keys from the dict, but only 71 unique keys in the end.\r\n\r\nhttps://github.com/redis/redis/blob/d71478a889935382f3bf8b9a39ab073eba0a856a/src/dict.c#L1079:L1080\r\nThe reason is that when the dict shrinks and the `rehashidx` is very close to the size of dict[0], the code will most likely enter the branch above.\r\n\r\nhttps://github.com/redis/redis/blob/d71478a889935382f3bf8b9a39ab073eba0a856a/src/dict.c#L298:L302\r\nThis issue is probably introduced by #11692, when `dict_can_resize` is set to `DICT_RESIZE_AVOID`, the above code only considers the expansion case and still allows rehash, but ignores the shrinking case.\r\n\r\nTry using the following patch to fix and the example will be fine.\r\n```diff\r\n-    if (dict_can_resize == DICT_RESIZE_FORBID || !dictIsRehashing(d)) return 0;\r\n+    unsigned long s0 = DICTHT_SIZE(d->ht_size_exp[0]);\r\n+    unsigned long s1 = DICTHT_SIZE(d->ht_size_exp[1]);\r\n     if (dict_can_resize == DICT_RESIZE_AVOID && \r\n-        (DICTHT_SIZE(d->ht_size_exp[1]) / DICTHT_SIZE(d->ht_size_exp[0]) < dict_force\r\n_resize_ratio))\r\n+        ((s1 > s0 && s1 / s0 < dict_force_resize_ratio) ||\r\n+         (s1 < s0 && s0 / s1 < dict_force_resize_ratio)))\r\n```\r\n\r\nBTW: I still can't simulate the above result using commands."
    },
    {
      "id": 1561003382,
      "user": "Fusl",
      "created_at": "2023-05-24T12:09:43Z",
      "body": "Some more background information: The configuration of our application has a high and low watermark where the application tries to keep a set filled with items to satisfy the boundaries of the high and low watermark. That high/low is currently configured as 30M/1M so if the amount of items in the set falls below 1M it will start filling that set with items until it reaches 30M items at which point it will stop filling it again. I wonder if that behavior of our application is something that's just accelerating some kind of race condition (maybe not race condition but I lack the in-depth understanding of what's going on to find a better word for it) to surface as the bug we're seeing."
    },
    {
      "id": 1562490700,
      "user": "sundb",
      "created_at": "2023-05-25T08:23:34Z",
      "body": "An accidental reappearance:\r\nI use `srandmember` command to let the `rehashidx` of the hash as close to 131072 as possible.\r\nIt means that the speculation in the comment https://github.com/redis/redis/issues/12200#issuecomment-1560754386 is reasonable.\r\n\r\nthe status of this set key:\r\ncurrent hash `rehashidx`: 130296.\r\n```\r\n127.0.0.1:6379> debug HTSTATS-KEY s full\r\nHash table 0 stats (main hash table).\r\n table size: 131072\r\n number of elements: 9\r\n different slots: 5\r\n max chain length: 3\r\n avg chain length (counted): 1.80\r\n avg chain length (computed): 1.80\r\n Chain length distribution.\r\n   0: 131067 (100.00%)\r\n   1: 2 (0.00%)\r\n   2: 2 (0.00%)\r\n   3: 1 (0.00%)\r\nHash table 1 stats (rehashing target).\r\n table size: 1024\r\n number of elements: 970\r\n different slots: 11\r\n max chain length: 117\r\n avg chain length (counted): 88.18\r\n avg chain length (computed): 88.18\r\n Chain length distribution.\r\n   0: 1013 (98.93%)\r\n   25: 1 (0.10%)\r\n```\r\n\r\nCommand and output:\r\n```\r\n127.0.0.1:6379> srandmember s 110\r\n  1) \"m:81564\"\r\n  2) \"m:55787\"\r\n  3) \"m:63276\"\r\n  4) \"m:86639\"\r\n  5) \"m:74482\"\r\n  6) \"m:41890\"\r\n  7) \"m:54130\"\r\n  8) \"m:90807\"\r\n  ...\r\n  (2.98s)     <- too long\r\n```\r\n\r\n"
    },
    {
      "id": 1562495508,
      "user": "sundb",
      "created_at": "2023-05-25T08:26:53Z",
      "body": "@Fusl Can you use this patch to verify if it will be reproduced again?\r\n```diff\r\ndiff --git a/src/dict.c b/src/dict.c\r\nindex ebd431d4..c2e471b7 100644\r\n--- a/src/dict.c\r\n+++ b/src/dict.c\r\n@@ -294,9 +294,11 @@ int dictTryExpand(dict *d, unsigned long size) {\r\n  * work it does would be unbound and the function may block for a long time. */\r\n int dictRehash(dict *d, int n) {\r\n     int empty_visits = n*10; /* Max number of empty buckets to visit. */\r\n-    if (dict_can_resize == DICT_RESIZE_FORBID || !dictIsRehashing(d)) return 0;\r\n+    unsigned long s0 = DICTHT_SIZE(d->ht_size_exp[0]);\r\n+    unsigned long s1 = DICTHT_SIZE(d->ht_size_exp[1]);\r\n     if (dict_can_resize == DICT_RESIZE_AVOID && \r\n-        (DICTHT_SIZE(d->ht_size_exp[1]) / DICTHT_SIZE(d->ht_size_exp[0]) < dict_force_resize_ratio))\r\n+        ((s1 > s0 && s1 / s0 < dict_force_resize_ratio) ||\r\n+         (s1 < s0 && s0 / s1 < dict_force_resize_ratio)))\r\n     {\r\n         return 0;\r\n     }\r\n```"
    },
    {
      "id": 1562640271,
      "user": "Fusl",
      "created_at": "2023-05-25T10:09:24Z",
      "body": "I can use this patch but I can't get a reproduction case together that will cause this behavior to happen again."
    },
    {
      "id": 1563003032,
      "user": "oranagra",
      "created_at": "2023-05-25T14:24:07Z",
      "body": "@sundb first, good job reproducing it. i suppose you did it while there is a fork child?\r\nsecondly, how exactly did you produce that table?\r\ni see it's down sizing, and the original (bigger) one is nearly empty (was probably already nearly empty before rehashing), but what i don't understand is how come the new (smaller) one has such a long chain.\r\ndid you use SSCAN to delete members?\r\n\r\nregarding the fix, maybe it would be possible to improve dictGetSomeKeys, but i suppose long chains would still mean we never sample from the end of the chain.\r\n\r\nregarding the fix you're proposing, \r\n1. we should still respect FORBID, we don't want the fork child to do any re-hashing.\r\n2. downsizing happens at x/10, so checking `dict_force_resize_ratio` (5) seems pointless."
    },
    {
      "id": 1563757259,
      "user": "sundb",
      "created_at": "2023-05-26T03:12:10Z",
      "body": "> @sundb first, good job reproducing it. i suppose you did it while there is a fork child? secondly, how exactly did you produce that table? i see it's down sizing, and the original (bigger) one is nearly empty (was probably already nearly empty before rehashing), but what i don't understand is how come the new (smaller) one has such a long chain. did you use SSCAN to delete members?\r\n\r\nYes, using `SSCAN` to delete members.\r\nI did this because I wanted the members of dict[0] to be concentrated at the end as much as possible.\r\n\r\nConfig:\r\n```\r\nenable-debug-command yes\r\nsave \"\"\r\nset-max-listpack-entries 0\r\nrdb-key-save-delay 2147483647\r\n```\r\n\r\nSteps:\r\n1) Use python to create a dict just in time to start shrinking and start rehashing.\r\n```py\r\nimport redis\r\nimport os\r\n\r\ndef is_rehashing(r):\r\n    resp = r.execute_command(\"debug\", \"HTSTATS-KEY\", \"s\", \"full\")\r\n    return resp.find(\"rehashing target\") != -1\r\n\r\nr = redis.Redis(host='localhost', port=6379, decode_responses=True)\r\nr.flushdb()\r\n\r\npipeline = r.pipeline()\r\nfor num in range(0,100000):\r\n    pipeline.sadd(\"s\", \"m:\" + str(num))\r\npipeline.execute()\r\n\r\nwhile is_rehashing(r):\r\n    r.srandmember(\"s\", 100)\r\n\r\nr.bgsave()\r\n\r\nprint(is_rehashing(r))\r\npipeline = r.pipeline()\r\ncount = 0\r\ncursor = 0\r\nwhile count < 99000:\r\n    resp = r.sscan(\"s\", cursor)\r\n    cursor = resp[0]\r\n    for m in resp[1]:\r\n        count += 1\r\n        pipeline.srem(\"s\", m)\r\npipeline.execute()\r\n\r\nos.system(\"pgrep -f redis-rdb-bgsave | xargs kill -9\")\r\n\r\nwhile is_rehashing(r) == False:\r\n    r.spop(\"s\")\r\n```\r\n\r\n2) Manually execute `srandmember s <count>` to rehash this dict \r\n    to let its `rehashidx` close to dict[0]'s maxsizemask(131071).\r\n3) `BGSAVE` to stop rehash.\r\n\r\nIf at this time, the elements of dict[0] are concentrated after `rehashidx`, `srandmember` will have a probability of 0.0078(1024/131071) to randomly find duplicate members all the time.\r\nTheoretically, if there are GETFAIR_NUM_ENTRIES(15) members exactly after the rehashidx, `srandmember` will probably die loop."
    },
    {
      "id": 1563766386,
      "user": "sundb",
      "created_at": "2023-05-26T03:32:06Z",
      "body": "> 2. downsizing happens at x/10, so checking `dict_force_resize_ratio` (5) seems pointless.\r\n\r\nThe resize occurs when (used/size) /10 of dict[0], but dict_force_resize_ratio(5) is between dict_size_0 and dict_size_1, they don't conflict with each other.\r\nIn the above example:\r\nbefore rehash\r\n```\r\ntable used: 979\r\ntable size: 131072\r\n\r\n(131072 / 979) /10 = 13.38, start rehash.\r\n```\r\n\r\nstart rehash\r\n```\r\ntable 1 size: 131072\r\ntable 2 size: 1024\r\n\r\n(131072 / 1024) = 138, I think this dict still can rehash.\r\n```\r\n"
    },
    {
      "id": 1563857213,
      "user": "oranagra",
      "created_at": "2023-05-26T06:10:12Z",
      "body": "Ok. SCAN+DEL is a recipe for trouble (not just for rehashing, but also SCAN, RAND, eviction, etc).\nBut is that really what @Fusl did?\n\nSo before #11692 both the fork child and the parent could keep incremental rehashing during fork, and besides blocking the fork child from doing it, I also prevented the parent from doing it unless we need an extreme upscale, but we should have also allowed down scale. Right?\nThe FORBID part should be kept, and this fix should be taken to several versions."
    },
    {
      "id": 1563875146,
      "user": "sundb",
      "created_at": "2023-05-26T06:32:47Z",
      "body": "> Ok. SCAN+DEL is a recipe for trouble (not just for rehashing, but also SCAN, RAND, eviction, etc). But is that really what @Fusl did?\r\n\r\nBecause i saw a lot of `SSCAN` commands  in `INFO ALL` posted in https://github.com/redis/redis/issues/12200#issuecomment-1554476660\r\n```\r\ncmdstat_srem:calls=1914081,usec=56042921,usec_per_call=29.28,rejected_calls=0,failed_calls=0\r\ncmdstat_sscan:calls=804510,usec=4211523144,usec_per_call=5234.89,rejected_calls=0,failed_calls=0\r\ncmdstat_spop:calls=76303,usec=93211447,usec_per_call=1221.60,rejected_calls=0,failed_calls=0\r\n```\r\n\r\n> \r\n> So before #11692 both the fork child and the parent could keep incremental rehashing during fork, and besides blocking the fork child from doing it, I also prevented the parent from doing it unless we need an extreme upscale, but we should have also allowed down scale. Right? \r\n\r\nYes, This is the only possibility I can think of for `dictGetSomeKeys()` to return duplicate data.\r\nAnother way to fix it is to optimize dictGetSomeKeys(), so that it randomly the slot from [rehashidx, dict_size_2 + dict_size_1 - rehashidx] instead of [0, maxsizemask] (`unsigned long i = randomULong() & maxsizemask;`), but I'm not sure why antirez didn't do this."
    },
    {
      "id": 1563893273,
      "user": "Fusl",
      "created_at": "2023-05-26T06:54:16Z",
      "body": "`SSCAN` is part of how we maintain items in a set, yes. We do an `SSCAN`, move that data elsewhere (to offload huge amounts of data to disk) and then `SREM` those entries. Now that I think about it, we only started seeing the behavior of Redis hanging when we enabled said feature and this one is the only one doing a combination of `SSCAN`+`SREM` while the main system is the one running `SRANDMEMBER` as the primary way to get items from it."
    },
    {
      "id": 1564133240,
      "user": "oranagra",
      "created_at": "2023-05-26T09:58:22Z",
      "body": "> Another way to fix it is to optimize dictGetSomeKeys(), so that it randomly the slot from [rehashidx, dict_size_2 + dict_size_1 - rehashidx] instead of [0, maxsizemask] (`unsigned long i = randomULong() & maxsizemask;`), but I'm not sure why antirez didn't do this.\r\n\r\ni think that when we have such a long chain in a bucket, we have no chance to ever pick the items at the end, so this pathological issue isn't gonna be solved by any change to the bucket selection.\r\n\r\n\r\n\r\n\r\n> `SSCAN` is part of how we maintain items in a set, yes. We do an `SSCAN`, move that data elsewhere (to offload huge amounts of data to disk) and then `SREM` those entries. Now that I think about it, we only started seeing the behavior of Redis hanging when we enabled said feature and this one is the only one doing a combination of `SSCAN`+`SREM` while the main system is the one running `SRANDMEMBER` as the primary way to get items from it.\r\n\r\n@Fusl so did you use this pattern on older versions (before 7.0.8)? or just on the on later ones?\r\nin any case, i advise to avoid this pattern, redis really doesn't like it."
    },
    {
      "id": 1564555191,
      "user": "Fusl",
      "created_at": "2023-05-26T15:23:15Z",
      "body": "> i advise to avoid this pattern, redis really doesn't like it.\r\n\r\nI'm aware of that now but we have to do it this way due to how we store data in sets. Even if it is advised to avoid it, it shouldn't cause Redis to hang forever. A possible workaround for us would be to use negative numbers in srandmember to make it not try to find unique entries and allow duplicates to be returned (we'd be handing duplicates within our application then) but I don't know what the downsides are here internally inside Redis.\r\n\r\n> did you use this pattern on older versions\r\n\r\nYes, we used the same pattern before on older versions as well without Redis hanging, although never at the scale that we've done so recently."
    }
  ]
}