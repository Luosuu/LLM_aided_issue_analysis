{
  "issue_number": 10915.0,
  "title": "[BUG] redis-server TLS connection close breaks OpenSSL 3 clients",
  "body": "**Describe the bug**\r\n\r\nOpenSSL 3 clients are more sensitive to how connections are closed by servers.\r\n\r\nAs far as I understand it, if there is an unexpected EOF from the server, because the connection was closed without `SSL_shutdown` being called to perform a bidirectional close (which theoretically allows a truncation attack), clients compiled against OpenSSL 3 will now throw an error.\r\n\r\nThere are details at https://github.com/openssl/openssl/issues/11378 and https://github.com/openssl/openssl/issues/11381\r\n\r\nThis mainly affects Ruby's `redis` Gem (https://github.com/redis/redis-rb/issues/1106, https://github.com/mperham/sidekiq/issues/5402, etc), as Python and PHP have a corresponding \"keep allowing unexpected EOFs\" flags set in their native OpenSSL functionalities (e.g. https://github.com/php/php-src/issues/8369)\r\n\r\nThis happens when e.g. the idle timeout in Redis is set to a non-zero value; once connections are terminated due to the idle timeout, a reconnect doesn't work, as OpenSSL 3 on the client now handles the associated unexpected EOF as an error.\r\n\r\n**To reproduce**\r\n\r\nThe following `Dockerfile` reproduces the issue. Reproduction instructions are inline; basically, after the build, in a `docker run`, `redis-server` is started, and a Ruby client is connected in an `irb` session; then, in a second terminal window, `redis-cli` in a `docker exec` is used to kill that connection (a `CLIENT KILL` has the same effect as letting the connection hit the idle timeout), and back in the `docker run` session, another `get()` call doesn't gracefully reconnect like with OpenSSL 1, but throw the \"unexpected EOF\" error.\r\n\r\n```Dockerfile\r\n# syntax=docker/dockerfile:1.3-labs\r\nFROM ubuntu:22.04\r\n\r\nENV DEBIAN_FRONTEND=noninteractive\r\n\r\nRUN apt-get update\r\nRUN apt-get install -y lsb-release\r\n\r\n# The default sources list minus backports, restricted and multiverse.\r\nRUN cat <<EOF >/etc/apt/sources.list\r\ndeb http://archive.ubuntu.com/ubuntu/ $(lsb_release -cs) main universe\r\ndeb http://archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-security main universe\r\ndeb http://archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-updates main universe\r\nEOF\r\n\r\nRUN apt-get update\r\nRUN apt-get upgrade -y\r\n\r\nRUN apt-get install -y --no-install-recommends \\\r\n    apt-transport-https \\\r\n    apt-utils \\\r\n    autoconf \\\r\n    automake \\\r\n    build-essential \\\r\n    bzip2 \\\r\n    cmake \\\r\n    coreutils \\\r\n    curl \\\r\n    gcc \\\r\n    git \\\r\n    gnupg \\\r\n    less \\\r\n    libc6-dev \\\r\n    libjemalloc-dev \\\r\n    libssl-dev \\\r\n    lsb-release \\\r\n    make \\\r\n    patch \\\r\n    pkg-config \\\r\n    python-is-python3 \\\r\n    python3 \\\r\n    rename \\\r\n    ruby \\\r\n    ruby-dev \\\r\n    tar \\\r\n    unzip \\\r\n    wget \\\r\n    xz-utils \\\r\n    zip\r\n\r\nRUN curl https://download.redis.io/redis-stable.tar.gz | tar xz\r\nRUN cd redis-stable && make BUILD_TLS=yes && make install && ./utils/gen-test-certs.sh\r\n\r\n# 4.7.1 contains a workaround, so we install 4.7.0 to demonstrate the problem\r\nRUN gem install redis --version 4.7.0\r\n\r\n# terminal 1 % docker build --tag redis-openssl3-repro .\r\n# terminal 1 % docker run --rm -ti --name redis-openssl3-repro-run redis-openssl3-repro bash\r\n# terminal 1 [in docker run] root@dbfebf2025eb:/# redis-server --tls-port 6379 --port 0 --tls-cert-file redis-stable/tests/tls/redis.crt --tls-key-file redis-stable/tests/tls/redis.key --tls-ca-cert-file redis-stable/tests/tls/ca.crt --tls-auth-clients no &\r\n# terminal 1 [in docker run] root@dbfebf2025eb:/# irb\r\n# terminal 1 [in docker run] irb(main):001:0> require \"redis\"\r\n# terminal 1 [in docker run] => true\r\n# terminal 1 [in docker run] irb(main):002:0> r = Redis.new(url: \"rediss://127.0.0.1:6379\", ssl_params: { verify_mode: OpenSSL::SSL::VERIFY_NONE })\r\n# terminal 1 [in docker run] => #<Redis client v4.7.0 for rediss://127.0.0.1:6379/0>\r\n# terminal 1 [in docker run] irb(main):003:0> r.get(\"foo\")\r\n# terminal 1 [in docker run] => nil\r\n\r\n# terminal 2 % docker exec -ti redis-openssl3-repro-run redis-cli --tls --cert redis-stable/tests/tls/redis.crt --key redis-stable/tests/tls/redis.key --cacert redis-stable/tests/tls/ca.crt\r\n# terminal 2 [in docker exec] 127.0.0.1:6379> CLIENT LIST\r\n# terminal 2 [in docker exec] id=3 addr=127.0.0.1:57978 laddr=127.0.0.1:6379 fd=8 name= age=47 idle=47 …\r\n# terminal 2 [in docker exec] id=5 addr=127.0.0.1:57982 laddr=127.0.0.1:6379 fd=9 name= age=15 idle=0 …\r\n# terminal 2 [in docker exec] 127.0.0.1:6379> CLIENT KILL ID 3\r\n# terminal 2 [in docker exec] (integer) 1\r\n\r\n# terminal 1 [in docker run] irb(main):004:0> r.get(\"foo\")\r\n# terminal 1 [in docker run] /usr/lib/ruby/3.0.0/openssl/buffering.rb:214:in `sysread_nonblock': SSL_read: unexpected eof while reading (OpenSSL::SSL::SSLError)\r\n# terminal 1 [in docker run]         from /usr/lib/ruby/3.0.0/openssl/buffering.rb:214:in `read_nonblock'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/connection/ruby.rb:55:in `block in _read_from_socket'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/connection/ruby.rb:54:in `loop'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/connection/ruby.rb:54:in `_read_from_socket'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/connection/ruby.rb:47:in `gets'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/connection/ruby.rb:382:in `read'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:311:in `block in read'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:299:in `io'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:310:in `read'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:161:in `block in call'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:279:in `block (2 levels) in process'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:420:in `ensure_connected'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:269:in `block in process'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:356:in `logging'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:268:in `process'\r\n# terminal 1 [in docker run]         from /var/lib/gems/3.0.0/gems/redis-4.7.0/lib/redis/client.rb:161:in `call'\r\n# terminal 1 [in docker run]         ... 8 levels...\r\n```\r\n\r\nYou can use `FROM ubuntu:20.04`, which will use a Ruby built against OpenSSL 1.1.1, to see how older clients are less strict and this error does not occur.",
  "state": "closed",
  "created_at": "2022-07-01T21:11:04Z",
  "updated_at": "2024-11-05T11:18:55Z",
  "closed_at": "2022-07-05T05:41:18Z",
  "labels": [],
  "comments_data": [
    {
      "id": 1173126566,
      "user": "yossigo",
      "created_at": "2022-07-03T15:58:13Z",
      "body": "@dzuelke Thanks for reporting this, I've been looking at different test behavior due to OpenSSL 3.0 but I realize now the implication might be greater than just that. I'll take a look - I'm not sure we'll always be able to afford waiting for `SSL_shutdown()` to complete successfully, but even a best-effort approach is better than what we have now."
    },
    {
      "id": 1173666466,
      "user": "yossigo",
      "created_at": "2022-07-04T10:46:58Z",
      "body": "@dzuelke Can you please confirm that #10931 solves this problem in your case?"
    },
    {
      "id": 1174013608,
      "user": "dzuelke",
      "created_at": "2022-07-04T17:10:18Z",
      "body": "@yossigo Just built with that patch applied and can confirm it fixes the issue! Nice work!"
    },
    {
      "id": 2456904940,
      "user": "shashwatatw",
      "created_at": "2024-11-05T11:18:53Z",
      "body": "I'm facing a similar issue while using python 3.10 from a linux device, what is the possible issue. unable fire a single get request. while it works fine with python 2.7\r\n"
    }
  ]
}