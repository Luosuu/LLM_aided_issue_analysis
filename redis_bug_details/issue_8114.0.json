{
  "issue_number": 8114.0,
  "title": "[BUG]Job for redis-server.service failed because the control process exited with error code.",
  "body": "**Describe the bug**\r\nServer Startup for redis is failing because of an unidentified bug. \r\nA short description of the bug.\r\nExit Error Code  \r\nSee \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\r\n\r\n**To reproduce**\r\nInstall Ubuntu 18.04 OS.\r\nsudo apt update\r\nSudo apt get redis-server.\r\nsudo systemctl restart redis.service\r\n\r\nSteps to reproduce the behavior and/or a minimal code sample.\r\n\r\n**Expected behavior**\r\nRedis Server is (re)started\r\nA description of what you expected to happen.\r\nI expect to have seen the redis server to start.\r\n**Additional information**\r\n\r\nAny additional information that is relevant to the problem.\r\nNo redis logs avalable.",
  "state": "closed",
  "created_at": "2020-11-30T21:14:46Z",
  "updated_at": "2024-04-28T11:53:36Z",
  "closed_at": "2021-11-18T13:45:38Z",
  "labels": [],
  "comments_data": [
    {
      "id": 736441349,
      "user": "Bnjoroge1",
      "created_at": "2020-12-01T11:15:10Z",
      "body": "sudo apt-get update*"
    },
    {
      "id": 740041679,
      "user": "yossigo",
      "created_at": "2020-12-07T16:50:43Z",
      "body": "Hi @Bnjorogedev, do you use the upstream Ubuntu redis package or have you set up a PPA/other repo? Also, do you see any specific error messages in `journalctl -xe` or the log files?"
    },
    {
      "id": 917978917,
      "user": "asim-quadri",
      "created_at": "2021-09-13T08:53:30Z",
      "body": "running this command \r\n**sudo service redis-server start**\r\nJob for redis-server.service failed because the control process exited with error code.\r\nSee \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\r\n"
    },
    {
      "id": 918557845,
      "user": "yossigo",
      "created_at": "2021-09-13T20:39:16Z",
      "body": "@asim-quadri can you please provide more information:\r\n\r\n* What version is used and how was it installed\r\n* Output of the commands as suggested by the error message."
    },
    {
      "id": 955206864,
      "user": "therohitdas",
      "created_at": "2021-10-30T13:09:09Z",
      "body": "I am having the same issue.\r\nI installed it by following this article by - [Digitalocean article](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-20-04)\r\n\r\nI am receiving the same error. \r\n```bash\r\nJob for redis-server.service failed because the control process exited with error code.\r\nSee \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\r\n```\r\nWhen I edited the conf for the first time and restarted it ran fine. \r\nBut when turned my laptop again the next day, it is not starting. \r\nI tried using this command to start it - `sudo service redis-server start` also - `sudo service redis-server start`\r\n\r\nOn running `sudo service redis-server status` I get -\r\n```bash\r\n● redis-server.service - Advanced key-value store\r\n     Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)\r\n     Active: failed (Result: exit-code) since Sat 2021-10-30 18:18:51 IST; 4min 24s ago\r\n       Docs: http://redis.io/documentation,\r\n             man:redis-server(1)\r\n    Process: 19855 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daem>\r\n   Main PID: 19855 (code=exited, status=1/FAILURE)\r\n\r\nOct 30 18:18:51 dell-pop-os systemd[1]: redis-server.service: Scheduled restart job, restart counter>\r\nOct 30 18:18:51 dell-pop-os systemd[1]: Stopped Advanced key-value store.\r\nOct 30 18:18:51 dell-pop-os systemd[1]: redis-server.service: Start request repeated too quickly.\r\nOct 30 18:18:51 dell-pop-os systemd[1]: redis-server.service: Failed with result 'exit-code'.\r\nOct 30 18:18:51 dell-pop-os systemd[1]: Failed to start Advanced key-value store.\r\n```\r\nVersion of redis - `Redis server v=6.0.11 sha=00000000:0 malloc=jemalloc-5.2.1 bits=64 build=83fe9b039c768864`\r\n\r\nMy system information -\r\n```bash\r\nOS: Pop!_OS 21.04 x86_64 \r\nHost: Vostro 3584 \r\nKernel: 5.13.0-7614-generic \r\nUptime: 4 hours, 52 mins \r\nPackages: 1908 (dpkg), 8 (snap) \r\nShell: zsh 5.8 \r\nesolution: 1366x768, 2560x1440 \r\nDE: Unity \r\nWM: Mutter \r\nWM Theme: Adwaita \r\nTheme: Numix [GTK2/3] \r\nIcons: Numix-Square-Light [GTK2/3] \r\nTerminal: vscode \r\nCPU: Intel i3-7020U (4) @ 2.300GHz \r\nGPU: Intel Device 5921 \r\nMemory: 4537MiB / 7852MiB \r\n```\r\n\r\nIt also happens on my other Laptop with the same config but Pop!_os - 20.04\r\n\r\nFor anyone experiencing this error-\r\nSet supervised as no in the config file\r\n```config\r\nsupervised no\r\n```\r\nThen start redis like this -\r\n```bash\r\nsudo redis-server /etc/redis/redis.conf\r\n```\r\nEdit the path to conf as required.\r\n"
    },
    {
      "id": 955667319,
      "user": "yossigo",
      "created_at": "2021-10-31T09:37:49Z",
      "body": "@therohitdas Can you please provide some more information:\r\n\r\n* Exact version of `redis-server` package used: `dpkg -l|grep redis`\r\n* Systemd configuration: `cat /lib/systemd/system/redis-server.service`\r\n* Your `/etc/redis/redis.conf` configuration, or at least the `daemonize` and `supservised` parameters."
    },
    {
      "id": 971686693,
      "user": "therohitdas",
      "created_at": "2021-11-17T15:24:18Z",
      "body": "Hi @yossigo \r\n- exact version of redis-server - `5:6.0.11-1`\r\n- systems configuration :\r\n```bash \r\n[Unit]\r\nDescription=Advanced key-value store\r\nAfter=network.target\r\nDocumentation=http://redis.io/documentation, man:redis-server(1)\r\n\r\n[Service]\r\nType=notify\r\nExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no\r\nPIDFile=/run/redis/redis-server.pid\r\nTimeoutStopSec=0\r\nRestart=always\r\nUser=redis\r\nGroup=redis\r\nRuntimeDirectory=redis\r\nRuntimeDirectoryMode=2755\r\n\r\nUMask=007\r\nPrivateTmp=yes\r\nLimitNOFILE=65535\r\nPrivateDevices=yes\r\nProtectHome=yes\r\nReadOnlyDirectories=/\r\nReadWritePaths=-/var/lib/redis\r\nReadWritePaths=-/var/log/redis\r\nReadWritePaths=-/var/run/redis\r\n\r\nNoNewPrivileges=true\r\nCapabilityBoundingSet=CAP_SETGID CAP_SETUID CAP_SYS_RESOURCE\r\nMemoryDenyWriteExecute=true\r\nProtectKernelModules=true\r\nProtectKernelTunables=true\r\nProtectControlGroups=true\r\nRestrictRealtime=true\r\nRestrictNamespaces=true\r\nRestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX\r\n\r\n# redis-server can write to its own config file when in cluster mode so we\r\n# permit writing there by default. If you are not using this feature, it is\r\n# recommended that you replace the following lines with \"ProtectSystem=full\".\r\nProtectSystem=true\r\nReadWriteDirectories=-/etc/redis\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nAlias=redis.service\r\n```\r\n- my /etc/redis/redis.conf\r\n```conf\r\n# Redis configuration file example.\r\n#\r\n# Note that in order to read the configuration file, Redis must be\r\n# started with the file path as first argument:\r\n#\r\n# ./redis-server /path/to/redis.conf\r\n\r\n# Note on units: when memory size is needed, it is possible to specify\r\n# it in the usual form of 1k 5GB 4M and so forth:\r\n#\r\n# 1k => 1000 bytes\r\n# 1kb => 1024 bytes\r\n# 1m => 1000000 bytes\r\n# 1mb => 1024*1024 bytes\r\n# 1g => 1000000000 bytes\r\n# 1gb => 1024*1024*1024 bytes\r\n#\r\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\r\n\r\n################################## INCLUDES ###################################\r\n\r\n# Include one or more other config files here.  This is useful if you\r\n# have a standard template that goes to all Redis servers but also need\r\n# to customize a few per-server settings.  Include files can include\r\n# other files, so use this wisely.\r\n#\r\n# Note that option \"include\" won't be rewritten by command \"CONFIG REWRITE\"\r\n# from admin or Redis Sentinel. Since Redis always uses the last processed\r\n# line as value of a configuration directive, you'd better put includes\r\n# at the beginning of this file to avoid overwriting config change at runtime.\r\n#\r\n# If instead you are interested in using includes to override configuration\r\n# options, it is better to use include as the last line.\r\n#\r\n# include /path/to/local.conf\r\n# include /path/to/other.conf\r\n\r\n################################## MODULES #####################################\r\n\r\n# Load modules at startup. If the server is not able to load modules\r\n# it will abort. It is possible to use multiple loadmodule directives.\r\n#\r\n# loadmodule /path/to/my_module.so\r\n# loadmodule /path/to/other_module.so\r\n\r\n################################## NETWORK #####################################\r\n\r\n# By default, if no \"bind\" configuration directive is specified, Redis listens\r\n# for connections from all available network interfaces on the host machine.\r\n# It is possible to listen to just one or multiple selected interfaces using\r\n# the \"bind\" configuration directive, followed by one or more IP addresses.\r\n#\r\n# Examples:\r\n#\r\n# bind 192.168.1.100 10.0.0.1\r\n# bind 127.0.0.1 ::1\r\n#\r\n# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the\r\n# internet, binding to all the interfaces is dangerous and will expose the\r\n# instance to everybody on the internet. So by default we uncomment the\r\n# following bind directive, that will force Redis to listen only on the\r\n# IPv4 loopback interface address (this means Redis will only be able to\r\n# accept client connections from the same host that it is running on).\r\n#\r\n# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\r\n# JUST COMMENT OUT THE FOLLOWING LINE.\r\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbind 127.0.0.1 ::1\r\n\r\n# Protected mode is a layer of security protection, in order to avoid that\r\n# Redis instances left open on the internet are accessed and exploited.\r\n#\r\n# When protected mode is on and if:\r\n#\r\n# 1) The server is not binding explicitly to a set of addresses using the\r\n#    \"bind\" directive.\r\n# 2) No password is configured.\r\n#\r\n# The server only accepts connections from clients connecting from the\r\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\r\n# sockets.\r\n#\r\n# By default protected mode is enabled. You should disable it only if\r\n# you are sure you want clients from other hosts to connect to Redis\r\n# even if no authentication is configured, nor a specific set of interfaces\r\n# are explicitly listed using the \"bind\" directive.\r\nprotected-mode yes\r\n\r\n# Accept connections on the specified port, default is 6379 (IANA #815344).\r\n# If port 0 is specified Redis will not listen on a TCP socket.\r\nport 6379\r\n\r\n# TCP listen() backlog.\r\n#\r\n# In high requests-per-second environments you need a high backlog in order\r\n# to avoid slow clients connection issues. Note that the Linux kernel\r\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\r\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\r\n# in order to get the desired effect.\r\ntcp-backlog 511\r\n\r\n# Unix socket.\r\n#\r\n# Specify the path for the Unix socket that will be used to listen for\r\n# incoming connections. There is no default, so Redis will not listen\r\n# on a unix socket when not specified.\r\n#\r\n# unixsocket /var/run/redis/redis-server.sock\r\n# unixsocketperm 700\r\n\r\n# Close the connection after a client is idle for N seconds (0 to disable)\r\ntimeout 0\r\n\r\n# TCP keepalive.\r\n#\r\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\r\n# of communication. This is useful for two reasons:\r\n#\r\n# 1) Detect dead peers.\r\n# 2) Force network equipment in the middle to consider the connection to be\r\n#    alive.\r\n#\r\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\r\n# Note that to close the connection the double of the time is needed.\r\n# On other kernels the period depends on the kernel configuration.\r\n#\r\n# A reasonable value for this option is 300 seconds, which is the new\r\n# Redis default starting with Redis 3.2.1.\r\ntcp-keepalive 300\r\n\r\n################################# TLS/SSL #####################################\r\n\r\n# By default, TLS/SSL is disabled. To enable it, the \"tls-port\" configuration\r\n# directive can be used to define TLS-listening ports. To enable TLS on the\r\n# default port, use:\r\n#\r\n# port 0\r\n# tls-port 6379\r\n\r\n# Configure a X.509 certificate and private key to use for authenticating the\r\n# server to connected clients, masters or cluster peers.  These files should be\r\n# PEM formatted.\r\n#\r\n# tls-cert-file redis.crt \r\n# tls-key-file redis.key\r\n\r\n# Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange:\r\n#\r\n# tls-dh-params-file redis.dh\r\n\r\n# Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL\r\n# clients and peers.  Redis requires an explicit configuration of at least one\r\n# of these, and will not implicitly use the system wide configuration.\r\n#\r\n# tls-ca-cert-file ca.crt\r\n# tls-ca-cert-dir /etc/ssl/certs\r\n\r\n# By default, clients (including replica servers) on a TLS port are required\r\n# to authenticate using valid client side certificates.\r\n#\r\n# If \"no\" is specified, client certificates are not required and not accepted.\r\n# If \"optional\" is specified, client certificates are accepted and must be\r\n# valid if provided, but are not required.\r\n#\r\n# tls-auth-clients no\r\n# tls-auth-clients optional\r\n\r\n# By default, a Redis replica does not attempt to establish a TLS connection\r\n# with its master.\r\n#\r\n# Use the following directive to enable TLS on replication links.\r\n#\r\n# tls-replication yes\r\n\r\n# By default, the Redis Cluster bus uses a plain TCP connection. To enable\r\n# TLS for the bus protocol, use the following directive:\r\n#\r\n# tls-cluster yes\r\n\r\n# Explicitly specify TLS versions to support. Allowed values are case insensitive\r\n# and include \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\" (OpenSSL >= 1.1.1) or\r\n# any combination. To enable only TLSv1.2 and TLSv1.3, use:\r\n#\r\n# tls-protocols \"TLSv1.2 TLSv1.3\"\r\n\r\n# Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information\r\n# about the syntax of this string.\r\n#\r\n# Note: this configuration applies only to <= TLSv1.2.\r\n#\r\n# tls-ciphers DEFAULT:!MEDIUM\r\n\r\n# Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more\r\n# information about the syntax of this string, and specifically for TLSv1.3\r\n# ciphersuites.\r\n#\r\n# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256\r\n\r\n# When choosing a cipher, use the server's preference instead of the client\r\n# preference. By default, the server follows the client's preference.\r\n#\r\n# tls-prefer-server-ciphers yes\r\n\r\n# By default, TLS session caching is enabled to allow faster and less expensive\r\n# reconnections by clients that support it. Use the following directive to disable\r\n# caching.\r\n#\r\n# tls-session-caching no\r\n\r\n# Change the default number of TLS sessions cached. A zero value sets the cache\r\n# to unlimited size. The default size is 20480.\r\n#\r\n# tls-session-cache-size 5000\r\n\r\n# Change the default timeout of cached TLS sessions. The default timeout is 300\r\n# seconds.\r\n#\r\n# tls-session-cache-timeout 60\r\n\r\n################################# GENERAL #####################################\r\n\r\n# By default Redis does not run as a daemon. Use 'yes' if you need it.\r\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\r\ndaemonize yes\r\n\r\n# If you run Redis from upstart or systemd, Redis can interact with your\r\n# supervision tree. Options:\r\n#   supervised no      - no supervision interaction\r\n#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode\r\n#                        requires \"expect stop\" in your upstart job config\r\n#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET\r\n#   supervised auto    - detect upstart or systemd method based on\r\n#                        UPSTART_JOB or NOTIFY_SOCKET environment variables\r\n# Note: these supervision methods only signal \"process is ready.\"\r\n#       They do not enable continuous pings back to your supervisor.\r\nsupervised systemd\r\n\r\n# If a pid file is specified, Redis writes it where specified at startup\r\n# and removes it at exit.\r\n#\r\n# When the server runs non daemonized, no pid file is created if none is\r\n# specified in the configuration. When the server is daemonized, the pid file\r\n# is used even if not specified, defaulting to \"/var/run/redis.pid\".\r\n#\r\n# Creating a pid file is best effort: if Redis is not able to create it\r\n# nothing bad happens, the server will start and run normally.\r\npidfile /var/run/redis/redis-server.pid\r\n\r\n# Specify the server verbosity level.\r\n# This can be one of:\r\n# debug (a lot of information, useful for development/testing)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (moderately verbose, what you want in production probably)\r\n# warning (only very important / critical messages are logged)\r\nloglevel notice\r\n\r\n# Specify the log file name. Also the empty string can be used to force\r\n# Redis to log on the standard output. Note that if you use standard\r\n# output for logging but daemonize, logs will be sent to /dev/null\r\nlogfile /var/log/redis/redis-server.log\r\n\r\n# To enable logging to the system logger, just set 'syslog-enabled' to yes,\r\n# and optionally update the other syslog parameters to suit your needs.\r\n# syslog-enabled no\r\n\r\n# Specify the syslog identity.\r\n# syslog-ident redis\r\n\r\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\r\n# syslog-facility local0\r\n\r\n# Set the number of databases. The default database is DB 0, you can select\r\n# a different one on a per-connection basis using SELECT <dbid> where\r\n# dbid is a number between 0 and 'databases'-1\r\ndatabases 16\r\n\r\n# By default Redis shows an ASCII art logo only when started to log to the\r\n# standard output and if the standard output is a TTY. Basically this means\r\n# that normally a logo is displayed only in interactive sessions.\r\n#\r\n# However it is possible to force the pre-4.0 behavior and always show a\r\n# ASCII art logo in startup logs by setting the following option to yes.\r\nalways-show-logo yes\r\n\r\n################################ SNAPSHOTTING  ################################\r\n#\r\n# Save the DB on disk:\r\n#\r\n#   save <seconds> <changes>\r\n#\r\n#   Will save the DB if both the given number of seconds and the given\r\n#   number of write operations against the DB occurred.\r\n#\r\n#   In the example below the behavior will be to save:\r\n#   after 900 sec (15 min) if at least 1 key changed\r\n#   after 300 sec (5 min) if at least 10 keys changed\r\n#   after 60 sec if at least 10000 keys changed\r\n#\r\n#   Note: you can disable saving completely by commenting out all \"save\" lines.\r\n#\r\n#   It is also possible to remove all the previously configured save\r\n#   points by adding a save directive with a single empty string argument\r\n#   like in the following example:\r\n#\r\n#   save \"\"\r\n\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n\r\n# By default Redis will stop accepting writes if RDB snapshots are enabled\r\n# (at least one save point) and the latest background save failed.\r\n# This will make the user aware (in a hard way) that data is not persisting\r\n# on disk properly, otherwise chances are that no one will notice and some\r\n# disaster will happen.\r\n#\r\n# If the background saving process will start working again Redis will\r\n# automatically allow writes again.\r\n#\r\n# However if you have setup your proper monitoring of the Redis server\r\n# and persistence, you may want to disable this feature so that Redis will\r\n# continue to work as usual even if there are problems with disk,\r\n# permissions, and so forth.\r\nstop-writes-on-bgsave-error yes\r\n\r\n# Compress string objects using LZF when dump .rdb databases?\r\n# By default compression is enabled as it's almost always a win.\r\n# If you want to save some CPU in the saving child set it to 'no' but\r\n# the dataset will likely be bigger if you have compressible values or keys.\r\nrdbcompression yes\r\n\r\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\r\n# This makes the format more resistant to corruption but there is a performance\r\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\r\n# for maximum performances.\r\n#\r\n# RDB files created with checksum disabled have a checksum of zero that will\r\n# tell the loading code to skip the check.\r\nrdbchecksum yes\r\n\r\n# The filename where to dump the DB\r\ndbfilename dump.rdb\r\n\r\n# Remove RDB files used by replication in instances without persistence\r\n# enabled. By default this option is disabled, however there are environments\r\n# where for regulations or other security concerns, RDB files persisted on\r\n# disk by masters in order to feed replicas, or stored on disk by replicas\r\n# in order to load them for the initial synchronization, should be deleted\r\n# ASAP. Note that this option ONLY WORKS in instances that have both AOF\r\n# and RDB persistence disabled, otherwise is completely ignored.\r\n#\r\n# An alternative (and sometimes better) way to obtain the same effect is\r\n# to use diskless replication on both master and replicas instances. However\r\n# in the case of replicas, diskless is not always an option.\r\nrdb-del-sync-files no\r\n\r\n# The working directory.\r\n#\r\n# The DB will be written inside this directory, with the filename specified\r\n# above using the 'dbfilename' configuration directive.\r\n#\r\n# The Append Only File will also be created inside this directory.\r\n#\r\n# Note that you must specify a directory here, not a file name.\r\ndir /var/lib/redis\r\n\r\n################################# REPLICATION #################################\r\n\r\n# Master-Replica replication. Use replicaof to make a Redis instance a copy of\r\n# another Redis server. A few things to understand ASAP about Redis replication.\r\n#\r\n#   +------------------+      +---------------+\r\n#   |      Master      | ---> |    Replica    |\r\n#   | (receive writes) |      |  (exact copy) |\r\n#   +------------------+      +---------------+\r\n#\r\n# 1) Redis replication is asynchronous, but you can configure a master to\r\n#    stop accepting writes if it appears to be not connected with at least\r\n#    a given number of replicas.\r\n# 2) Redis replicas are able to perform a partial resynchronization with the\r\n#    master if the replication link is lost for a relatively small amount of\r\n#    time. You may want to configure the replication backlog size (see the next\r\n#    sections of this file) with a sensible value depending on your needs.\r\n# 3) Replication is automatic and does not need user intervention. After a\r\n#    network partition replicas automatically try to reconnect to masters\r\n#    and resynchronize with them.\r\n#\r\n# replicaof <masterip> <masterport>\r\n\r\n# If the master is password protected (using the \"requirepass\" configuration\r\n# directive below) it is possible to tell the replica to authenticate before\r\n# starting the replication synchronization process, otherwise the master will\r\n# refuse the replica request.\r\n#\r\n# masterauth <master-password>\r\n#\r\n# However this is not enough if you are using Redis ACLs (for Redis version\r\n# 6 or greater), and the default user is not capable of running the PSYNC\r\n# command and/or other commands needed for replication. In this case it's\r\n# better to configure a special user to use with replication, and specify the\r\n# masteruser configuration as such:\r\n#\r\n# masteruser <username>\r\n#\r\n# When masteruser is specified, the replica will authenticate against its\r\n# master using the new AUTH form: AUTH <username> <password>.\r\n\r\n# When a replica loses its connection with the master, or when the replication\r\n# is still in progress, the replica can act in two different ways:\r\n#\r\n# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will\r\n#    still reply to client requests, possibly with out of date data, or the\r\n#    data set may just be empty if this is the first synchronization.\r\n#\r\n# 2) If replica-serve-stale-data is set to 'no' the replica will reply with\r\n#    an error \"SYNC with master in progress\" to all commands except:\r\n#    INFO, REPLICAOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,\r\n#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,\r\n#    HOST and LATENCY.\r\n#\r\nreplica-serve-stale-data yes\r\n\r\n# You can configure a replica instance to accept writes or not. Writing against\r\n# a replica instance may be useful to store some ephemeral data (because data\r\n# written on a replica will be easily deleted after resync with the master) but\r\n# may also cause problems if clients are writing to it because of a\r\n# misconfiguration.\r\n#\r\n# Since Redis 2.6 by default replicas are read-only.\r\n#\r\n# Note: read only replicas are not designed to be exposed to untrusted clients\r\n# on the internet. It's just a protection layer against misuse of the instance.\r\n# Still a read only replica exports by default all the administrative commands\r\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\r\n# security of read only replicas using 'rename-command' to shadow all the\r\n# administrative / dangerous commands.\r\nreplica-read-only yes\r\n\r\n# Replication SYNC strategy: disk or socket.\r\n#\r\n# New replicas and reconnecting replicas that are not able to continue the\r\n# replication process just receiving differences, need to do what is called a\r\n# \"full synchronization\". An RDB file is transmitted from the master to the\r\n# replicas.\r\n#\r\n# The transmission can happen in two different ways:\r\n#\r\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\r\n#                 file on disk. Later the file is transferred by the parent\r\n#                 process to the replicas incrementally.\r\n# 2) Diskless: The Redis master creates a new process that directly writes the\r\n#              RDB file to replica sockets, without touching the disk at all.\r\n#\r\n# With disk-backed replication, while the RDB file is generated, more replicas\r\n# can be queued and served with the RDB file as soon as the current child\r\n# producing the RDB file finishes its work. With diskless replication instead\r\n# once the transfer starts, new replicas arriving will be queued and a new\r\n# transfer will start when the current one terminates.\r\n#\r\n# When diskless replication is used, the master waits a configurable amount of\r\n# time (in seconds) before starting the transfer in the hope that multiple\r\n# replicas will arrive and the transfer can be parallelized.\r\n#\r\n# With slow disks and fast (large bandwidth) networks, diskless replication\r\n# works better.\r\nrepl-diskless-sync no\r\n\r\n# When diskless replication is enabled, it is possible to configure the delay\r\n# the server waits in order to spawn the child that transfers the RDB via socket\r\n# to the replicas.\r\n#\r\n# This is important since once the transfer starts, it is not possible to serve\r\n# new replicas arriving, that will be queued for the next RDB transfer, so the\r\n# server waits a delay in order to let more replicas arrive.\r\n#\r\n# The delay is specified in seconds, and by default is 5 seconds. To disable\r\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\r\nrepl-diskless-sync-delay 5\r\n\r\n# -----------------------------------------------------------------------------\r\n# WARNING: RDB diskless load is experimental. Since in this setup the replica\r\n# does not immediately store an RDB on disk, it may cause data loss during\r\n# failovers. RDB diskless load + Redis modules not handling I/O reads may also\r\n# cause Redis to abort in case of I/O errors during the initial synchronization\r\n# stage with the master. Use only if your do what you are doing.\r\n# -----------------------------------------------------------------------------\r\n#\r\n# Replica can load the RDB it reads from the replication link directly from the\r\n# socket, or store the RDB to a file and read that file after it was completely\r\n# received from the master.\r\n#\r\n# In many cases the disk is slower than the network, and storing and loading\r\n# the RDB file may increase replication time (and even increase the master's\r\n# Copy on Write memory and salve buffers).\r\n# However, parsing the RDB file directly from the socket may mean that we have\r\n# to flush the contents of the current database before the full rdb was\r\n# received. For this reason we have the following options:\r\n#\r\n# \"disabled\"    - Don't use diskless load (store the rdb file to the disk first)\r\n# \"on-empty-db\" - Use diskless load only when it is completely safe.\r\n# \"swapdb\"      - Keep a copy of the current db contents in RAM while parsing\r\n#                 the data directly from the socket. note that this requires\r\n#                 sufficient memory, if you don't have it, you risk an OOM kill.\r\nrepl-diskless-load disabled\r\n\r\n# Replicas send PINGs to server in a predefined interval. It's possible to\r\n# change this interval with the repl_ping_replica_period option. The default\r\n# value is 10 seconds.\r\n#\r\n# repl-ping-replica-period 10\r\n\r\n# The following option sets the replication timeout for:\r\n#\r\n# 1) Bulk transfer I/O during SYNC, from the point of view of replica.\r\n# 2) Master timeout from the point of view of replicas (data, pings).\r\n# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).\r\n#\r\n# It is important to make sure that this value is greater than the value\r\n# specified for repl-ping-replica-period otherwise a timeout will be detected\r\n# every time there is low traffic between the master and the replica. The default\r\n# value is 60 seconds.\r\n#\r\n# repl-timeout 60\r\n\r\n# Disable TCP_NODELAY on the replica socket after SYNC?\r\n#\r\n# If you select \"yes\" Redis will use a smaller number of TCP packets and\r\n# less bandwidth to send data to replicas. But this can add a delay for\r\n# the data to appear on the replica side, up to 40 milliseconds with\r\n# Linux kernels using a default configuration.\r\n#\r\n# If you select \"no\" the delay for data to appear on the replica side will\r\n# be reduced but more bandwidth will be used for replication.\r\n#\r\n# By default we optimize for low latency, but in very high traffic conditions\r\n# or when the master and replicas are many hops away, turning this to \"yes\" may\r\n# be a good idea.\r\nrepl-disable-tcp-nodelay no\r\n\r\n# Set the replication backlog size. The backlog is a buffer that accumulates\r\n# replica data when replicas are disconnected for some time, so that when a\r\n# replica wants to reconnect again, often a full resync is not needed, but a\r\n# partial resync is enough, just passing the portion of data the replica\r\n# missed while disconnected.\r\n#\r\n# The bigger the replication backlog, the longer the replica can endure the\r\n# disconnect and later be able to perform a partial resynchronization.\r\n#\r\n# The backlog is only allocated if there is at least one replica connected.\r\n#\r\n# repl-backlog-size 1mb\r\n\r\n# After a master has no connected replicas for some time, the backlog will be\r\n# freed. The following option configures the amount of seconds that need to\r\n# elapse, starting from the time the last replica disconnected, for the backlog\r\n# buffer to be freed.\r\n#\r\n# Note that replicas never free the backlog for timeout, since they may be\r\n# promoted to masters later, and should be able to correctly \"partially\r\n# resynchronize\" with other replicas: hence they should always accumulate backlog.\r\n#\r\n# A value of 0 means to never release the backlog.\r\n#\r\n# repl-backlog-ttl 3600\r\n\r\n# The replica priority is an integer number published by Redis in the INFO\r\n# output. It is used by Redis Sentinel in order to select a replica to promote\r\n# into a master if the master is no longer working correctly.\r\n#\r\n# A replica with a low priority number is considered better for promotion, so\r\n# for instance if there are three replicas with priority 10, 100, 25 Sentinel\r\n# will pick the one with priority 10, that is the lowest.\r\n#\r\n# However a special priority of 0 marks the replica as not able to perform the\r\n# role of master, so a replica with priority of 0 will never be selected by\r\n# Redis Sentinel for promotion.\r\n#\r\n# By default the priority is 100.\r\nreplica-priority 100\r\n\r\n# It is possible for a master to stop accepting writes if there are less than\r\n# N replicas connected, having a lag less or equal than M seconds.\r\n#\r\n# The N replicas need to be in \"online\" state.\r\n#\r\n# The lag in seconds, that must be <= the specified value, is calculated from\r\n# the last ping received from the replica, that is usually sent every second.\r\n#\r\n# This option does not GUARANTEE that N replicas will accept the write, but\r\n# will limit the window of exposure for lost writes in case not enough replicas\r\n# are available, to the specified number of seconds.\r\n#\r\n# For example to require at least 3 replicas with a lag <= 10 seconds use:\r\n#\r\n# min-replicas-to-write 3\r\n# min-replicas-max-lag 10\r\n#\r\n# Setting one or the other to 0 disables the feature.\r\n#\r\n# By default min-replicas-to-write is set to 0 (feature disabled) and\r\n# min-replicas-max-lag is set to 10.\r\n\r\n# A Redis master is able to list the address and port of the attached\r\n# replicas in different ways. For example the \"INFO replication\" section\r\n# offers this information, which is used, among other tools, by\r\n# Redis Sentinel in order to discover replica instances.\r\n# Another place where this info is available is in the output of the\r\n# \"ROLE\" command of a master.\r\n#\r\n# The listed IP address and port normally reported by a replica is\r\n# obtained in the following way:\r\n#\r\n#   IP: The address is auto detected by checking the peer address\r\n#   of the socket used by the replica to connect with the master.\r\n#\r\n#   Port: The port is communicated by the replica during the replication\r\n#   handshake, and is normally the port that the replica is using to\r\n#   listen for connections.\r\n#\r\n# However when port forwarding or Network Address Translation (NAT) is\r\n# used, the replica may actually be reachable via different IP and port\r\n# pairs. The following two options can be used by a replica in order to\r\n# report to its master a specific set of IP and port, so that both INFO\r\n# and ROLE will report those values.\r\n#\r\n# There is no need to use both the options if you need to override just\r\n# the port or the IP address.\r\n#\r\n# replica-announce-ip 5.5.5.5\r\n# replica-announce-port 1234\r\n\r\n############################### KEYS TRACKING #################################\r\n\r\n# Redis implements server assisted support for client side caching of values.\r\n# This is implemented using an invalidation table that remembers, using\r\n# 16 millions of slots, what clients may have certain subsets of keys. In turn\r\n# this is used in order to send invalidation messages to clients. Please\r\n# check this page to understand more about the feature:\r\n#\r\n#   https://redis.io/topics/client-side-caching\r\n#\r\n# When tracking is enabled for a client, all the read only queries are assumed\r\n# to be cached: this will force Redis to store information in the invalidation\r\n# table. When keys are modified, such information is flushed away, and\r\n# invalidation messages are sent to the clients. However if the workload is\r\n# heavily dominated by reads, Redis could use more and more memory in order\r\n# to track the keys fetched by many clients.\r\n#\r\n# For this reason it is possible to configure a maximum fill value for the\r\n# invalidation table. By default it is set to 1M of keys, and once this limit\r\n# is reached, Redis will start to evict keys in the invalidation table\r\n# even if they were not modified, just to reclaim memory: this will in turn\r\n# force the clients to invalidate the cached values. Basically the table\r\n# maximum size is a trade off between the memory you want to spend server\r\n# side to track information about who cached what, and the ability of clients\r\n# to retain cached objects in memory.\r\n#\r\n# If you set the value to 0, it means there are no limits, and Redis will\r\n# retain as many keys as needed in the invalidation table.\r\n# In the \"stats\" INFO section, you can find information about the number of\r\n# keys in the invalidation table at every given moment.\r\n#\r\n# Note: when key tracking is used in broadcasting mode, no memory is used\r\n# in the server side so this setting is useless.\r\n#\r\n# tracking-table-max-keys 1000000\r\n\r\n################################## SECURITY ###################################\r\n\r\n# Warning: since Redis is pretty fast, an outside user can try up to\r\n# 1 million passwords per second against a modern box. This means that you\r\n# should use very strong passwords, otherwise they will be very easy to break.\r\n# Note that because the password is really a shared secret between the client\r\n# and the server, and should not be memorized by any human, the password\r\n# can be easily a long string from /dev/urandom or whatever, so by using a\r\n# long and unguessable password no brute force attack will be possible.\r\n\r\n# Redis ACL users are defined in the following format:\r\n#\r\n#   user <username> ... acl rules ...\r\n#\r\n# For example:\r\n#\r\n#   user worker +@list +@connection ~jobs:* on >ffa9203c493aa99\r\n#\r\n# The special username \"default\" is used for new connections. If this user\r\n# has the \"nopass\" rule, then new connections will be immediately authenticated\r\n# as the \"default\" user without the need of any password provided via the\r\n# AUTH command. Otherwise if the \"default\" user is not flagged with \"nopass\"\r\n# the connections will start in not authenticated state, and will require\r\n# AUTH (or the HELLO command AUTH option) in order to be authenticated and\r\n# start to work.\r\n#\r\n# The ACL rules that describe what a user can do are the following:\r\n#\r\n#  on           Enable the user: it is possible to authenticate as this user.\r\n#  off          Disable the user: it's no longer possible to authenticate\r\n#               with this user, however the already authenticated connections\r\n#               will still work.\r\n#  +<command>   Allow the execution of that command\r\n#  -<command>   Disallow the execution of that command\r\n#  +@<category> Allow the execution of all the commands in such category\r\n#               with valid categories are like @admin, @set, @sortedset, ...\r\n#               and so forth, see the full list in the server.c file where\r\n#               the Redis command table is described and defined.\r\n#               The special category @all means all the commands, but currently\r\n#               present in the server, and that will be loaded in the future\r\n#               via modules.\r\n#  +<command>|subcommand    Allow a specific subcommand of an otherwise\r\n#                           disabled command. Note that this form is not\r\n#                           allowed as negative like -DEBUG|SEGFAULT, but\r\n#                           only additive starting with \"+\".\r\n#  allcommands  Alias for +@all. Note that it implies the ability to execute\r\n#               all the future commands loaded via the modules system.\r\n#  nocommands   Alias for -@all.\r\n#  ~<pattern>   Add a pattern of keys that can be mentioned as part of\r\n#               commands. For instance ~* allows all the keys. The pattern\r\n#               is a glob-style pattern like the one of KEYS.\r\n#               It is possible to specify multiple patterns.\r\n#  allkeys      Alias for ~*\r\n#  resetkeys    Flush the list of allowed keys patterns.\r\n#  ><password>  Add this password to the list of valid password for the user.\r\n#               For example >mypass will add \"mypass\" to the list.\r\n#               This directive clears the \"nopass\" flag (see later).\r\n#  <<password>  Remove this password from the list of valid passwords.\r\n#  nopass       All the set passwords of the user are removed, and the user\r\n#               is flagged as requiring no password: it means that every\r\n#               password will work against this user. If this directive is\r\n#               used for the default user, every new connection will be\r\n#               immediately authenticated with the default user without\r\n#               any explicit AUTH command required. Note that the \"resetpass\"\r\n#               directive will clear this condition.\r\n#  resetpass    Flush the list of allowed passwords. Moreover removes the\r\n#               \"nopass\" status. After \"resetpass\" the user has no associated\r\n#               passwords and there is no way to authenticate without adding\r\n#               some password (or setting it as \"nopass\" later).\r\n#  reset        Performs the following actions: resetpass, resetkeys, off,\r\n#               -@all. The user returns to the same state it has immediately\r\n#               after its creation.\r\n#\r\n# ACL rules can be specified in any order: for instance you can start with\r\n# passwords, then flags, or key patterns. However note that the additive\r\n# and subtractive rules will CHANGE MEANING depending on the ordering.\r\n# For instance see the following example:\r\n#\r\n#   user alice on +@all -DEBUG ~* >somepassword\r\n#\r\n# This will allow \"alice\" to use all the commands with the exception of the\r\n# DEBUG command, since +@all added all the commands to the set of the commands\r\n# alice can use, and later DEBUG was removed. However if we invert the order\r\n# of two ACL rules the result will be different:\r\n#\r\n#   user alice on -DEBUG +@all ~* >somepassword\r\n#\r\n# Now DEBUG was removed when alice had yet no commands in the set of allowed\r\n# commands, later all the commands are added, so the user will be able to\r\n# execute everything.\r\n#\r\n# Basically ACL rules are processed left-to-right.\r\n#\r\n# For more information about ACL configuration please refer to\r\n# the Redis web site at https://redis.io/topics/acl\r\n\r\n# ACL LOG\r\n#\r\n# The ACL Log tracks failed commands and authentication events associated\r\n# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked \r\n# by ACLs. The ACL Log is stored in memory. You can reclaim memory with \r\n# ACL LOG RESET. Define the maximum entry length of the ACL Log below.\r\nacllog-max-len 128\r\n\r\n# Using an external ACL file\r\n#\r\n# Instead of configuring users here in this file, it is possible to use\r\n# a stand-alone file just listing users. The two methods cannot be mixed:\r\n# if you configure users here and at the same time you activate the external\r\n# ACL file, the server will refuse to start.\r\n#\r\n# The format of the external ACL user file is exactly the same as the\r\n# format that is used inside redis.conf to describe users.\r\n#\r\n# aclfile /etc/redis/users.acl\r\n\r\n# IMPORTANT NOTE: starting with Redis 6 \"requirepass\" is just a compatibility\r\n# layer on top of the new ACL system. The option effect will be just setting\r\n# the password for the default user. Clients will still authenticate using\r\n# AUTH <password> as usually, or more explicitly with AUTH default <password>\r\n# if they follow the new protocol: both will work.\r\n#\r\nrequirepass 123456789\r\n\r\n# Command renaming (DEPRECATED).\r\n#\r\n# ------------------------------------------------------------------------\r\n# WARNING: avoid using this option if possible. Instead use ACLs to remove\r\n# commands from the default user, and put them only in some admin user you\r\n# create for administrative purposes.\r\n# ------------------------------------------------------------------------\r\n#\r\n# It is possible to change the name of dangerous commands in a shared\r\n# environment. For instance the CONFIG command may be renamed into something\r\n# hard to guess so that it will still be available for internal-use tools\r\n# but not available for general clients.\r\n#\r\n# Example:\r\n#\r\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\r\n#\r\n# It is also possible to completely kill a command by renaming it into\r\n# an empty string:\r\n#\r\n# rename-command CONFIG \"\"\r\n#\r\n# Please note that changing the name of commands that are logged into the\r\n# AOF file or transmitted to replicas may cause problems.\r\n\r\n################################### CLIENTS ####################################\r\n\r\n# Set the max number of connected clients at the same time. By default\r\n# this limit is set to 10000 clients, however if the Redis server is not\r\n# able to configure the process file limit to allow for the specified limit\r\n# the max number of allowed clients is set to the current file limit\r\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\r\n#\r\n# Once the limit is reached Redis will close all the new connections sending\r\n# an error 'max number of clients reached'.\r\n#\r\n# IMPORTANT: When Redis Cluster is used, the max number of connections is also\r\n# shared with the cluster bus: every node in the cluster will use two\r\n# connections, one incoming and another outgoing. It is important to size the\r\n# limit accordingly in case of very large clusters.\r\n#\r\n# maxclients 10000\r\n\r\n############################## MEMORY MANAGEMENT ################################\r\n\r\n# Set a memory usage limit to the specified amount of bytes.\r\n# When the memory limit is reached Redis will try to remove keys\r\n# according to the eviction policy selected (see maxmemory-policy).\r\n#\r\n# If Redis can't remove keys according to the policy, or if the policy is\r\n# set to 'noeviction', Redis will start to reply with errors to commands\r\n# that would use more memory, like SET, LPUSH, and so on, and will continue\r\n# to reply to read-only commands like GET.\r\n#\r\n# This option is usually useful when using Redis as an LRU or LFU cache, or to\r\n# set a hard memory limit for an instance (using the 'noeviction' policy).\r\n#\r\n# WARNING: If you have replicas attached to an instance with maxmemory on,\r\n# the size of the output buffers needed to feed the replicas are subtracted\r\n# from the used memory count, so that network problems / resyncs will\r\n# not trigger a loop where keys are evicted, and in turn the output\r\n# buffer of replicas is full with DELs of keys evicted triggering the deletion\r\n# of more keys, and so forth until the database is completely emptied.\r\n#\r\n# In short... if you have replicas attached it is suggested that you set a lower\r\n# limit for maxmemory so that there is some free RAM on the system for replica\r\n# output buffers (but this is not needed if the policy is 'noeviction').\r\n#\r\n# maxmemory <bytes>\r\n\r\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\r\n# is reached. You can select one from the following behaviors:\r\n#\r\n# volatile-lru -> Evict using approximated LRU, only keys with an expire set.\r\n# allkeys-lru -> Evict any key using approximated LRU.\r\n# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.\r\n# allkeys-lfu -> Evict any key using approximated LFU.\r\n# volatile-random -> Remove a random key having an expire set.\r\n# allkeys-random -> Remove a random key, any key.\r\n# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)\r\n# noeviction -> Don't evict anything, just return an error on write operations.\r\n#\r\n# LRU means Least Recently Used\r\n# LFU means Least Frequently Used\r\n#\r\n# Both LRU, LFU and volatile-ttl are implemented using approximated\r\n# randomized algorithms.\r\n#\r\n# Note: with any of the above policies, Redis will return an error on write\r\n#       operations, when there are no suitable keys for eviction.\r\n#\r\n#       At the date of writing these commands are: set setnx setex append\r\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\r\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\r\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\r\n#       getset mset msetnx exec sort\r\n#\r\n# The default is:\r\n#\r\n# maxmemory-policy noeviction\r\n\r\n# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated\r\n# algorithms (in order to save memory), so you can tune it for speed or\r\n# accuracy. By default Redis will check five keys and pick the one that was\r\n# used least recently, you can change the sample size using the following\r\n# configuration directive.\r\n#\r\n# The default of 5 produces good enough results. 10 Approximates very closely\r\n# true LRU but costs more CPU. 3 is faster but not very accurate.\r\n#\r\n# maxmemory-samples 5\r\n\r\n# Starting from Redis 5, by default a replica will ignore its maxmemory setting\r\n# (unless it is promoted to master after a failover or manually). It means\r\n# that the eviction of keys will be just handled by the master, sending the\r\n# DEL commands to the replica as keys evict in the master side.\r\n#\r\n# This behavior ensures that masters and replicas stay consistent, and is usually\r\n# what you want, however if your replica is writable, or you want the replica\r\n# to have a different memory setting, and you are sure all the writes performed\r\n# to the replica are idempotent, then you may change this default (but be sure\r\n# to understand what you are doing).\r\n#\r\n# Note that since the replica by default does not evict, it may end using more\r\n# memory than the one set via maxmemory (there are certain buffers that may\r\n# be larger on the replica, or data structures may sometimes take more memory\r\n# and so forth). So make sure you monitor your replicas and make sure they\r\n# have enough memory to never hit a real out-of-memory condition before the\r\n# master hits the configured maxmemory setting.\r\n#\r\n# replica-ignore-maxmemory yes\r\n\r\n# Redis reclaims expired keys in two ways: upon access when those keys are\r\n# found to be expired, and also in background, in what is called the\r\n# \"active expire key\". The key space is slowly and interactively scanned\r\n# looking for expired keys to reclaim, so that it is possible to free memory\r\n# of keys that are expired and will never be accessed again in a short time.\r\n#\r\n# The default effort of the expire cycle will try to avoid having more than\r\n# ten percent of expired keys still in memory, and will try to avoid consuming\r\n# more than 25% of total memory and to add latency to the system. However\r\n# it is possible to increase the expire \"effort\" that is normally set to\r\n# \"1\", to a greater value, up to the value \"10\". At its maximum value the\r\n# system will use more CPU, longer cycles (and technically may introduce\r\n# more latency), and will tolerate less already expired keys still present\r\n# in the system. It's a tradeoff between memory, CPU and latency.\r\n#\r\n# active-expire-effort 1\r\n\r\n############################# LAZY FREEING ####################################\r\n\r\n# Redis has two primitives to delete keys. One is called DEL and is a blocking\r\n# deletion of the object. It means that the server stops processing new commands\r\n# in order to reclaim all the memory associated with an object in a synchronous\r\n# way. If the key deleted is associated with a small object, the time needed\r\n# in order to execute the DEL command is very small and comparable to most other\r\n# O(1) or O(log_N) commands in Redis. However if the key is associated with an\r\n# aggregated value containing millions of elements, the server can block for\r\n# a long time (even seconds) in order to complete the operation.\r\n#\r\n# For the above reasons Redis also offers non blocking deletion primitives\r\n# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and\r\n# FLUSHDB commands, in order to reclaim memory in background. Those commands\r\n# are executed in constant time. Another thread will incrementally free the\r\n# object in the background as fast as possible.\r\n#\r\n# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.\r\n# It's up to the design of the application to understand when it is a good\r\n# idea to use one or the other. However the Redis server sometimes has to\r\n# delete keys or flush the whole database as a side effect of other operations.\r\n# Specifically Redis deletes objects independently of a user call in the\r\n# following scenarios:\r\n#\r\n# 1) On eviction, because of the maxmemory and maxmemory policy configurations,\r\n#    in order to make room for new data, without going over the specified\r\n#    memory limit.\r\n# 2) Because of expire: when a key with an associated time to live (see the\r\n#    EXPIRE command) must be deleted from memory.\r\n# 3) Because of a side effect of a command that stores data on a key that may\r\n#    already exist. For example the RENAME command may delete the old key\r\n#    content when it is replaced with another one. Similarly SUNIONSTORE\r\n#    or SORT with STORE option may delete existing keys. The SET command\r\n#    itself removes any old content of the specified key in order to replace\r\n#    it with the specified string.\r\n# 4) During replication, when a replica performs a full resynchronization with\r\n#    its master, the content of the whole database is removed in order to\r\n#    load the RDB file just transferred.\r\n#\r\n# In all the above cases the default is to delete objects in a blocking way,\r\n# like if DEL was called. However you can configure each case specifically\r\n# in order to instead release memory in a non-blocking way like if UNLINK\r\n# was called, using the following configuration directives.\r\n\r\nlazyfree-lazy-eviction no\r\nlazyfree-lazy-expire no\r\nlazyfree-lazy-server-del no\r\nreplica-lazy-flush no\r\n\r\n# It is also possible, for the case when to replace the user code DEL calls\r\n# with UNLINK calls is not easy, to modify the default behavior of the DEL\r\n# command to act exactly like UNLINK, using the following configuration\r\n# directive:\r\n\r\nlazyfree-lazy-user-del no\r\n\r\n################################ THREADED I/O #################################\r\n\r\n# Redis is mostly single threaded, however there are certain threaded\r\n# operations such as UNLINK, slow I/O accesses and other things that are\r\n# performed on side threads.\r\n#\r\n# Now it is also possible to handle Redis clients socket reads and writes\r\n# in different I/O threads. Since especially writing is so slow, normally\r\n# Redis users use pipelining in order to speed up the Redis performances per\r\n# core, and spawn multiple instances in order to scale more. Using I/O\r\n# threads it is possible to easily speedup two times Redis without resorting\r\n# to pipelining nor sharding of the instance.\r\n#\r\n# By default threading is disabled, we suggest enabling it only in machines\r\n# that have at least 4 or more cores, leaving at least one spare core.\r\n# Using more than 8 threads is unlikely to help much. We also recommend using\r\n# threaded I/O only if you actually have performance problems, with Redis\r\n# instances being able to use a quite big percentage of CPU time, otherwise\r\n# there is no point in using this feature.\r\n#\r\n# So for instance if you have a four cores boxes, try to use 2 or 3 I/O\r\n# threads, if you have a 8 cores, try to use 6 threads. In order to\r\n# enable I/O threads use the following configuration directive:\r\n#\r\n# io-threads 4\r\n#\r\n# Setting io-threads to 1 will just use the main thread as usual.\r\n# When I/O threads are enabled, we only use threads for writes, that is\r\n# to thread the write(2) syscall and transfer the client buffers to the\r\n# socket. However it is also possible to enable threading of reads and\r\n# protocol parsing using the following configuration directive, by setting\r\n# it to yes:\r\n#\r\n# io-threads-do-reads no\r\n#\r\n# Usually threading reads doesn't help much.\r\n#\r\n# NOTE 1: This configuration directive cannot be changed at runtime via\r\n# CONFIG SET. Aso this feature currently does not work when SSL is\r\n# enabled.\r\n#\r\n# NOTE 2: If you want to test the Redis speedup using redis-benchmark, make\r\n# sure you also run the benchmark itself in threaded mode, using the\r\n# --threads option to match the number of Redis threads, otherwise you'll not\r\n# be able to notice the improvements.\r\n\r\n############################ KERNEL OOM CONTROL ##############################\r\n\r\n# On Linux, it is possible to hint the kernel OOM killer on what processes\r\n# should be killed first when out of memory.\r\n#\r\n# Enabling this feature makes Redis actively control the oom_score_adj value\r\n# for all its processes, depending on their role. The default scores will\r\n# attempt to have background child processes killed before all others, and\r\n# replicas killed before masters.\r\n#\r\n# Redis supports three options:\r\n#\r\n# no:       Don't make changes to oom-score-adj (default).\r\n# yes:      Alias to \"relative\" see below.\r\n# absolute: Values in oom-score-adj-values are written as is to the kernel.\r\n# relative: Values are used relative to the initial value of oom_score_adj when\r\n#           the server starts and are then clamped to a range of -1000 to 1000.\r\n#           Because typically the initial value is 0, they will often match the\r\n#           absolute values.\r\noom-score-adj no\r\n\r\n# When oom-score-adj is used, this directive controls the specific values used\r\n# for master, replica and background child processes. Values range -2000 to\r\n# 2000 (higher means more likely to be killed).\r\n#\r\n# Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)\r\n# can freely increase their value, but not decrease it below its initial\r\n# settings. This means that setting oom-score-adj to \"relative\" and setting the\r\n# oom-score-adj-values to positive values will always succeed.\r\noom-score-adj-values 0 200 800\r\n\r\n############################## APPEND ONLY MODE ###############################\r\n\r\n# By default Redis asynchronously dumps the dataset on disk. This mode is\r\n# good enough in many applications, but an issue with the Redis process or\r\n# a power outage may result into a few minutes of writes lost (depending on\r\n# the configured save points).\r\n#\r\n# The Append Only File is an alternative persistence mode that provides\r\n# much better durability. For instance using the default data fsync policy\r\n# (see later in the config file) Redis can lose just one second of writes in a\r\n# dramatic event like a server power outage, or a single write if something\r\n# wrong with the Redis process itself happens, but the operating system is\r\n# still running correctly.\r\n#\r\n# AOF and RDB persistence can be enabled at the same time without problems.\r\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\r\n# with the better durability guarantees.\r\n#\r\n# Please check http://redis.io/topics/persistence for more information.\r\n\r\nappendonly no\r\n\r\n# The name of the append only file (default: \"appendonly.aof\")\r\n\r\nappendfilename \"appendonly.aof\"\r\n\r\n# The fsync() call tells the Operating System to actually write data on disk\r\n# instead of waiting for more data in the output buffer. Some OS will really flush\r\n# data on disk, some other OS will just try to do it ASAP.\r\n#\r\n# Redis supports three different modes:\r\n#\r\n# no: don't fsync, just let the OS flush the data when it wants. Faster.\r\n# always: fsync after every write to the append only log. Slow, Safest.\r\n# everysec: fsync only one time every second. Compromise.\r\n#\r\n# The default is \"everysec\", as that's usually the right compromise between\r\n# speed and data safety. It's up to you to understand if you can relax this to\r\n# \"no\" that will let the operating system flush the output buffer when\r\n# it wants, for better performances (but if you can live with the idea of\r\n# some data loss consider the default persistence mode that's snapshotting),\r\n# or on the contrary, use \"always\" that's very slow but a bit safer than\r\n# everysec.\r\n#\r\n# More details please check the following article:\r\n# http://antirez.com/post/redis-persistence-demystified.html\r\n#\r\n# If unsure, use \"everysec\".\r\n\r\n# appendfsync always\r\nappendfsync everysec\r\n# appendfsync no\r\n\r\n# When the AOF fsync policy is set to always or everysec, and a background\r\n# saving process (a background save or AOF log background rewriting) is\r\n# performing a lot of I/O against the disk, in some Linux configurations\r\n# Redis may block too long on the fsync() call. Note that there is no fix for\r\n# this currently, as even performing fsync in a different thread will block\r\n# our synchronous write(2) call.\r\n#\r\n# In order to mitigate this problem it's possible to use the following option\r\n# that will prevent fsync() from being called in the main process while a\r\n# BGSAVE or BGREWRITEAOF is in progress.\r\n#\r\n# This means that while another child is saving, the durability of Redis is\r\n# the same as \"appendfsync none\". In practical terms, this means that it is\r\n# possible to lose up to 30 seconds of log in the worst scenario (with the\r\n# default Linux settings).\r\n#\r\n# If you have latency problems turn this to \"yes\". Otherwise leave it as\r\n# \"no\" that is the safest pick from the point of view of durability.\r\n\r\nno-appendfsync-on-rewrite no\r\n\r\n# Automatic rewrite of the append only file.\r\n# Redis is able to automatically rewrite the log file implicitly calling\r\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\r\n#\r\n# This is how it works: Redis remembers the size of the AOF file after the\r\n# latest rewrite (if no rewrite has happened since the restart, the size of\r\n# the AOF at startup is used).\r\n#\r\n# This base size is compared to the current size. If the current size is\r\n# bigger than the specified percentage, the rewrite is triggered. Also\r\n# you need to specify a minimal size for the AOF file to be rewritten, this\r\n# is useful to avoid rewriting the AOF file even if the percentage increase\r\n# is reached but it is still pretty small.\r\n#\r\n# Specify a percentage of zero in order to disable the automatic AOF\r\n# rewrite feature.\r\n\r\nauto-aof-rewrite-percentage 100\r\nauto-aof-rewrite-min-size 64mb\r\n\r\n# An AOF file may be found to be truncated at the end during the Redis\r\n# startup process, when the AOF data gets loaded back into memory.\r\n# This may happen when the system where Redis is running\r\n# crashes, especially when an ext4 filesystem is mounted without the\r\n# data=ordered option (however this can't happen when Redis itself\r\n# crashes or aborts but the operating system still works correctly).\r\n#\r\n# Redis can either exit with an error when this happens, or load as much\r\n# data as possible (the default now) and start if the AOF file is found\r\n# to be truncated at the end. The following option controls this behavior.\r\n#\r\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\r\n# the Redis server starts emitting a log to inform the user of the event.\r\n# Otherwise if the option is set to no, the server aborts with an error\r\n# and refuses to start. When the option is set to no, the user requires\r\n# to fix the AOF file using the \"redis-check-aof\" utility before to restart\r\n# the server.\r\n#\r\n# Note that if the AOF file will be found to be corrupted in the middle\r\n# the server will still exit with an error. This option only applies when\r\n# Redis will try to read more data from the AOF file but not enough bytes\r\n# will be found.\r\naof-load-truncated yes\r\n\r\n# When rewriting the AOF file, Redis is able to use an RDB preamble in the\r\n# AOF file for faster rewrites and recoveries. When this option is turned\r\n# on the rewritten AOF file is composed of two different stanzas:\r\n#\r\n#   [RDB file][AOF tail]\r\n#\r\n# When loading, Redis recognizes that the AOF file starts with the \"REDIS\"\r\n# string and loads the prefixed RDB file, then continues loading the AOF\r\n# tail.\r\naof-use-rdb-preamble yes\r\n\r\n################################ LUA SCRIPTING  ###############################\r\n\r\n# Max execution time of a Lua script in milliseconds.\r\n#\r\n# If the maximum execution time is reached Redis will log that a script is\r\n# still in execution after the maximum allowed time and will start to\r\n# reply to queries with an error.\r\n#\r\n# When a long running script exceeds the maximum execution time only the\r\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\r\n# used to stop a script that did not yet call any write commands. The second\r\n# is the only way to shut down the server in the case a write command was\r\n# already issued by the script but the user doesn't want to wait for the natural\r\n# termination of the script.\r\n#\r\n# Set it to 0 or a negative value for unlimited execution without warnings.\r\nlua-time-limit 5000\r\n\r\n################################ REDIS CLUSTER  ###############################\r\n\r\n# Normal Redis instances can't be part of a Redis Cluster; only nodes that are\r\n# started as cluster nodes can. In order to start a Redis instance as a\r\n# cluster node enable the cluster support uncommenting the following:\r\n#\r\n# cluster-enabled yes\r\n\r\n# Every cluster node has a cluster configuration file. This file is not\r\n# intended to be edited by hand. It is created and updated by Redis nodes.\r\n# Every Redis Cluster node requires a different cluster configuration file.\r\n# Make sure that instances running in the same system do not have\r\n# overlapping cluster configuration file names.\r\n#\r\n# cluster-config-file nodes-6379.conf\r\n\r\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\r\n# for it to be considered in failure state.\r\n# Most other internal time limits are a multiple of the node timeout.\r\n#\r\n# cluster-node-timeout 15000\r\n\r\n# A replica of a failing master will avoid to start a failover if its data\r\n# looks too old.\r\n#\r\n# There is no simple way for a replica to actually have an exact measure of\r\n# its \"data age\", so the following two checks are performed:\r\n#\r\n# 1) If there are multiple replicas able to failover, they exchange messages\r\n#    in order to try to give an advantage to the replica with the best\r\n#    replication offset (more data from the master processed).\r\n#    Replicas will try to get their rank by offset, and apply to the start\r\n#    of the failover a delay proportional to their rank.\r\n#\r\n# 2) Every single replica computes the time of the last interaction with\r\n#    its master. This can be the last ping or command received (if the master\r\n#    is still in the \"connected\" state), or the time that elapsed since the\r\n#    disconnection with the master (if the replication link is currently down).\r\n#    If the last interaction is too old, the replica will not try to failover\r\n#    at all.\r\n#\r\n# The point \"2\" can be tuned by user. Specifically a replica will not perform\r\n# the failover if, since the last interaction with the master, the time\r\n# elapsed is greater than:\r\n#\r\n#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period\r\n#\r\n# So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor\r\n# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the\r\n# replica will not try to failover if it was not able to talk with the master\r\n# for longer than 310 seconds.\r\n#\r\n# A large cluster-replica-validity-factor may allow replicas with too old data to failover\r\n# a master, while a too small value may prevent the cluster from being able to\r\n# elect a replica at all.\r\n#\r\n# For maximum availability, it is possible to set the cluster-replica-validity-factor\r\n# to a value of 0, which means, that replicas will always try to failover the\r\n# master regardless of the last time they interacted with the master.\r\n# (However they'll always try to apply a delay proportional to their\r\n# offset rank).\r\n#\r\n# Zero is the only value able to guarantee that when all the partitions heal\r\n# the cluster will always be able to continue.\r\n#\r\n# cluster-replica-validity-factor 10\r\n\r\n# Cluster replicas are able to migrate to orphaned masters, that are masters\r\n# that are left without working replicas. This improves the cluster ability\r\n# to resist to failures as otherwise an orphaned master can't be failed over\r\n# in case of failure if it has no working replicas.\r\n#\r\n# Replicas migrate to orphaned masters only if there are still at least a\r\n# given number of other working replicas for their old master. This number\r\n# is the \"migration barrier\". A migration barrier of 1 means that a replica\r\n# will migrate only if there is at least 1 other working replica for its master\r\n# and so forth. It usually reflects the number of replicas you want for every\r\n# master in your cluster.\r\n#\r\n# Default is 1 (replicas migrate only if their masters remain with at least\r\n# one replica). To disable migration just set it to a very large value.\r\n# A value of 0 can be set but is useful only for debugging and dangerous\r\n# in production.\r\n#\r\n# cluster-migration-barrier 1\r\n\r\n# By default Redis Cluster nodes stop accepting queries if they detect there\r\n# is at least a hash slot uncovered (no available node is serving it).\r\n# This way if the cluster is partially down (for example a range of hash slots\r\n# are no longer covered) all the cluster becomes, eventually, unavailable.\r\n# It automatically returns available as soon as all the slots are covered again.\r\n#\r\n# However sometimes you want the subset of the cluster which is working,\r\n# to continue to accept queries for the part of the key space that is still\r\n# covered. In order to do so, just set the cluster-require-full-coverage\r\n# option to no.\r\n#\r\n# cluster-require-full-coverage yes\r\n\r\n# This option, when set to yes, prevents replicas from trying to failover its\r\n# master during master failures. However the master can still perform a\r\n# manual failover, if forced to do so.\r\n#\r\n# This is useful in different scenarios, especially in the case of multiple\r\n# data center operations, where we want one side to never be promoted if not\r\n# in the case of a total DC failure.\r\n#\r\n# cluster-replica-no-failover no\r\n\r\n# This option, when set to yes, allows nodes to serve read traffic while the\r\n# the cluster is in a down state, as long as it believes it owns the slots. \r\n#\r\n# This is useful for two cases.  The first case is for when an application \r\n# doesn't require consistency of data during node failures or network partitions.\r\n# One example of this is a cache, where as long as the node has the data it\r\n# should be able to serve it. \r\n#\r\n# The second use case is for configurations that don't meet the recommended  \r\n# three shards but want to enable cluster mode and scale later. A \r\n# master outage in a 1 or 2 shard configuration causes a read/write outage to the\r\n# entire cluster without this option set, with it set there is only a write outage.\r\n# Without a quorum of masters, slot ownership will not change automatically. \r\n#\r\n# cluster-allow-reads-when-down no\r\n\r\n# In order to setup your cluster make sure to read the documentation\r\n# available at http://redis.io web site.\r\n\r\n########################## CLUSTER DOCKER/NAT support  ########################\r\n\r\n# In certain deployments, Redis Cluster nodes address discovery fails, because\r\n# addresses are NAT-ted or because ports are forwarded (the typical case is\r\n# Docker and other containers).\r\n#\r\n# In order to make Redis Cluster working in such environments, a static\r\n# configuration where each node knows its public address is needed. The\r\n# following two options are used for this scope, and are:\r\n#\r\n# * cluster-announce-ip\r\n# * cluster-announce-port\r\n# * cluster-announce-bus-port\r\n#\r\n# Each instructs the node about its address, client port, and cluster message\r\n# bus port. The information is then published in the header of the bus packets\r\n# so that other nodes will be able to correctly map the address of the node\r\n# publishing the information.\r\n#\r\n# If the above options are not used, the normal Redis Cluster auto-detection\r\n# will be used instead.\r\n#\r\n# Note that when remapped, the bus port may not be at the fixed offset of\r\n# clients port + 10000, so you can specify any port and bus-port depending\r\n# on how they get remapped. If the bus-port is not set, a fixed offset of\r\n# 10000 will be used as usual.\r\n#\r\n# Example:\r\n#\r\n# cluster-announce-ip 10.1.1.5\r\n# cluster-announce-port 6379\r\n# cluster-announce-bus-port 6380\r\n\r\n################################## SLOW LOG ###################################\r\n\r\n# The Redis Slow Log is a system to log queries that exceeded a specified\r\n# execution time. The execution time does not include the I/O operations\r\n# like talking with the client, sending the reply and so forth,\r\n# but just the time needed to actually execute the command (this is the only\r\n# stage of command execution where the thread is blocked and can not serve\r\n# other requests in the meantime).\r\n#\r\n# You can configure the slow log with two parameters: one tells Redis\r\n# what is the execution time, in microseconds, to exceed in order for the\r\n# command to get logged, and the other parameter is the length of the\r\n# slow log. When a new command is logged the oldest one is removed from the\r\n# queue of logged commands.\r\n\r\n# The following time is expressed in microseconds, so 1000000 is equivalent\r\n# to one second. Note that a negative number disables the slow log, while\r\n# a value of zero forces the logging of every command.\r\nslowlog-log-slower-than 10000\r\n\r\n# There is no limit to this length. Just be aware that it will consume memory.\r\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\r\nslowlog-max-len 128\r\n\r\n################################ LATENCY MONITOR ##############################\r\n\r\n# The Redis latency monitoring subsystem samples different operations\r\n# at runtime in order to collect data related to possible sources of\r\n# latency of a Redis instance.\r\n#\r\n# Via the LATENCY command this information is available to the user that can\r\n# print graphs and obtain reports.\r\n#\r\n# The system only logs operations that were performed in a time equal or\r\n# greater than the amount of milliseconds specified via the\r\n# latency-monitor-threshold configuration directive. When its value is set\r\n# to zero, the latency monitor is turned off.\r\n#\r\n# By default latency monitoring is disabled since it is mostly not needed\r\n# if you don't have latency issues, and collecting data has a performance\r\n# impact, that while very small, can be measured under big load. Latency\r\n# monitoring can easily be enabled at runtime using the command\r\n# \"CONFIG SET latency-monitor-threshold <milliseconds>\" if needed.\r\nlatency-monitor-threshold 0\r\n\r\n############################# EVENT NOTIFICATION ##############################\r\n\r\n# Redis can notify Pub/Sub clients about events happening in the key space.\r\n# This feature is documented at http://redis.io/topics/notifications\r\n#\r\n# For instance if keyspace events notification is enabled, and a client\r\n# performs a DEL operation on key \"foo\" stored in the Database 0, two\r\n# messages will be published via Pub/Sub:\r\n#\r\n# PUBLISH __keyspace@0__:foo del\r\n# PUBLISH __keyevent@0__:del foo\r\n#\r\n# It is possible to select the events that Redis will notify among a set\r\n# of classes. Every class is identified by a single character:\r\n#\r\n#  K     Keyspace events, published with __keyspace@<db>__ prefix.\r\n#  E     Keyevent events, published with __keyevent@<db>__ prefix.\r\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\r\n#  $     String commands\r\n#  l     List commands\r\n#  s     Set commands\r\n#  h     Hash commands\r\n#  z     Sorted set commands\r\n#  x     Expired events (events generated every time a key expires)\r\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\r\n#  t     Stream commands\r\n#  m     Key-miss events (Note: It is not included in the 'A' class)\r\n#  A     Alias for g$lshzxet, so that the \"AKE\" string means all the events\r\n#        (Except key-miss events which are excluded from 'A' due to their\r\n#         unique nature).\r\n#\r\n#  The \"notify-keyspace-events\" takes as argument a string that is composed\r\n#  of zero or multiple characters. The empty string means that notifications\r\n#  are disabled.\r\n#\r\n#  Example: to enable list and generic events, from the point of view of the\r\n#           event name, use:\r\n#\r\n#  notify-keyspace-events Elg\r\n#\r\n#  Example 2: to get the stream of the expired keys subscribing to channel\r\n#             name __keyevent@0__:expired use:\r\n#\r\n#  notify-keyspace-events Ex\r\n#\r\n#  By default all notifications are disabled because most users don't need\r\n#  this feature and the feature has some overhead. Note that if you don't\r\n#  specify at least one of K or E, no events will be delivered.\r\nnotify-keyspace-events \"\"\r\n\r\n############################### GOPHER SERVER #################################\r\n\r\n# Redis contains an implementation of the Gopher protocol, as specified in\r\n# the RFC 1436 (https://www.ietf.org/rfc/rfc1436.txt).\r\n#\r\n# The Gopher protocol was very popular in the late '90s. It is an alternative\r\n# to the web, and the implementation both server and client side is so simple\r\n# that the Redis server has just 100 lines of code in order to implement this\r\n# support.\r\n#\r\n# What do you do with Gopher nowadays? Well Gopher never *really* died, and\r\n# lately there is a movement in order for the Gopher more hierarchical content\r\n# composed of just plain text documents to be resurrected. Some want a simpler\r\n# internet, others believe that the mainstream internet became too much\r\n# controlled, and it's cool to create an alternative space for people that\r\n# want a bit of fresh air.\r\n#\r\n# Anyway for the 10nth birthday of the Redis, we gave it the Gopher protocol\r\n# as a gift.\r\n#\r\n# --- HOW IT WORKS? ---\r\n#\r\n# The Redis Gopher support uses the inline protocol of Redis, and specifically\r\n# two kind of inline requests that were anyway illegal: an empty request\r\n# or any request that starts with \"/\" (there are no Redis commands starting\r\n# with such a slash). Normal RESP2/RESP3 requests are completely out of the\r\n# path of the Gopher protocol implementation and are served as usual as well.\r\n#\r\n# If you open a connection to Redis when Gopher is enabled and send it\r\n# a string like \"/foo\", if there is a key named \"/foo\" it is served via the\r\n# Gopher protocol.\r\n#\r\n# In order to create a real Gopher \"hole\" (the name of a Gopher site in Gopher\r\n# talking), you likely need a script like the following:\r\n#\r\n#   https://github.com/antirez/gopher2redis\r\n#\r\n# --- SECURITY WARNING ---\r\n#\r\n# If you plan to put Redis on the internet in a publicly accessible address\r\n# to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance.\r\n# Once a password is set:\r\n#\r\n#   1. The Gopher server (when enabled, not by default) will still serve\r\n#      content via Gopher.\r\n#   2. However other commands cannot be called before the client will\r\n#      authenticate.\r\n#\r\n# So use the 'requirepass' option to protect your instance.\r\n#\r\n# Note that Gopher is not currently supported when 'io-threads-do-reads'\r\n# is enabled.\r\n#\r\n# To enable Gopher support, uncomment the following line and set the option\r\n# from no (the default) to yes.\r\n#\r\n# gopher-enabled no\r\n\r\n############################### ADVANCED CONFIG ###############################\r\n\r\n# Hashes are encoded using a memory efficient data structure when they have a\r\n# small number of entries, and the biggest entry does not exceed a given\r\n# threshold. These thresholds can be configured using the following directives.\r\nhash-max-ziplist-entries 512\r\nhash-max-ziplist-value 64\r\n\r\n# Lists are also encoded in a special way to save a lot of space.\r\n# The number of entries allowed per internal list node can be specified\r\n# as a fixed maximum size or a maximum number of elements.\r\n# For a fixed maximum size, use -5 through -1, meaning:\r\n# -5: max size: 64 Kb  <-- not recommended for normal workloads\r\n# -4: max size: 32 Kb  <-- not recommended\r\n# -3: max size: 16 Kb  <-- probably not recommended\r\n# -2: max size: 8 Kb   <-- good\r\n# -1: max size: 4 Kb   <-- good\r\n# Positive numbers mean store up to _exactly_ that number of elements\r\n# per list node.\r\n# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),\r\n# but if your use case is unique, adjust the settings as necessary.\r\nlist-max-ziplist-size -2\r\n\r\n# Lists may also be compressed.\r\n# Compress depth is the number of quicklist ziplist nodes from *each* side of\r\n# the list to *exclude* from compression.  The head and tail of the list\r\n# are always uncompressed for fast push/pop operations.  Settings are:\r\n# 0: disable all list compression\r\n# 1: depth 1 means \"don't start compressing until after 1 node into the list,\r\n#    going from either the head or tail\"\r\n#    So: [head]->node->node->...->node->[tail]\r\n#    [head], [tail] will always be uncompressed; inner nodes will compress.\r\n# 2: [head]->[next]->node->node->...->node->[prev]->[tail]\r\n#    2 here means: don't compress head or head->next or tail->prev or tail,\r\n#    but compress all nodes between them.\r\n# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]\r\n# etc.\r\nlist-compress-depth 0\r\n\r\n# Sets have a special encoding in just one case: when a set is composed\r\n# of just strings that happen to be integers in radix 10 in the range\r\n# of 64 bit signed integers.\r\n# The following configuration setting sets the limit in the size of the\r\n# set in order to use this special memory saving encoding.\r\nset-max-intset-entries 512\r\n\r\n# Similarly to hashes and lists, sorted sets are also specially encoded in\r\n# order to save a lot of space. This encoding is only used when the length and\r\n# elements of a sorted set are below the following limits:\r\nzset-max-ziplist-entries 128\r\nzset-max-ziplist-value 64\r\n\r\n# HyperLogLog sparse representation bytes limit. The limit includes the\r\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\r\n# this limit, it is converted into the dense representation.\r\n#\r\n# A value greater than 16000 is totally useless, since at that point the\r\n# dense representation is more memory efficient.\r\n#\r\n# The suggested value is ~ 3000 in order to have the benefits of\r\n# the space efficient encoding without slowing down too much PFADD,\r\n# which is O(N) with the sparse encoding. The value can be raised to\r\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\r\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\r\nhll-sparse-max-bytes 3000\r\n\r\n# Streams macro node max size / items. The stream data structure is a radix\r\n# tree of big nodes that encode multiple items inside. Using this configuration\r\n# it is possible to configure how big a single node can be in bytes, and the\r\n# maximum number of items it may contain before switching to a new node when\r\n# appending new stream entries. If any of the following settings are set to\r\n# zero, the limit is ignored, so for instance it is possible to set just a\r\n# max entires limit by setting max-bytes to 0 and max-entries to the desired\r\n# value.\r\nstream-node-max-bytes 4096\r\nstream-node-max-entries 100\r\n\r\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\r\n# order to help rehashing the main Redis hash table (the one mapping top-level\r\n# keys to values). The hash table implementation Redis uses (see dict.c)\r\n# performs a lazy rehashing: the more operation you run into a hash table\r\n# that is rehashing, the more rehashing \"steps\" are performed, so if the\r\n# server is idle the rehashing is never complete and some more memory is used\r\n# by the hash table.\r\n#\r\n# The default is to use this millisecond 10 times every second in order to\r\n# actively rehash the main dictionaries, freeing memory when possible.\r\n#\r\n# If unsure:\r\n# use \"activerehashing no\" if you have hard latency requirements and it is\r\n# not a good thing in your environment that Redis can reply from time to time\r\n# to queries with 2 milliseconds delay.\r\n#\r\n# use \"activerehashing yes\" if you don't have such hard requirements but\r\n# want to free memory asap when possible.\r\nactiverehashing yes\r\n\r\n# The client output buffer limits can be used to force disconnection of clients\r\n# that are not reading data from the server fast enough for some reason (a\r\n# common reason is that a Pub/Sub client can't consume messages as fast as the\r\n# publisher can produce them).\r\n#\r\n# The limit can be set differently for the three different classes of clients:\r\n#\r\n# normal -> normal clients including MONITOR clients\r\n# replica  -> replica clients\r\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\r\n#\r\n# The syntax of every client-output-buffer-limit directive is the following:\r\n#\r\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\r\n#\r\n# A client is immediately disconnected once the hard limit is reached, or if\r\n# the soft limit is reached and remains reached for the specified number of\r\n# seconds (continuously).\r\n# So for instance if the hard limit is 32 megabytes and the soft limit is\r\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\r\n# if the size of the output buffers reach 32 megabytes, but will also get\r\n# disconnected if the client reaches 16 megabytes and continuously overcomes\r\n# the limit for 10 seconds.\r\n#\r\n# By default normal clients are not limited because they don't receive data\r\n# without asking (in a push way), but just after a request, so only\r\n# asynchronous clients may create a scenario where data is requested faster\r\n# than it can read.\r\n#\r\n# Instead there is a default limit for pubsub and replica clients, since\r\n# subscribers and replicas receive data in a push fashion.\r\n#\r\n# Both the hard or the soft limit can be disabled by setting them to zero.\r\nclient-output-buffer-limit normal 0 0 0\r\nclient-output-buffer-limit replica 256mb 64mb 60\r\nclient-output-buffer-limit pubsub 32mb 8mb 60\r\n\r\n# Client query buffers accumulate new commands. They are limited to a fixed\r\n# amount by default in order to avoid that a protocol desynchronization (for\r\n# instance due to a bug in the client) will lead to unbound memory usage in\r\n# the query buffer. However you can configure it here if you have very special\r\n# needs, such us huge multi/exec requests or alike.\r\n#\r\n# client-query-buffer-limit 1gb\r\n\r\n# In the Redis protocol, bulk requests, that are, elements representing single\r\n# strings, are normally limited to 512 mb. However you can change this limit\r\n# here, but must be 1mb or greater\r\n#\r\n# proto-max-bulk-len 512mb\r\n\r\n# Redis calls an internal function to perform many background tasks, like\r\n# closing connections of clients in timeout, purging expired keys that are\r\n# never requested, and so forth.\r\n#\r\n# Not all tasks are performed with the same frequency, but Redis checks for\r\n# tasks to perform according to the specified \"hz\" value.\r\n#\r\n# By default \"hz\" is set to 10. Raising the value will use more CPU when\r\n# Redis is idle, but at the same time will make Redis more responsive when\r\n# there are many keys expiring at the same time, and timeouts may be\r\n# handled with more precision.\r\n#\r\n# The range is between 1 and 500, however a value over 100 is usually not\r\n# a good idea. Most users should use the default of 10 and raise this up to\r\n# 100 only in environments where very low latency is required.\r\nhz 10\r\n\r\n# Normally it is useful to have an HZ value which is proportional to the\r\n# number of clients connected. This is useful in order, for instance, to\r\n# avoid too many clients are processed for each background task invocation\r\n# in order to avoid latency spikes.\r\n#\r\n# Since the default HZ value by default is conservatively set to 10, Redis\r\n# offers, and enables by default, the ability to use an adaptive HZ value\r\n# which will temporarily raise when there are many connected clients.\r\n#\r\n# When dynamic HZ is enabled, the actual configured HZ will be used\r\n# as a baseline, but multiples of the configured HZ value will be actually\r\n# used as needed once more clients are connected. In this way an idle\r\n# instance will use very little CPU time while a busy instance will be\r\n# more responsive.\r\ndynamic-hz yes\r\n\r\n# When a child rewrites the AOF file, if the following option is enabled\r\n# the file will be fsync-ed every 32 MB of data generated. This is useful\r\n# in order to commit the file to the disk more incrementally and avoid\r\n# big latency spikes.\r\naof-rewrite-incremental-fsync yes\r\n\r\n# When redis saves RDB file, if the following option is enabled\r\n# the file will be fsync-ed every 32 MB of data generated. This is useful\r\n# in order to commit the file to the disk more incrementally and avoid\r\n# big latency spikes.\r\nrdb-save-incremental-fsync yes\r\n\r\n# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good\r\n# idea to start with the default settings and only change them after investigating\r\n# how to improve the performances and how the keys LFU change over time, which\r\n# is possible to inspect via the OBJECT FREQ command.\r\n#\r\n# There are two tunable parameters in the Redis LFU implementation: the\r\n# counter logarithm factor and the counter decay time. It is important to\r\n# understand what the two parameters mean before changing them.\r\n#\r\n# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis\r\n# uses a probabilistic increment with logarithmic behavior. Given the value\r\n# of the old counter, when a key is accessed, the counter is incremented in\r\n# this way:\r\n#\r\n# 1. A random number R between 0 and 1 is extracted.\r\n# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).\r\n# 3. The counter is incremented only if R < P.\r\n#\r\n# The default lfu-log-factor is 10. This is a table of how the frequency\r\n# counter changes with a different number of accesses with different\r\n# logarithmic factors:\r\n#\r\n# +--------+------------+------------+------------+------------+------------+\r\n# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |\r\n# +--------+------------+------------+------------+------------+------------+\r\n# | 0      | 104        | 255        | 255        | 255        | 255        |\r\n# +--------+------------+------------+------------+------------+------------+\r\n# | 1      | 18         | 49         | 255        | 255        | 255        |\r\n# +--------+------------+------------+------------+------------+------------+\r\n# | 10     | 10         | 18         | 142        | 255        | 255        |\r\n# +--------+------------+------------+------------+------------+------------+\r\n# | 100    | 8          | 11         | 49         | 143        | 255        |\r\n# +--------+------------+------------+------------+------------+------------+\r\n#\r\n# NOTE: The above table was obtained by running the following commands:\r\n#\r\n#   redis-benchmark -n 1000000 incr foo\r\n#   redis-cli object freq foo\r\n#\r\n# NOTE 2: The counter initial value is 5 in order to give new objects a chance\r\n# to accumulate hits.\r\n#\r\n# The counter decay time is the time, in minutes, that must elapse in order\r\n# for the key counter to be divided by two (or decremented if it has a value\r\n# less <= 10).\r\n#\r\n# The default value for the lfu-decay-time is 1. A special value of 0 means to\r\n# decay the counter every time it happens to be scanned.\r\n#\r\n# lfu-log-factor 10\r\n# lfu-decay-time 1\r\n\r\n########################### ACTIVE DEFRAGMENTATION #######################\r\n#\r\n# What is active defragmentation?\r\n# -------------------------------\r\n#\r\n# Active (online) defragmentation allows a Redis server to compact the\r\n# spaces left between small allocations and deallocations of data in memory,\r\n# thus allowing to reclaim back memory.\r\n#\r\n# Fragmentation is a natural process that happens with every allocator (but\r\n# less so with Jemalloc, fortunately) and certain workloads. Normally a server\r\n# restart is needed in order to lower the fragmentation, or at least to flush\r\n# away all the data and create it again. However thanks to this feature\r\n# implemented by Oran Agra for Redis 4.0 this process can happen at runtime\r\n# in a \"hot\" way, while the server is running.\r\n#\r\n# Basically when the fragmentation is over a certain level (see the\r\n# configuration options below) Redis will start to create new copies of the\r\n# values in contiguous memory regions by exploiting certain specific Jemalloc\r\n# features (in order to understand if an allocation is causing fragmentation\r\n# and to allocate it in a better place), and at the same time, will release the\r\n# old copies of the data. This process, repeated incrementally for all the keys\r\n# will cause the fragmentation to drop back to normal values.\r\n#\r\n# Important things to understand:\r\n#\r\n# 1. This feature is disabled by default, and only works if you compiled Redis\r\n#    to use the copy of Jemalloc we ship with the source code of Redis.\r\n#    This is the default with Linux builds.\r\n#\r\n# 2. You never need to enable this feature if you don't have fragmentation\r\n#    issues.\r\n#\r\n# 3. Once you experience fragmentation, you can enable this feature when\r\n#    needed with the command \"CONFIG SET activedefrag yes\".\r\n#\r\n# The configuration parameters are able to fine tune the behavior of the\r\n# defragmentation process. If you are not sure about what they mean it is\r\n# a good idea to leave the defaults untouched.\r\n\r\n# Enabled active defragmentation\r\n# NOTE: This feature is not available in the stock Debian packages as they use\r\n# the distribution-wide jemalloc allocator that does not have support for active\r\n# defragmentation. See #967970 for more information.\r\n# activedefrag no\r\n\r\n# Minimum amount of fragmentation waste to start active defrag\r\n# active-defrag-ignore-bytes 100mb\r\n\r\n# Minimum percentage of fragmentation to start active defrag\r\n# active-defrag-threshold-lower 10\r\n\r\n# Maximum percentage of fragmentation at which we use maximum effort\r\n# active-defrag-threshold-upper 100\r\n\r\n# Minimal effort for defrag in CPU percentage, to be used when the lower\r\n# threshold is reached\r\n# active-defrag-cycle-min 1\r\n\r\n# Maximal effort for defrag in CPU percentage, to be used when the upper\r\n# threshold is reached\r\n# active-defrag-cycle-max 25\r\n\r\n# Maximum number of set/hash/zset/list fields that will be processed from\r\n# the main dictionary scan\r\n# active-defrag-max-scan-fields 1000\r\n\r\n# Jemalloc background thread for purging will be enabled by default\r\njemalloc-bg-thread yes\r\n\r\n# It is possible to pin different threads and processes of Redis to specific\r\n# CPUs in your system, in order to maximize the performances of the server.\r\n# This is useful both in order to pin different Redis threads in different\r\n# CPUs, but also in order to make sure that multiple Redis instances running\r\n# in the same host will be pinned to different CPUs.\r\n#\r\n# Normally you can do this using the \"taskset\" command, however it is also\r\n# possible to this via Redis configuration directly, both in Linux and FreeBSD.\r\n#\r\n# You can pin the server/IO threads, bio threads, aof rewrite child process, and\r\n# the bgsave child process. The syntax to specify the cpu list is the same as\r\n# the taskset command:\r\n#\r\n# Set redis server/io threads to cpu affinity 0,2,4,6:\r\n# server_cpulist 0-7:2\r\n#\r\n# Set bio threads to cpu affinity 1,3:\r\n# bio_cpulist 1,3\r\n#\r\n# Set aof rewrite child process to cpu affinity 8,9,10,11:\r\n# aof_rewrite_cpulist 8-11\r\n#\r\n# Set bgsave child process to cpu affinity 1,10,11\r\n# bgsave_cpulist 1,10-11\r\n\r\n# In some cases redis will emit warnings and even refuse to start if it detects\r\n# that the system is in bad state, it is possible to suppress these warnings\r\n# by setting the following config which takes a space delimited list of warnings\r\n# to suppress\r\n#\r\n# ignore-warnings ARM64-COW-BUG\r\n```\r\n\r\nBTW I am extremely sorry to reply you this late."
    },
    {
      "id": 971742028,
      "user": "yossigo",
      "created_at": "2021-11-17T16:24:14Z",
      "body": "@therohitdas Your configuration seems good, maybe you have some file permission issues after running as root? Try to check:\r\n\r\n* `ls -lr /etc/redis`\r\n* `ls -lr /var/lib/redis`\r\n"
    },
    {
      "id": 972602168,
      "user": "therohitdas",
      "created_at": "2021-11-18T07:22:34Z",
      "body": "Both commands returned permission denied.\r\nWhat should I do now?"
    },
    {
      "id": 972603457,
      "user": "therohitdas",
      "created_at": "2021-11-18T07:25:05Z",
      "body": "after adding `sudo` in front of the commands, it returned -\r\n```bash\r\n➜  sudo ls -lr /var/lib/redis\r\n[sudo] password for therohitdas: \r\ntotal 4\r\n-rw-r--r-- 1 root root 963 Nov 17 13:20 dump.rdb\r\n➜  sudo ls -lr /etc/redis    \r\ntotal 84\r\n-rw-r----- 1 redis redis 85843 Oct 30 18:35 redis.conf\r\n```"
    },
    {
      "id": 972644112,
      "user": "yossigo",
      "created_at": "2021-11-18T08:32:16Z",
      "body": "@therohitdas You do have a `dump.rdb` owned by root, which you may want to remove.\r\nOther things to look at - `journalctl -xe` and `/var/log/redis/redis-server.log`."
    },
    {
      "id": 972854759,
      "user": "therohitdas",
      "created_at": "2021-11-18T13:14:27Z",
      "body": "@yossigo I found the error, it was -\r\n```bash\r\nNov 18 18:29:44 dell-pop-os redis-server[187213]: *** FATAL CONFIG FILE ERROR (Redis 6.0.11) ***\r\nNov 18 18:29:44 dell-pop-os redis-server[187213]: Reading the configuration file, at line 260\r\nNov 18 18:29:44 dell-pop-os redis-server[187213]: >>> 'logfile /var/log/redis/redis-server.log'\r\nNov 18 18:29:44 dell-pop-os redis-server[187213]: Can't open the log file: Permission denied\r\nNov 18 18:29:44 dell-pop-os systemd[1]: redis-server.service: Main process exited, code=exited, status=1/FAILURE\r\n```\r\nAlso, I removed the dump and tried starting the Redis again.\r\n\r\nI did not know that you can scroll up after opening `journalctl -xe`.\r\nRedis used to fail once because of the permission issue and then try to restart, this lead to another issue - `redis-server.service: Start request repeated too quickly` \r\nAnd it was at the end of the journal. So, I was focusing on it!\r\n\r\nSolved the permission issue using - [Redis startup error: Can't open the log file: Permission denied](https://www.fatalerrors.org/a/can-t-open-the-log-file-permission-denied.html)\r\n\r\nNow everything works fine. \r\n\r\n![Thank you](https://media.giphy.com/media/3o6Zt6KHxJTbXCnSvu/giphy.gif)\r\nThank you @yossigo "
    },
    {
      "id": 1124577522,
      "user": "karthikeyan951213",
      "created_at": "2022-05-12T06:25:03Z",
      "body": "Dear Team,\r\n\r\nNeed Help for below issue\r\n\r\nredis.service - Redis Service\r\n     Loaded: loaded (/etc/systemd/system/redis.service; enabled; vendor preset: enabled)\r\n     Active: failed (Result: core-dump) since Thu 2022-05-12 02:16:51 EDT; 46s ago\r\n    Process: 163523 ExecStart=/usr/local/bin/redis-server /etc/redis/redis.conf (code=dumped, signal=SEGV)\r\n   Main PID: 163523 (code=dumped, signal=SEGV)\r\n\r\nMay 12 02:16:51 borgconnectserver systemd[1]: redis.service: Scheduled restart job, restart counter is at 5.\r\nMay 12 02:16:51 borgconnectserver systemd[1]: Stopped Redis Service.\r\nMay 12 02:16:51 borgconnectserver systemd[1]: redis.service: Start request repeated too quickly.\r\nMay 12 02:16:51 borgconnectserver systemd[1]: redis.service: Failed with result 'core-dump'.\r\nMay 12 02:16:51 borgconnectserver systemd[1]: Failed to start Redis Service"
    },
    {
      "id": 1124617890,
      "user": "yossigo",
      "created_at": "2022-05-12T07:14:47Z",
      "body": "@karthikeyan951213 Please open a new issue and provide more information:\r\n* Platform - OS Version, hardware architecture, etc.\r\n* Redis Version (`dpkg -l | grep redis`)\r\n* Redis logs (typically in `/var/log/redis`)"
    },
    {
      "id": 1124697142,
      "user": "karthikeyan951213",
      "created_at": "2022-05-12T08:40:37Z",
      "body": "Platform - Linux Ubuntu 20.04\r\n\r\nRedis version 6.0.6\r\n\r\n ERROR : Failed with result 'core-dump'"
    },
    {
      "id": 1158354662,
      "user": "matt-donahoe-skydio",
      "created_at": "2022-06-17T00:55:17Z",
      "body": "I was getting a similar problem, but I saw this in `/var/log/redis/redis-server.log`\r\n\r\n```\r\n29856:M 16 Jun 2022 17:42:54.456 # Can't handle RDB format version 10\r\n29856:M 16 Jun 2022 17:42:54.456 # Fatal error loading the DB: Invalid argument. Exiting.\r\n```\r\n\r\nJust removing `/var/run/redis/dump.rdb` fixed the problem.\r\n\r\nI suspect that I downgraded redis and it couldn't handle the dump format of a newer version?"
    },
    {
      "id": 1161841747,
      "user": "binileldhoroy",
      "created_at": "2022-06-21T14:42:19Z",
      "body": "> * ls -lr /var/lib/redis\r\n\r\n sudo ls -lr /var/lib/redis\r\nls: cannot access '/var/lib/redis': No such file or directory\r\n\r\ni  getting this "
    },
    {
      "id": 1161852217,
      "user": "binileldhoroy",
      "created_at": "2022-06-21T14:51:08Z",
      "body": "> \r\n\r\nFailed opening the RDB file dump.rdb (in server root dir unknown) for saving: No such file or directory\r\n55285:M 20 Jun 2022 20:09:05.255 # Error trying to save the DB, can't exit.\r\n55285:M 20 Jun 2022 20:09:05.255 # SIGTERM received but errors trying to shut down the server, check the logs for more information\r\n"
    },
    {
      "id": 1493318646,
      "user": "Karigar4039",
      "created_at": "2023-04-02T12:26:44Z",
      "body": "> @karthikeyan951213 Please open a new issue and provide more information:\r\n> \r\n>     * Platform - OS Version, hardware architecture, etc.\r\n> \r\n>     * Redis Version (`dpkg -l | grep redis`)\r\n> \r\n>     * Redis logs (typically in `/var/log/redis`)\r\n\r\n\r\nuname -a                                                             \r\nLinux kali 6.1.0-kali7-arm64 #1 SMP Debian 6.1.20-1kali1 (2023-03-22) aarch64 GNU/Linux\r\n\r\nredis-server -v                                                              \r\nRedis server v=7.0.7 sha=00000000:0 malloc=jemalloc-5.2.1 bits=64 build=60db4852972c3375\r\n\r\nredis-openvas.log file is empty\r\n\r\nredis-openvas.pid file cannot be located or not present anywhere \r\n\r\nI am getting these errors \r\n\r\ngvm-check-setup\r\ngvm-check-setup 22.4.1\r\n  Test completeness and readiness of GVM-22.4.1\r\nStep 1: Checking OpenVAS (Scanner)... \r\n        OK: OpenVAS Scanner is present in version 22.4.1.\r\n        OK: Notus Scanner is present in version 22.4.4.\r\n        OK: Server CA Certificate is present as /var/lib/gvm/CA/servercert.pem.\r\nChecking permissions of /var/lib/openvas/gnupg/*\r\n        OK: _gvm owns all files in /var/lib/openvas/gnupg\r\n        OK: redis-server is present.\r\n        OK: scanner (db_address setting) is configured properly using the redis-server socket: /var/run/redis-openvas/redis-server.sock\r\n        ERROR: redis-server is not running or not listening on socket: /var/run/redis-openvas/redis-server.sock\r\n        FIX: You should start the redis-server with 'systemctl start redis-server@openvas.service' or configure it to listen on socket: /var/run/redis-openvas/redis-server.sock\r\n\r\n ERROR: Your GVM-22.4.1 installation is not yet complete!\r\n\r\nalso there are some weird issues that i have attached in the debug.txt file.\r\n\r\nplease help. \r\n\r\n\r\n\r\n[debug.txt](https://github.com/redis/redis/files/11132173/debug.txt)\r\n\r\n"
    },
    {
      "id": 1493323294,
      "user": "Karigar4039",
      "created_at": "2023-04-02T12:48:59Z",
      "body": "dpkg -l|grep redis \r\n\r\nii  libhiredis0.14:arm64                  0.14.1-3                             arm64        minimalistic C client library for Redis\r\nii  php-redis                             5.3.7+4.3.0-3                        arm64        PHP extension for interfacing with Redis\r\nii  php8.2-redis                          5.3.7+4.3.0-3                        arm64        PHP extension for interfacing with Redis\r\nii  python3-aioredis                      1.3.1-2                              all          asyncio (PEP 3156) Redis support\r\nii  python3-hiredis                       1.0.1-2+b3                           arm64        redis protocol reader for Python using hiredis\r\nii  python3-redis                         4.3.4-3                              all          Persistent key-value database with network interface (Python 3 library)\r\nii  redis-redisearch-doc                  1:1.2.2-4                            all          Full-text and secondary search index engine module for Redis (documentation)\r\nii  redis-sentinel                        5:7.0.7-1                            arm64        Persistent key-value database with network interface (monitoring)\r\nii  redis-server                          5:7.0.7-1                            arm64        Persistent key-value database with network interface\r\nii  redis-tools                           5:7.0.7-1                            arm64        Persistent key-value database with network interface (client)\r\n[redis.log](https://github.com/redis/redis/files/11132193/redis.log)\r\n\r\nredis.log says \r\n\r\n144951:C 31 Mar 2023 15:27:22.158 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\r\n144951:C 31 Mar 2023 15:27:22.158 # Redis version=7.0.7, bits=64, commit=00000000, modified=0, pid=144951, just started\r\n144951:C 31 Mar 2023 15:27:22.158 # Configuration loaded\r\n144951:M 31 Mar 2023 15:27:22.159 * Increased maximum number of open files to 10032 (it was originally set to 1024).\r\n144951:M 31 Mar 2023 15:27:22.159 * monotonic clock: POSIX clock_gettime\r\n144951:M 31 Mar 2023 15:27:22.161 * Running mode=standalone, port=6379.\r\n144951:M 31 Mar 2023 15:27:22.161 # Server initialized\r\n144951:M 31 Mar 2023 15:27:22.161 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\r\n144951:M 31 Mar 2023 15:27:22.166 * Ready to accept connections\r\n144951:M 31 Mar 2023 15:31:40.324 # User requested shutdown...\r\n144951:M 31 Mar 2023 15:31:40.325 * Saving the final RDB snapshot before exiting.\r\n144951:M 31 Mar 2023 15:31:40.329 * DB saved on disk\r\n144951:M 31 Mar 2023 15:31:40.329 * Removing the pid file.\r\n144951:M 31 Mar 2023 15:31:40.329 # Redis is now ready to exit, bye bye...\r\n\r\n\r\n\r\nwhile \r\n\r\nredis-server.log says (a few last lines )\r\n\r\n\r\n52680:C 02 Apr 2023 16:18:07.347 # Redis version=7.0.7, bits=64, commit=00000000, modified=0, pid=52680, just started\r\n52680:C 02 Apr 2023 16:18:07.347 # Configuration loaded\r\n52680:M 02 Apr 2023 16:18:07.348 * Increased maximum number of open files to 10032 (it was originally set to 1024).\r\n52680:M 02 Apr 2023 16:18:07.348 * monotonic clock: POSIX clock_gettime\r\n52680:M 02 Apr 2023 16:18:07.348 # Failed opening Unix socket: bind: No such file or directory\r\n21755:signal-handler (1680434320) Received SIGTERM scheduling shutdown...\r\n21755:M 02 Apr 2023 16:18:41.035 # User requested shutdown...\r\n21755:M 02 Apr 2023 16:18:41.037 * Saving the final RDB snapshot before exiting.\r\n21755:M 02 Apr 2023 16:18:41.043 * DB saved on disk\r\n21755:M 02 Apr 2023 16:18:41.043 * Removing the pid file.\r\n21755:M 02 Apr 2023 16:18:41.043 * Removing the unix socket file.\r\n21755:M 02 Apr 2023 16:18:41.043 # Error removing the unix socket file: No such file or directory\r\n21755:M 02 Apr 2023 16:18:41.043 # Redis is now ready to exit, bye bye...\r\n52993:C 02 Apr 2023 16:18:41.147 * Supervised by systemd. Please make sure you set appropriate values for TimeoutStartSec and TimeoutStopSec in your service unit.\r\n52993:C 02 Apr 2023 16:18:41.147 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\r\n52993:C 02 Apr 2023 16:18:41.148 # Redis version=7.0.7, bits=64, commit=00000000, modified=0, pid=52993, just started\r\n52993:C 02 Apr 2023 16:18:41.148 # Configuration loaded\r\n52993:M 02 Apr 2023 16:18:41.148 * monotonic clock: POSIX clock_gettime\r\n52993:M 02 Apr 2023 16:18:41.150 * Running mode=standalone, port=0.\r\n52993:M 02 Apr 2023 16:18:41.150 # Server initialized\r\n52993:M 02 Apr 2023 16:18:41.154 * Loading RDB produced by version 7.0.7\r\n52993:M 02 Apr 2023 16:18:41.154 * RDB age 0 seconds\r\n52993:M 02 Apr 2023 16:18:41.154 * RDB memory usage when created 0.87 Mb\r\n52993:M 02 Apr 2023 16:18:41.154 * Done loading RDB, keys loaded: 0, keys expired: 0.\r\n52993:M 02 Apr 2023 16:18:41.154 * DB loaded from disk: 0.000 seconds\r\n52993:M 02 Apr 2023 16:18:41.154 * The server is now ready to accept connections at /var/run/redis/redis.sock\r\n\r\nredis.conf says \r\n\r\n[redis.txt](https://github.com/redis/redis/files/11132222/redis.txt)\r\n"
    },
    {
      "id": 1493323561,
      "user": "Karigar4039",
      "created_at": "2023-04-02T12:50:19Z",
      "body": "please help. I am trying to resolve this issue for the last four days without luck."
    },
    {
      "id": 1733162575,
      "user": "Lord-Y",
      "created_at": "2023-09-25T08:26:21Z",
      "body": "@Karigar4039 how did you fix the pb? Having the same with version `7.2.1` on `Debian 12`. Logs are not useful"
    },
    {
      "id": 1733187781,
      "user": "Karigar4039",
      "created_at": "2023-09-25T08:42:41Z",
      "body": "I didn’t get any help and so I left it as it was 😞"
    },
    {
      "id": 1733188998,
      "user": "Karigar4039",
      "created_at": "2023-09-25T08:43:24Z",
      "body": "I think it was because I was using Mac M1 and some software was incompatible with ARM "
    },
    {
      "id": 1771174157,
      "user": "bipindr123",
      "created_at": "2023-10-19T15:02:18Z",
      "body": "> @Karigar4039 how did you fix the pb? Having the same with version `7.2.1` on `Debian 12`. Logs are not useful\r\n\r\nsame, I have no logs at /var/log/redis/redis-server.log"
    },
    {
      "id": 1771255538,
      "user": "Lord-Y",
      "created_at": "2023-10-19T15:44:37Z",
      "body": "@bipindr123 I made it work by adding this in my `redis.conf`:\r\n```\r\ndaemonize no\r\nsupervised auto\r\n```\r\n\r\nHope that will help you guys."
    },
    {
      "id": 1771887500,
      "user": "bipindr123",
      "created_at": "2023-10-20T00:32:19Z",
      "body": "> @bipindr123 I made it work by adding this in my `redis.conf`:\r\n> \r\n> ```\r\n> daemonize no\r\n> supervised auto\r\n> ```\r\n> \r\n> Hope that will help you guys.\r\n\r\nunfortunately this still didnt work for me"
    },
    {
      "id": 1996071702,
      "user": "rickygm",
      "created_at": "2024-03-13T23:22:45Z",
      "body": "same here , Debian 12 not working "
    },
    {
      "id": 2081448259,
      "user": "dalmasonto",
      "created_at": "2024-04-28T11:53:35Z",
      "body": "Hi, go the same bug, redis could not start. While doing some research came across this [post](https://forum.hestiacp.com/t/redis-server-failed-to-start-advanced-key-value-store/6130/15) saying we change the host binding like so\r\n\r\n`bind 127.0.0.1 ::1`\r\n\r\nTo\r\n\r\n`bind 127.0.0.1`"
    }
  ]
}