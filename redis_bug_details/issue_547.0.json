{
  "issue_number": 547.0,
  "title": "Crash in Redis 2.6 RC4 converting an hash value.",
  "body": "As received from Marty Weiner from Pinterest.\n\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\n[10845] 09 Jun 04:42:08.251 # === ASSERTION FAILED ===\n[10845] 09 Jun 04:42:08.251 # ==> t_hash.c:406 'ret == DICT_OK' is not true\n[10845] 09 Jun 04:42:08.251 # (forcing SIGSEGV to print the bug report.)\n[10845] 09 Jun 04:42:08.251 #     Redis 2.5.10 crashed by signal: 11\n[10845] 09 Jun 04:42:08.251 #     Failed assertion: ret == DICT_OK (t_hash.c:406)\n[10845] 09 Jun 04:42:08.252 # --- STACK TRACE\n/usr/bin/redis-server(logStackTrace+0x52)[0x438492]\n/usr/bin/redis-server(_redisAssert+0x6f)[0x43764f]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0xfc60)[0x7f1f8cc46c60]\n/usr/bin/redis-server(_redisAssert+0x6f)[0x43764f]\n/usr/bin/redis-server(hashTypeConvertZiplist+0xe0)[0x42fa60]\n/usr/bin/redis-server(hsetCommand+0x34)[0x42fd74]\n/usr/bin/redis-server(call+0x5d)[0x413a9d]\n/usr/bin/redis-server(luaRedisGenericCommand+0x25a)[0x43b8ca]\n/usr/bin/redis-server[0x4423cd]\n/usr/bin/redis-server[0x44b92c]\n/usr/bin/redis-server[0x44289d]\n/usr/bin/redis-server[0x441ae7]\n/usr/bin/redis-server[0x442a52]\n/usr/bin/redis-server(lua_pcall+0x4f)[0x44007f]\n/usr/bin/redis-server(evalGenericCommand+0x1fc)[0x43c7ec]\n/usr/bin/redis-server(call+0x5d)[0x413a9d]\n/usr/bin/redis-server(processCommand+0x375)[0x4157e5]\n/usr/bin/redis-server(processInputBuffer+0x4f)[0x41dfff]\n/usr/bin/redis-server(readQueryFromClient+0xa0)[0x41e110]\n/usr/bin/redis-server(aeProcessEvents+0x136)[0x40fee6]\n/usr/bin/redis-server(aeMain+0x2b)[0x41019b]\n/usr/bin/redis-server(main+0x2a3)[0x416473]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xff)[0x7f1f8c8c0eff]\n/usr/bin/redis-server[0x40f169]\n[10845] 09 Jun 04:42:08.253 # --- INFO OUTPUT\n[10845] 09 Jun 04:42:08.256 # # Server\nredis_version:2.5.10\nredis_git_sha1:1a3e9d95\nredis_git_dirty:0\nos:Linux 2.6.38-14-virtual x86_64\narch_bits:64\nmultiplexing_api:epoll\ngcc_version:4.5.2\nprocess_id:10845\nrun_id:b061aa8b471f53be25aedd9e2f89fee2f0073e63\ntcp_port:6381\nuptime_in_seconds:14583\nuptime_in_days:0\nlru_clock:1801116\n# Clients\n\nconnected_clients:2255\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n# Memory\n\nused_memory:1632648896\nused_memory_human:1.52G\nused_memory_rss:1672122368\nused_memory_peak:1636180560\nused_memory_peak_human:1.52G\nused_memory_lua:34816\nmem_fragmentation_ratio:1.02\nmem_allocator:jemalloc-3.0.0\n# Persistence\n\nloading:0\nrdb_changes_since_last_save:1795884\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1339204193\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:13\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\n# Stats\n\ntotal_connections_received:46024\ntotal_commands_processed:12360028\ninstantaneous_ops_per_sec:824\nrejected_connections:0\nexpired_keys:0\nevicted_keys:0\nkeyspace_hits:4311253\nkeyspace_misses:395246\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:470142\n# Replication\n\nrole:master\nconnected_slaves:1\nslave0:10.104.29.227,33619,online\n# CPU\n\nused_cpu_sys:750.27\nused_cpu_user:504.13\nused_cpu_sys_children:2.06\nused_cpu_user_children:9.69\n# Commandstats\n\ncmdstat_del:calls=210017,usec=1491404,usec_per_call=7.10\ncmdstat_sadd:calls=234992,usec=2724686,usec_per_call=11.59\ncmdstat_srem:calls=1341,usec=8197,usec_per_call=6.11\ncmdstat_sismember:calls=1572368,usec=12704687,usec_per_call=8.08\ncmdstat_smembers:calls=65742,usec=3599381,usec_per_call=54.75\ncmdstat_zadd:calls=774476,usec=30331072,usec_per_call=39.16\ncmdstat_zrem:calls=531860,usec=9853025,usec_per_call=18.53\ncmdstat_zinterstore:calls=103841,usec=15368530,usec_per_call=148.00\ncmdstat_zrevrangebyscore:calls=173208,usec=14922625,usec_per_call=86.15\ncmdstat_zrevrange:calls=16403,usec=1317563,usec_per_call=80.32\ncmdstat_zcard:calls=699196,usec=5082145,usec_per_call=7.27\ncmdstat_zrank:calls=1955393,usec=35472205,usec_per_call=18.14\ncmdstat_hset:calls=1639,usec=21366,usec_per_call=13.04\ncmdstat_hget:calls=224189,usec=1865594,usec_per_call=8.32\ncmdstat_hdel:calls=74,usec=849,usec_per_call=11.47\ncmdstat_select:calls=5570900,usec=36502996,usec_per_call=6.55\ncmdstat_ping:calls=62,usec=147,usec_per_call=2.37\ncmdstat_sync:calls=1,usec=470583,usec_per_call=470583.00\ncmdstat_info:calls=137,usec=23469,usec_per_call=171.31\ncmdstat_slaveof:calls=1,usec=145,usec_per_call=145.00\ncmdstat_eval:calls=224188,usec=182608465,usec_per_call=814.53\n# Keyspace\n\ndb0:keys=2,expires=0\ndb1:keys=24848,expires=0\ndb2:keys=25156,expires=0\ndb3:keys=24867,expires=0\ndb4:keys=25280,expires=0\ndb5:keys=24776,expires=0\ndb6:keys=24834,expires=0\ndb7:keys=24748,expires=0\ndb8:keys=24675,expires=0\ndb9:keys=25353,expires=0\ndb10:keys=24812,expires=0\ndb11:keys=24997,expires=0\ndb12:keys=25273,expires=0\ndb13:keys=24882,expires=0\ndb14:keys=25001,expires=0\ndb15:keys=24906,expires=0\ndb16:keys=25578,expires=0\nhash_init_value: 1339854508\n\n[10845] 09 Jun 04:42:08.256 # --- CLIENT LIST OUTPUT\n[10845] 09 Jun 04:42:08.292 # addr=10.70.166.252:57141 fd=300 age=217 idle=217 flags=N db=7 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.66.205.106:42245 fd=1009 age=521 idle=128 flags=N db=11 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.73.67.216:37305 fd=2243 age=116 idle=116 flags=N db=12 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=sadd\naddr=10.66.150.35:37111 fd=2020 age=208 idle=97 flags=N db=7 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=sadd\naddr=10.194.114.96:60683 fd=1588 age=181 idle=181 flags=N db=14 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=eval\naddr=10.71.34.194:43320 fd=489 age=296 idle=296 flags=N db=6 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.46.238.195:37819 fd=946 age=467 idle=8 flags=N db=5 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.127.69.227:46490 fd=373 age=117 idle=117 flags=N db=15 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.125.94.130:34227 fd=2032 age=587 idle=189 flags=N db=8 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.28.223.91:35652 fd=83 age=13945 idle=1 flags=N db=3 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=18446744073709369680 events=r cmd=sismember\naddr=10.84.151.181:59247 fd=1306 age=364 idle=61 flags=N db=7 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zrank\naddr=10.3.9.22:47144 fd=1687 age=290 idle=22 flags=N db=1 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.193.5.84:49699 fd=2295 age=491 idle=193 flags=N db=14 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=eval\naddr=10.126.214.235:54823 fd=570 age=103 idle=103 flags=N db=3 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.28.0.209:39671 fd=1624 age=77 idle=77 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=sismember\naddr=10.35.2.242:57688 fd=1674 age=151 idle=151 flags=N db=9 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.125.77.164:38015 fd=7 age=13938 idle=2 flags=N db=10 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=18446744073709208336 events=r cmd=zcard\naddr=10.194.114.96:40700 fd=1728 age=294 idle=221 flags=N db=1 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.94.249.9:41537 fd=488 age=172 idle=172 flags=N db=4 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.255.210.31:48710 fd=365 age=154 idle=154 flags=N db=10 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.112.210.255:54375 fd=1979 age=373 idle=17 flags=N db=14 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.36.133.16:54292 fd=1763 age=407 idle=143 flags=N db=7 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.193.165.228:34890 fd=419 age=374 idle=17 flags=N db=16 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zrank\naddr=10.220.142.115:39606 fd=1413 age=981 idle=296 flags=N db=5 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.119.10.125:50371 fd=190 age=13783 idle=6 flags=N db=12 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=18446744073708964016 events=r cmd=eval\naddr=10.108.165.29:43364 fd=1366 age=35 idle=35 flags=N db=5 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.3.9.22:32915 fd=807 age=180 idle=180 flags=N db=3 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.220.142.115:53319 fd=1133 age=904 idle=279 flags=N db=13 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.125.77.164:39609 fd=230 age=13555 idle=3 flags=N db=4 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=18446744073709387280 events=r cmd=sismember\naddr=10.73.67.216:49852 fd=1001 age=11 idle=11 flags=N db=5 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\naddr=10.5.58.184:53952 fd=1003 age=195 idle=195 flags=N db=14 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=zadd\n\n... a lot more clients listed ...\n\n[10845] 09 Jun 04:42:08.293 # --- CURRENT CLIENT INFO\n[10845] 09 Jun 04:42:08.293 # client: addr=10.108.127.147:53982 fd=125 age=13903 idle=0 flags=N db=12 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=18446744073709398960 events=r cmd=eval\n[10845] 09 Jun 04:42:08.293 # argv[0]: 'EVAL'\n[10845] 09 Jun 04:42:08.293 # argv[1]: '\n    local s = redis.call('hget', KEYS[1], ARGV[1])\n    if s then\n        if not string.find(s, ','..ARGV[2]..',') then\n            return redis.call('hset', KEYS[1], ARGV[1], s .. ARGV[2] .. ',')\n        else\n            return 2\n        end\n    else\n        return redis.call('hset', KEYS[1], ARGV[1], ',' .. ARGV[2] .. ',')\n    end\n    '\n[10845] 09 Jun 04:42:08.293 # argv[2]: '1'\n[10845] 09 Jun 04:42:08.293 # argv[3]: '20547257761837'\n[10845] 09 Jun 04:42:08.293 # argv[4]: '622'\n[10845] 09 Jun 04:42:08.293 # argv[5]: '280349282962244517'\n[10845] 09 Jun 04:42:08.293 # --- REGISTERS\n[10845] 09 Jun 04:42:08.293 # \nRAX:0000000000000000 RBX:0000000000000196\nRCX:0000000000020590 RDX:0000000000000000\nRDI:00007f1f8cc321c0 RSI:0000000000000000\nRBP:0000000000480a68 RSP:00007fff26e3b950\nR8 :0000000002273440 R9 :00000000ffffffff\nR10:00000000ffffffff R11:0000000000000206\nR12:0000000000480a8f R13:00007f1f47d6c2e0\nR14:00000000001b672c R15:00007f1f8c087000\nRIP:000000000043764f EFL:0000000000010202\nCSGSFS:333200000000e033\n[10845] 09 Jun 04:42:08.293 # (00007fff26e3b9c8) -> 00007f1f29f3e5a0\n[10845] 09 Jun 04:42:08.293 # (00007fff26e3b9c0) -> 00000000022674e0\n[10845] 09 Jun 04:42:08.293 # (00007fff26e3b9b8) -> 0000000000413a9d\n[10845] 09 Jun 04:42:08.293 # (00007fff26e3b9b0) -> 0000000000000003\n[10845] 09 Jun 04:42:08.293 # (00007fff26e3b9a8) -> 00007f1f8c087000\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b9a0) -> 000000004fd2d420\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b998) -> 000000000042fd74\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b990) -> 0000000000000004\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b988) -> 0004c202bd491dbb\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b980) -> 00007f1f47d6c2e0\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b978) -> 00007f1f8c087000\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b970) -> 00007f1f8c087000\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b968) -> 000000000042fa60\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b960) -> 00007f1f27139200\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b958) -> 00007f1f8c0a2300\n[10845] 09 Jun 04:42:08.294 # (00007fff26e3b950) -> 00007f1f29a1f790\n[10845] 09 Jun 04:42:08.294 # \n=== REDIS BUG REPORT END. Make sure to include from START to END. ===\n",
  "state": "closed",
  "created_at": "2012-06-09T08:42:03Z",
  "updated_at": "2012-06-19T09:38:41Z",
  "closed_at": "2012-06-19T09:38:40Z",
  "labels": [
    "critical bug",
    "crash report"
  ],
  "comments_data": [
    {
      "id": 6244130,
      "user": "antirez",
      "created_at": "2012-06-11T13:23:18Z",
      "body": "As a first step I added a new test in commit c0de459 to stress test the ziplist -> hash conversion. So far the test is passing without problems. I'm going to further analyze the bug today.\n\nSince the original posters of this bug saw it multiple times probably it's a good idea to distribute a modified version of Redis that can provide more information when this assert fails.\n"
    },
    {
      "id": 6256291,
      "user": "martaaay",
      "created_at": "2012-06-11T21:19:15Z",
      "body": "I walked the dictAdd code and haven't found any holes, even around encoding + rehashing occurring concurrently.  \n\nI'm now wondering if the ziplist version of my hashtable has duplicates in it.  RDB load has no protection, nor does save, so if one creeps in I dont think I'd notice until an expansion.  I'm thinking of adding a verification pass that can be switched on during load to watch for duplicates. \n"
    },
    {
      "id": 6256945,
      "user": "antirez",
      "created_at": "2012-06-11T21:43:46Z",
      "body": "Hi @martaaay, to start I'm pushing (in a few minutes) a commit that will hex-dump the ziplist when the assertion fails. I think this can be a good start assuming the problem will be kind enough with us to show up in a decent amount of time :)\n"
    },
    {
      "id": 6258407,
      "user": "antirez",
      "created_at": "2012-06-11T22:50:23Z",
      "body": "Committed! Please @martaaay if you could upgrade your instance when possible, so that we can get a chance to see what the ziplist contains. Thanks! :)\n"
    },
    {
      "id": 6263665,
      "user": "martaaay",
      "created_at": "2012-06-12T06:08:35Z",
      "body": "Will do! After twiddling parameters, such as max ziplist inflation size, we haven't seen it much, but definitely a few times. We'll upgrade tomorrow. We're also trying to collect a core, which will hopefully give us the ziplist contents anyhow.\n"
    },
    {
      "id": 6266704,
      "user": "antirez",
      "created_at": "2012-06-12T09:49:47Z",
      "body": "@martaaay thanks! Today I'll try to analyze the code path to see if I can catch it analytically... it's always worth a try :)\n"
    },
    {
      "id": 6295634,
      "user": "antirez",
      "created_at": "2012-06-13T08:33:55Z",
      "body": "p.s. note that this bug report also contains another embedded bug report:\n\n```\nomem=18446744073709369680\n```\n\nApparently there is something wrong in the computation of this field.\n"
    },
    {
      "id": 6295859,
      "user": "antirez",
      "created_at": "2012-06-13T08:48:26Z",
      "body": "@martaaay please could you give me the output of `HGETALL key` against a key that is similar to the one that crashed the server? I'm writing several stress testers but it would help to write one that triggers the same encodings.\n\nMy understanding from the stack trace is that it's something like that:\n- field: some small integer, the one I saw here is 622\n- value: comma separated large integers like \",280349282962244517,459239812929391123,32849241231321321,\"\n\nHowever having more precise ranges for the two kind of numbers involved would help. Thx!\n"
    },
    {
      "id": 6300110,
      "user": "sripathikrishnan",
      "created_at": "2012-06-13T12:57:58Z",
      "body": "@antirez @martaaay Would a script that iterates over all ziplist encoded hashes and checks for duplicates / print them help in any way? I can write one using rdb-tools if you'll think it would help\n"
    },
    {
      "id": 6304520,
      "user": "antirez",
      "created_at": "2012-06-13T15:38:56Z",
      "body": "@sripathikrishnan I think this would be awesome actually... Thanks! Not just useful now but generally it's a very good \"assertion\" for hashes.\n"
    },
    {
      "id": 6308414,
      "user": "martaaay",
      "created_at": "2012-06-13T18:00:37Z",
      "body": "@antirez I'll get that data.  In the meantime, we do have a core.  I have it cracked open and am trying to walk the ziplist.  Any chance you guys have some gdb macros for splatting out a ziplist?  If not, I may go do the crazy thing of allocating some memory in a live instance and filling it with the bad ziplist contents and then running redis commands against it.\n"
    },
    {
      "id": 6308487,
      "user": "martaaay",
      "created_at": "2012-06-13T18:02:40Z",
      "body": "redis 127.0.0.1:6379[2]> hgetall 17661039738895\n  1) \"947\"\n  2) \",29343972480516752,245024173385057821,\"\n  3) \"867\"\n  4) \",266064427894181966,190206921670656816,\"\n  5) \"588\"\n  6) \",221661750318074719,210543488738003393,\"\n  7) \"52\"\n  8) \",162622373953011926,226869037387221349,\"\n  9) \"53\"\n 10) \",198510433483621945,\"\n 11) \"110\"\n 12) \",250090722965849789,\"\n 13) \"310\"\n 14) \",217861838132478284,3659380855669165,149041206326722794,195414208739803735,97672023077030029,115123471633091285,148618993861657180,90986992380150482,67483831824814607,127367633120005540,\"\n 15) \"311\"\n 16) \",64528344569348675,\"\n 17) \"151\"\n 18) \",6051918157712905,\"\n 19) \"314\"\n 20) \",241364998687819301,6403761878600525,30399503643184459,\"\n 21) \"9\"\n 22) \",43488090060226809,\"\n 23) \"435\"\n 24) \",217861838132478284,3659380855669165,60306219918688495,149041206326722794,31806878526734589,195414208739803735,97672023077030029,177681285207032627,90986992380150482,148618993861657180,244320485943280220,249527773012430979,178877553858052482,25051479085679420,173881373021438904,\"\n 25) \"912\"\n 26) \",170433304556734240,\"\n 27) \"193\"\n 28) \",221661750318074719,\"\n 29) \"436\"\n 30) \",3659380855669165,195414208739803735,26247747736700336,231161530782057818,178877553858052482,25051479085679420,51369389408126065,67483831824814607,90986992380150482,\"\n 31) \"473\"\n 32) \",241364998687819301,\"\n 33) \"439\"\n 34) \",94646167077390270,280701126683137214,\"\n 35) \"196\"\n 36) \",107734753494434953,221661750318074719,198932645948688322,\"\n 37) \"277\"\n 38) \",73957756289155418,\"\n 39) \"639\"\n 40) \",215258194597906257,232850380642323236,\"\n 41) \"396\"\n 42) \",45739889873911852,253398053942200583,2744587181362145,86272286520250344,\"\n 43) \"837\"\n 44) \",71072637777872546,217650731899946757,\"\n 45) \"397\"\n 46) \",163748273859854695,20899723179197367,184858897113154599,177329441486145311,233905911804989092,285697307519746605,\"\n 47) \"991\"\n 48) \",3589012111493039,\"\n 49) \"838\"\n 50) \",273664252265368319,\"\n 51) \"22\"\n 52) \",51087914431414340,32932778433577045,107101434796834836,285345463798857762,74028125033332788,131237914049773874,94505429589033616,33354990898643702,184084840927200125,119204858795393823,146296825303794489,178103497672098847,133137870142571490,191121715344967628,188166228089505895,175851697858414747,8866667924818101,178033128927922370,96968335635253222,92746210984593755,230739318316992570,161566842790349367,9499986622417499,136656307351456547,5066755739222255,51017545687239114,98657185495515790,206954682784943355,93098054705482780,252483260267893261,36310478154107290,275071627148923521,276197527055761648,\"\n 53) \"958\"\n 54) \",54043401686876431,122723296004278219,98305341774629669,86905605217848168,\"\n 55) \"598\"\n 56) \",3659380855669165,195414208739803735,123708458422765544,127367633120005540,\"\n 57) \"24\"\n 58) \",266627377847602155,\"\n 59) \"878\"\n 60) \",88312980101399459,241364998687819301,6403761878600525,30399503643184459,\"\n 61) \"62\"\n 62) \",140174744560337832,\"\n 63) \"998\"\n 64) \",255509116267532100,\"\n 65) \"200\"\n 66) \",73465175079912096,\"\n 67) \"202\"\n 68) \",195766052460691464,108438440936210470,85850074055180383,287878738589253899,255157272546640451,9922199087481516,203576983064414037,83598274241497534,86624130241134695,277393795706784865,166985236092028958,\"\n 69) \"400\"\n 70) \",156007712000313804,\"\n 71) \"600\"\n 72) \",3659380855669165,195414208739803735,178877553858052482,\"\n 73) \"602\"\n 74) \",4996386995044439,249949985477493102,3659380855669165,195414208739803735,26247747736700336,60728432383756302,175359116649171422,249527773012430979,185140372089864367,127367633120005540,150448581210276154,\"\n 75) \"242\"\n 76) \",422418623496657,194921627530560230,226024612457088126,81627949404521885,271623558684215369,66287563173791830,194217940088785020,4926018250868991,61643226058067121,122019608562502144,252272154035359107,63261707174153866,105975534889996542,138556263444253861,163889011348213139,231865218223836652,23503366713774005,284360301380374660,153052224744853851,173811004277264815,173036948091310644,132223076468262609,212654551063333561,43558458804406146,114419784191316578,24558897876437838,3729749599846729,109493972098878315,170081460835846411,172966579347131585,24840372853148944,171629573207755433,107875490982789973,148056043908238077,46232471083159754,261912671987700025,19703454528179214,182607097299473348,131730495259017842,271905033660929191,\"\n 77) \"323\"\n 78) \",200621495808950275,\"\n 79) \"405\"\n 80) \",128563901771022379,203788089296945164,209628695063691290,182888572276179103,38843752944501068,16325754807648715,64739450801881747,186055165764174381,64106132104283066,106679222331770321,78039143451461751,68820837964186136,144185762978464872,\"\n 81) \"442\"\n 82) \",67554200568988020,143622813025045315,\"\n 83) \"604\"\n 84) \",73887387544979244,\"\n 85) \"127\"\n 86) \",248401873105584150,227572724828998236,\"\n 87) \"361\"\n 88) \",162622373953011926,116108634051576480,56928520198161365,201817764459972193,226869037387221349,281264076636554504,\"\n 89) \"640\"\n 90) \",25473691550745397,173881373021439301,10414780296726331,35114209503086527,234820705479297770,281681135144404,\"\n 91) \"406\"\n 92) \",65443138243657858,95349854519169429,\"\n 93) \"325\"\n 94) \",165507492464295951,171418466975219765,\"\n 95) \"362\"\n 96) \",162622373953011926,116108634051576480,56928520198161365,226869037387221349,274508677195501197,173881373021440990,281264076636554504,\"\n 97) \"526\"\n 98) \",53761926710165635,236509555339559106,273101302311944395,93661004658902017,282108501566686482,248190766873052924,166281548650252151,245657492082657585,72902225126492283,\"\n 99) \"608\"\n100) \",17451654714490886,\"\n101) \"167\"\n102) \",245868598315188928,\"\n103) \"644\"\n104) \",144467237955176096,10485149040904169,99994191634894813,\"\n105) \"285\"\n106) \",146859775257215067,\"\n107) \"845\"\n108) \",106186641122527066,\"\n109) \"368\"\n110) \",144748712931885182,\"\n111) \"566\"\n112) \",29484709968872352,\"\n113) \"882\"\n114) \",67554200568988020,179933085020718055,\"\n115) \"729\"\n116) \",194921627530560230,211247176179780654,263460784359605650,\"\n117) \"963\"\n118) \",76068818614486555,\"\n119) \"847\"\n120) \",211599019900666782,\"\n121) \"885\"\n122) \",186407009485065143,232146693200547302,\"\n123) \"849\"\n124) \",211599019900666782,\"\n125) \"886\"\n126) \",67554200568988020,143693181769221376,143622813025045315,116319740284113661,\"\n127) \"889\"\n128) \",184225578415555551,\"\n129) \"410\"\n130) \",48062058431774807,\"\n131) \"332\"\n132) \",121808502329968386,\"\n133) \"450\"\n134) \",254242478872331944,1618687274518781,\"\n135) \"414\"\n136) \",48062058431774807,\"\n137) \"334\"\n138) \",165507492464295951,42925140106808079,\"\n139) \"172\"\n140) \",245868598315188928,\"\n141) \"614\"\n142) \",39477071642100629,88805561310643002,273171671056124771,84513067915808351,278941908078694217,284289932636196270,20407141969956350,89931461217488537,243335323524796439,130674964096354267,\"\n143) \"174\"\n144) \",9359249134063337,\"\n145) \"732\"\n146) \",194921627530560230,263460784359605650,\"\n147) \"850\"\n148) \",211599019900666782,194851258786385192,2885324669718544,\"\n149) \"337\"\n150) \",144678344187707609,\"\n151) \"418\"\n152) \",22799679271993886,194921627530560230,150870793675343326,263460784359605650,\"\n153) \"175\"\n154) \",245868598315188928,\"\n155) \"851\"\n156) \",211599019900666782,\"\n157) \"932\"\n158) \",165507492464295951,\"\n159) \"419\"\n160) \",273312408544478943,6825974343666972,\"\n161) \"771\"\n162) \",119838177492993517,\"\n163) \"375\"\n164) \",197666008553489677,\"\n165) \"573\"\n166) \",126945420654939838,\"\n167) \"970\"\n168) \",19351610807289412,\"\n169) \"655\"\n170) \",199847439622999097,\"\n171) \"935\"\n172) \",165507492464295951,\"\n173) \"773\"\n174) \",245868598315188928,88031505124691827,\"\n175) \"458\"\n176) \",59532163732734300,\"\n177) \"656\"\n178) \",134334138793592873,\"\n179) \"41\"\n180) \",223772812643404371,\"\n181) \"696\"\n182) \",270990239986614339,210895332458891045,25825535271635016,\"\n183) \"779\"\n184) \",184225578415555551,\"\n185) \"47\"\n186) \",39336334153745742,267260696545199127,\"\n187) \"304\"\n188) \",6403761878600525,\"\n189) \"305\"\n190) \",251990679058648878,\"\n191) \"701\"\n192) \",189362496740525641,198299327251089283,\"\n193) \"143\"\n194) \",22940416760353108,\"\n195) \"306\"\n196) \",16747967272714759,\"\n197) \"621\"\n198) \",107031066052658804,184225578415556912,11611048947747483,222928387713272576,222435806504030671,\"\n199) \"145\"\n200) \",59743269965267206,\"\n201) \"146\"\n202) \",2674218437181772,\"\n203) \"382\"\n204) \",46443577315690212,\"\n205) \"708\"\n206) \",269442127614708702,\"\n207) \"862\"\n208) \",211599019900666782,\"\n209) \"549\"\n210) \",79024305869948619,\"\n211) \"710\"\n212) \",189221759252169857,\"\n213) \"967\"\n214) \",101401566518444494,70580056568628191,64598713313527170,113645728005359737,183662628462135456,\"\n215) \"496\"\n216) \",63824657127571621,\"\n217) \"497\"\n218) \",79024305869948619,\"\n219) \"978\"\n220) \",160652049116038756,\"\n221) \"83\"\n222) \",69172681685075707,\"\n223) \"85\"\n224) \",69172681685075707,\"\n225) \"87\"\n226) \",54747089128654582,\"\n227) \"88\"\n228) \",69172681685075707,\"\n229) \"421\"\n230) \",269301390126353311,\"\n231) \"422\"\n232) \",79798362055903814,\"\n233) \"900\"\n234) \",56576676477275069,\"\n235) \"109\"\n236) \",149885631256857394,\"\n237) \"505\"\n238) \",37295640572595180,\"\n239) \"424\"\n240) \",261208984545922296,228839362224197837,\"\n241) \"507\"\n242) \",3448274623137266,\"\n243) \"903\"\n244) \",56576676477275069,\"\n245) \"426\"\n246) \",194921627530560230,\"\n247) \"427\"\n248) \",21955254341861590,176555385300189277,\"\n249) \"823\"\n250) \",95349854519165731,\"\n251) \"508\"\n252) \",228839362224197837,\"\n253) \"904\"\n254) \",56576676477275069,264023734313028809,\"\n255) \"583\"\n256) \",222576543992381483,266838484080132805,210543488738003393,149604156280145548,198932645948688322,224054287620115357,\"\n257) \"909\"\n258) \",56576676477275069,\"\n259) \"585\"\n260) \",221661750318073434,221661750318074719,210543488738003393,\"\n261) \"1011\"\n262) \",199565964646286824,42573296385921003,\"\n"
    },
    {
      "id": 6308779,
      "user": "antirez",
      "created_at": "2012-06-13T18:12:42Z",
      "body": "@martaaay the core is big news! Thanks. No macros to walk the ziplist unfortunately, you may use RESTORE (but you have to fake the CRC64 checksum) in order to re-create the value into a live instance, btw if you can send me an hex-dump of the ziplist I'll happily check the format.\n\nAnother option is to take the hexdump, write a small C program to inject it inside an array of bytes, and then directly use the ziplist API to walk values.\n\nBtw this is a big step forward! Only problem I think we'll have is that we'll need to understand after we get what value is duplicated how it ended there, but should be simple to reproduce once we have the duplicated value.\n"
    },
    {
      "id": 6309916,
      "user": "martaaay",
      "created_at": "2012-06-13T18:50:12Z",
      "body": "Exactly what I was thinking -- hoping the duplicate is not in the ziplist because then the bug is less contained.  Do you want me to upload the core somewhere?  It's a 136 megs.\n"
    },
    {
      "id": 6310205,
      "user": "antirez",
      "created_at": "2012-06-13T19:00:44Z",
      "body": "@martaaay please if you can upload the code somewhere, I'll happily debug :) And also the redis-server binary please. Thanks!\n"
    },
    {
      "id": 6313718,
      "user": "martaaay",
      "created_at": "2012-06-13T21:11:31Z",
      "body": "@antirez I uploaded the core and sent you an email.\n"
    },
    {
      "id": 6313758,
      "user": "antirez",
      "created_at": "2012-06-13T21:12:44Z",
      "body": "@martaaay many thanks :) I'll keep it private and remove it securely once I did the investigation. Thanks for all the help provided so far, very appreciated :)\n"
    },
    {
      "id": 6329374,
      "user": "antirez",
      "created_at": "2012-06-14T14:22:13Z",
      "body": "Triva: that's how I inspected the ziplist dumped using GDB\n\nhttps://gist.github.com/2930637\n\nSimple but useful trick. However to make sure the format was correct I had to `hexdump -C` it to check that everything was correct hex by hex.\n"
    },
    {
      "id": 6331753,
      "user": "antirez",
      "created_at": "2012-06-14T15:21:37Z",
      "body": "@martaaay Issue finally fixed, this is the post mortem:\n\nWe believe that your database originated from a 2.4 RDB file: in the inspected ziplists the format to store small integers was still the old 16-bit encoding, while now two additional formats are available, that are the 8 bit encoding and the single-byte encoding+immediate available for very smal integers.\n\nHowever the Redis 2.6 / unstable code base still assumed that integers could be compared by encoding, that is, if encoding is different than the values must be different, that is no longer true when loading 2.4 RDBs into 2.6.\n\nNow the problem is that you have this hashes with duplicated entries inside the database, and on conversion this are going to create issues for sure. The fix I provided will prevent a new instance with a sane 2.4 RDB to create this issue, but it is not good to _undo_ the effect on your database.\n\nIf the data is not signifiant you can just wipe the instance, otherwise I would provide a modified version of Redis 2.6 in a special branch that does not create issues on conversion, by ignoring the assertion on conversion.\n\nAnother important aspect is the fact that because of what used to happen small integers encoded back when you used 2.4 where completely ignored, and new entries created, so basically you have data inside your hash that is lost running your current 2.6 instance.\n\nOnce you'll upgrade the first duplicated field will be recognized instead so you'll get an \"old\" value for those fields.\n\nIt's a bit of a mess, basically :( We can try to work together to find the best solution for your data.\n\nThanks!\n\nI'm taking this issue open because there is the sub-issue of omem=18446744073709369680 count that must be investigated as well.\n"
    },
    {
      "id": 6331925,
      "user": "antirez",
      "created_at": "2012-06-14T15:27:52Z",
      "body": "Just found that other omem issue as well, today is a lucky day apparently ;) Fixing in a moment or after gym at max.\n"
    },
    {
      "id": 6355198,
      "user": "antirez",
      "created_at": "2012-06-15T12:23:57Z",
      "body": "Errata Corrige: actually not, there is no need for the RDB file to was generated by 2.4 to trigger this bug. As long as it was a DB generated with an older version of 2.6 the bug was triggered every time an hash field was a small number, in the range 0-255.\n"
    },
    {
      "id": 6420504,
      "user": "antirez",
      "created_at": "2012-06-19T09:38:40Z",
      "body": "Closing as both the issues are fixed. Many thanks for the support.\n"
    }
  ]
}