{
  "issue_number": 13454.0,
  "title": "[BUG] Wildcard Search Using FT.AGGREGATE Does Not Return All Results",
  "body": "We are using FT.AGGREGATE to search for companies using wildcards. We are searching based on starts with or contains using \"text*\" and \"\\*text\\*\" respectively. However, all the companies that should be returned are not returned. \r\n\r\n### Steps to Replicate:\r\n1. Use the following code and download [data.json](https://github.com/user-attachments/files/16411366/data.json):\r\n    ```go\r\n    package main\r\n\r\n    import (\r\n        \"context\"\r\n        \"encoding/json\"\r\n        \"fmt\"\r\n        \"log\"\r\n        \"os\"\r\n\r\n        \"github.com/go-redis/redis/v8\"\r\n    )\r\n\r\n    type Company struct {\r\n        Id       string `json:\"id,omitempty\"`\r\n        Code     string `json:\"code,omitempty\"`\r\n        Name     string `json:\"name,omitempty\"`\r\n        SortName string `json:\"snm,omitempty\"`\r\n        Priority *int   `json:\"pr,omitempty\"`\r\n    }\r\n\r\n    func main() {\r\n        address := \"localhost:6379\"\r\n        // Read JSON file\r\n        bytes, err := os.ReadFile(\"data.json\")\r\n        if err != nil {\r\n            log.Fatalf(\"Failed to read JSON file: %v\", err)\r\n        }\r\n\r\n        var companies *[]Company\r\n        err = json.Unmarshal(bytes, &companies)\r\n        if err != nil {\r\n            log.Fatalf(\"Failed to parse JSON data: %v\", err)\r\n        }\r\n\r\n        // Connect to Redis\r\n        rdb := redis.NewClient(&redis.Options{\r\n            Addr: address,\r\n        })\r\n\r\n        ctx := context.Background()\r\n\r\n        // Populate Redis with data from JSON file\r\n        var operations []any\r\n        operations = append(operations, \"JSON.MSET\")\r\n        var jsonData []byte\r\n        for _, c := range *companies {\r\n            jsonData, _ = json.Marshal(c)\r\n            operations = append(operations, fmt.Sprintf(\"company:\"+c.Id), \".\", jsonData)\r\n        }\r\n        err = rdb.Do(ctx, operations...).Err()\r\n        if err != nil {\r\n            log.Fatalf(\"Failed to set data in Redis: %v\", err)\r\n        }\r\n\r\n        fmt.Println(\"Data successfully populated in Redis.\")\r\n    }\r\n    ```\r\n    and execute\r\n    ```bash\r\n    go run .\\populate_redis.go\r\n    ```\r\n    to run the go script that populates data from `data.json` file. This will populate all the data required for replicating. Ensure all the data is populated in Redis after running the script.\r\n    > Note: Make sure to change the address variable to match the host and port of the Redis to populate data to.\r\n\r\n2. Create index by running the following query:\r\n```bash\r\nFT.CREATE idx_company ON JSON PREFIX 1 company: SCHEMA $.snm AS snm TEXT SORTABLE $.name AS name TAG SORTABLE $.id AS id TAG SORTABLE $.code AS code TAG SORTABLE $.pr as pr NUMERIC SORTABLE\r\n```\r\n\r\n---\r\n### Following Are the Issues:\r\n1. Run the following queries in redis cli:\r\n    ```bash\r\n    FT.AGGREGATE idx_company \"(@snm:eri* | @snm:*eri*)\" LOAD 5 @id @name @code @snm @pr SORTBY 4 @pr ASC @snm ASC LIMIT 0 10000\r\n    ```\r\n \r\n    ```bash\r\n    FT.AGGREGATE idx_company \"(@snm:erics* | @snm:*erics*)\" LOAD 5 @id @name @code @snm @pr SORTBY 4 @pr ASC @snm ASC LIMIT 0 10000\r\n    ```\r\n    ```bash\r\n    FT.AGGREGATE idx_company \"(@snm:eric* | @snm:*eric*)\" LOAD 5 @id @name @code @snm @pr SORTBY 4 @pr ASC @snm ASC LIMIT 0 10000\r\n    ```\r\n    Notice that the company **Ericsson B** with code **ERIC B** of id **39405** is returned in all 3 cases, but the one with code **ERIBR** of id **65290** is not returned in the last case when it should be returned.\r\n\r\n2. For the same query as above, **BRITISH AMERICAN TOBACCO PLC** (id **7943**) is returned in the last query (eric) but not in the 1st query (eri) when companies that starts with \"eric\" are a subset of companies that start with \"eri\".\r\n\r\n3. Run the following queries in redis cli:\r\n    ```bash\r\n    FT.AGGREGATE idx_company \"(@snm:alda* | @snm:*alda*)\" LOAD 5 @id @name @code @snm @pr SORTBY 4 @pr ASC @snm ASC LIMIT 0 10000\r\n    ```\r\n    ```bash\r\n    FT.AGGREGATE idx_company \"(@snm:ald* | @snm:*ald*)\" LOAD 5 @id @name @code @snm @pr SORTBY 4 @pr ASC @snm ASC LIMIT 0 10000\r\n    ```\r\n    Here, although companies that start with \"alda\" are subset of companies that start with \"ald\", companies with name **Invalda INVL** (id **58053**), **Kaldal\\xc3\\xb3n** (id **111998**) and **Vilniaus Baldai** (id **93949**) are not returned in 2nd query, but returned in 1st query.\r\n---\r\nPlease let us know if you need more information.",
  "state": "closed",
  "created_at": "2024-07-29T11:46:09Z",
  "updated_at": "2024-07-29T11:48:08Z",
  "closed_at": "2024-07-29T11:48:08Z",
  "labels": [],
  "comments_data": []
}