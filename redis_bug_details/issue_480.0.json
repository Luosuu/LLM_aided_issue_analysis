{
  "issue_number": 480.0,
  "title": "Bug report, slowlog - EVAL",
  "body": "Bug report output: http://pastebin.com/DBFuHzWg\nTo reproduce: use latest github version, run with default options, system is 32 bit\n\nRun: eval \"local a; for b = 1,100000 do redis.call('sadd','set1',b) end return a\" 0\nRun: eval \"local a; for b = 50000,100000 do redis.call('sadd','set2',b) end return a\" 0\n\nSecond command always triggers a crash.\n\nUpdate 1: Changed title from \"Bug report, EVAL\" to include slowlog. It appears it happens during a slow logging of a command. Since above operations are slow, they will hit this code path pretty much every single time. I took the time to compile redis with jemalloc and lib c malloc and it happens just the same. Here is output of  a gdb session:\n\n```\nsudo gdb ./bin/redis-server 9683\nGNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /home/arek/tools/redis/bin-libc/bin/redis-server...done.\nAttaching to program: /home/arek/tools/redis/bin-libc/bin/redis-server, process 9683\nCannot access memory at address 0x1\nA program is being debugged already.  Kill it? (y or n) n\nProgram not killed.\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0807d9ab in slowlogCommand (c=0x7eccc399) at slowlog.c:118\n118         listRewind(server.slowlog,&li);\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0xb780b424 in ?? ()\n```\n\nUpdate 2: I've seen it crash with this gdb output as well\n\n```\nsudo gdb ../bin/bin-libc/bin/redis-server 10689\nGNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /home/arek/tools/redis/bin/bin-libc/bin/redis-server...done.\nAttaching to program: /home/arek/tools/redis/bin/bin-libc/bin/redis-server, process 10689\nReading symbols from /lib/i386-linux-gnu/libm.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib/i386-linux-gnu/libm.so.6\nReading symbols from /lib/i386-linux-gnu/libpthread.so.0...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New Thread 0xb6cfcb70 (LWP 10691)]\n[New Thread 0xb74fdb70 (LWP 10690)]\nLoaded symbols for /lib/i386-linux-gnu/libpthread.so.0\nReading symbols from /lib/i386-linux-gnu/libc.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib/i386-linux-gnu/libc.so.6\nReading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld-linux.so.2\n0xb770e424 in __kernel_vsyscall ()\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\nluaMaskCountHook (lua=0x9f81888, ar=0xbfe9e358) at scripting.c:378\n378          aeDeleteFileEvent(server.el, server.lua_caller->fd, AE_READABLE);\n\nbt\n#0  luaMaskCountHook (lua=0x9f81888, ar=0xbfe9e358) at scripting.c:378\n#1  0x08084121 in luaD_callhook ()\n#2  0x0808d826 in luaV_execute ()\n#3  0x080848c8 in luaD_call ()\n#4  0x0808bac4 in callTMres ()\n#5  0x08081ca3 in lua_getfield ()\n#6  0x0807f3a0 in evalGenericCommand (c=0x9f8c274, evalsha=0) at scripting.c:761\n#7  0x0807f7c7 in evalCommand (c=0x9f8c274) at scripting.c:844\n#8  0x0804f4b1 in call (c=0x9f8c274, flags=7) at redis.c:1432\n#9  0x08051880 in processCommand (c=0x9f8c274) at redis.c:1621\n#10 0x08059707 in processInputBuffer (c=0x9f8c274) at networking.c:973\n#11 0x0805981d in readQueryFromClient (el=0x9f4ab2c, fd=5, privdata=0x9f8c274, mask=1) at networking.c:1036\n#12 0x0804b768 in aeProcessEvents (eventLoop=0x9f4ab2c, flags=3) at ae.c:354\n#13 0x0804ba4c in aeMain (eventLoop=0x9f4ab2c) at ae.c:395\n#14 0x0804a934 in main (argc=1, argv=0xbfe9e834) at redis.c:2469\n\n(gdb) info registers\neax            0x0  0\necx            0xb76a6398   -1217764456\nedx            0x0  0\nebx            0x9f81888    167254152\nesp            0xbfe9e310   0xbfe9e310\nebp            0xffffffff   0xffffffff\nesi            0x807d8f0    134732016\nedi            0x60 96\neip            0x807d9cb    0x807d9cb <luaMaskCountHook+219>\neflags         0x10286  [ PF SF IF RF ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n```\n",
  "state": "closed",
  "created_at": "2012-04-25T15:24:48Z",
  "updated_at": "2012-04-27T14:33:14Z",
  "closed_at": "2012-04-27T14:33:14Z",
  "labels": [
    "critical bug",
    "crash report"
  ],
  "comments_data": [
    {
      "id": 5358360,
      "user": "antirez",
      "created_at": "2012-04-26T14:55:17Z",
      "body": "Thank you for reporting. Investigating. Sorry for the missing stack trace during the crash, this is due to two previous commit that broken the stack trace feature, now fixed into unstable (soon into 2.6 as well).\n"
    },
    {
      "id": 5358641,
      "user": "antirez",
      "created_at": "2012-04-26T15:07:14Z",
      "body": "Hello again, I tried to reproduce this on different systems without success :(\nAre you able to reproduce this issue easily? Thanks.\n"
    },
    {
      "id": 5361842,
      "user": "a-zb",
      "created_at": "2012-04-26T16:34:29Z",
      "body": "I can reproduce pretty much every time. I'm open to suggestions on what I can try differently. I have compiled it with default jemalloc and libc malloc - same crash. \n1. can update my local source and rebuild again. \n2. Also if it helps, I can upload the binary files to a file drop service ... \n\nI'll try again today, if after step 1 it is still happening, I will provide a link to the binaries. \n\nUpdate 1:\nI can reproduce it just the same with latest code from master.\n\n```\ngdb ../bin-update/bin/redis-server 1415\nGNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /home/arek/tools/redis/bin-update/bin/redis-server...done.\nAttaching to program: /home/arek/tools/redis/bin-update/bin/redis-server, process 1415\nCould not attach to process.  If your uid matches the uid of the target\nprocess, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try\nagain as the root user.  For more details, see /etc/sysctl.d/10-ptrace.conf\nptrace: Operation not permitted.\n/home/arek/tools/redis/redis-update/1415: No such file or directory.\n(gdb) quit\narek@ubu-work:~/tools/redis/redis-update$ sudo gdb ../bin-update/bin/redis-server 1415\n[sudo] password for arek: \nGNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /home/arek/tools/redis/bin-update/bin/redis-server...done.\nAttaching to program: /home/arek/tools/redis/bin-update/bin/redis-server, process 1415\nReading symbols from /lib/i386-linux-gnu/libm.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib/i386-linux-gnu/libm.so.6\nReading symbols from /lib/i386-linux-gnu/libdl.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib/i386-linux-gnu/libdl.so.2\nReading symbols from /lib/i386-linux-gnu/libpthread.so.0...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New Thread 0xb5ffeb70 (LWP 1417)]\n[New Thread 0xb67ffb70 (LWP 1416)]\nLoaded symbols for /lib/i386-linux-gnu/libpthread.so.0\nReading symbols from /lib/i386-linux-gnu/libc.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib/i386-linux-gnu/libc.so.6\nReading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld-linux.so.2\n0xb78a5424 in __kernel_vsyscall ()\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\nluaMaskCountHook (lua=0x8e1c680, ar=0xbfbe7bf8) at scripting.c:378\n378          aeDeleteFileEvent(server.el, server.lua_caller->fd, AE_READABLE);\n(gdb) bt\n#0  luaMaskCountHook (lua=0x8e1c680, ar=0xbfbe7bf8) at scripting.c:378\n#1  0x0808e291 in luaD_callhook ()\n#2  0x08097996 in luaV_execute ()\n#3  0x0808ea38 in luaD_call ()\n#4  0x08095c34 in callTMres ()\n#5  0x0808be13 in lua_getfield ()\n#6  0x08089510 in evalGenericCommand (c=0xb68c7000, evalsha=0) at scripting.c:761\n#7  0x08089937 in evalCommand (c=0xb68c7000) at scripting.c:844\n#8  0x08059691 in call (c=0xb68c7000, flags=7) at redis.c:1429\n#9  0x0805ba60 in processCommand (c=0xb68c7000) at redis.c:1618\n#10 0x080638c7 in processInputBuffer (c=0xb68c7000) at networking.c:973\n#11 0x080639dd in readQueryFromClient (el=0xb68060a0, fd=5, privdata=0xb68c7000, mask=1) at networking.c:1036\n#12 0x08055948 in aeProcessEvents (eventLoop=0xb68060a0, flags=3) at ae.c:354\n#13 0x08055c2c in aeMain (eventLoop=0xb68060a0) at ae.c:395\n#14 0x08054b14 in main (argc=1, argv=0xbfbe80d4) at redis.c:2457\n(gdb) info registers\neax            0x0  0\necx            0xb7838398   -1216117864\nedx            0x0  0\nebx            0x8e1c680    149014144\nesp            0xbfbe7bb0   0xbfbe7bb0\nebp            0xffffffff   0xffffffff\nesi            0x8087a60    134773344\nedi            0x60 96\neip            0x8087b3b    0x8087b3b <luaMaskCountHook+219>\neflags         0x10286  [ PF SF IF RF ]\ncs             0x73 115\nss             0x7b 123\nds             0x7b 123\nes             0x7b 123\nfs             0x0  0\ngs             0x33 51\n(gdb) \n```\n\nIf it helps, these is a server binary and the .rdb file.\nhttp://bayfiles.com/file/8zzL/qD0IBi/redis-server\nhttp://bayfiles.com/file/8zA1/mjmQ80/dump.rdb\n"
    },
    {
      "id": 5365090,
      "user": "antirez",
      "created_at": "2012-04-26T18:58:36Z",
      "body": "Thank you for your help. I think the next steps are the following:\n\n1) Please can you send me a core dump (and redis executable used)? We have instructions here: http://redis.io/topics/debugging\n\n2) It is very very unlikely this is the case since it seems a legitimate bug, but may you try ./redis-server --test-memory to check if everything is ok in the box?\n\nBtw with the core it will be much easier to debug what's happening because I'll be able to inspect the state of the program when crashing. Likely server.lua_caller is NULL.\n\nThank you!\n"
    },
    {
      "id": 5378196,
      "user": "antirez",
      "created_at": "2012-04-27T09:46:46Z",
      "body": "Issue fixed, what I was really needing was 8 hours of sleep and not a core ;) From the stack trace it is quite clear what's happening. Please can you confirm that with latest commit everything is fine? Thanks.\n"
    },
    {
      "id": 5381324,
      "user": "a-zb",
      "created_at": "2012-04-27T13:27:31Z",
      "body": "With commit https://github.com/antirez/redis/commit/77a75fdef5c56033e328252f47bf3a26a3dab1b4 , it seems that everything is fine. So far, after several hundred calls to the same test script, server does not exhibit any problems.\n"
    },
    {
      "id": 5382615,
      "user": "antirez",
      "created_at": "2012-04-27T14:33:14Z",
      "body": "@arekzb thanks you a lot! Closing.\n"
    }
  ]
}