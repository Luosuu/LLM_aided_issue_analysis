{
  "issue_number": 9352,
  "title": "Failed to build TiKV with PROST=1",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n\r\nmaster & release-5.0-rc.\r\n\r\n### What operating system and CPU are you using?\r\n\r\n(Linux)\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nmake PROST=1\r\n```\r\n\r\n### What did you expect?\r\n\r\nBuild successfully.\r\n\r\n### What did happened?\r\n\r\n```\r\nerror[E0277]: can't compare `i32` with `tidb_query_datatype::FieldTypeTp`\r\n   --> components/tidb_query_expr/src/impl_cast.rs:112:37\r\n    |\r\n112 |             if from_field_type.tp() == FieldTypeTp::Year {\r\n    |                                     ^^ no implementation for `i32 == tidb_query_datatype::FieldTypeTp`\r\n    |\r\n    = help: the trait `PartialEq<tidb_query_datatype::FieldTypeTp>` is not implemented for `i32`\r\n\r\nerror[E0277]: can't compare `i32` with `tidb_query_datatype::FieldTypeTp`\r\n   --> components/tidb_query_expr/src/impl_cast.rs:121:37\r\n    |\r\n121 |             if from_field_type.tp() == FieldTypeTp::Float {\r\n    |                                     ^^ no implementation for `i32 == tidb_query_datatype::FieldTypeTp`\r\n    |\r\n    = help: the trait `PartialEq<tidb_query_datatype::FieldTypeTp>` is not implemented for `i32`\r\n\r\nerror[E0277]: can't compare `i32` with `tidb_query_datatype::FieldTypeTp`\r\n   --> components/tidb_query_expr/src/impl_cast.rs:172:37\r\n    |\r\n172 |             if from_field_type.tp() == FieldTypeTp::Year {\r\n    |                                     ^^ no implementation for `i32 == tidb_query_datatype::FieldTypeTp`\r\n    |\r\n    = help: the trait `PartialEq<tidb_query_datatype::FieldTypeTp>` is not implemented for `i32`\r\n\r\nerror[E0277]: the trait bound `TimeType: From<i32>` is not satisfied\r\n    --> components/tidb_query_expr/src/impl_cast.rs:1095:47\r\n     |\r\n1095 |     let time_type = extra.ret_field_type.tp().try_into()?;\r\n     |                                               ^^^^^^^^ the trait `From<i32>` is not implemented for `TimeType`\r\n     |\r\n     = note: required because of the requirements on the impl of `Into<TimeType>` for `i32`\r\n     = note: required because of the requirements on the impl of `TryFrom<i32>` for `TimeType`\r\n     = note: required because of the requirements on the impl of `TryInto<TimeType>` for `i32`\r\n\r\nerror[E0277]: `?` couldn't convert the error to `EvaluateError`\r\n    --> components/tidb_query_expr/src/impl_cast.rs:1095:57\r\n     |\r\n1089 | ) -> Result<Option<Time>> {\r\n     |      -------------------- expected `EvaluateError` because of this\r\n...\r\n1095 |     let time_type = extra.ret_field_type.tp().try_into()?;\r\n     |                                                         ^ the trait `From<Infallible>` is not implemented for `EvaluateError`\r\n     |\r\n     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n     = help: the following implementations were found:\r\n               <EvaluateError as From<Box<(dyn std::error::Error + Send + std::marker::Sync + 'static)>>>\r\n               <EvaluateError as From<DeadlineError>>\r\n               <EvaluateError as From<tidb_query_datatype::codec::Error>>\r\n     = note: required because of the requirements on the impl of `Into<EvaluateError>` for `Infallible`\r\n     = note: required because of the requirements on the impl of `From<Infallible>` for `tidb_query_common::Error`\r\n     = note: required by `std::convert::From::from`\r\n\r\nerror: aborting due to 5 previous errors\r\n```",
  "state": "closed",
  "created_at": "2020-12-24T09:02:41Z",
  "updated_at": "2020-12-25T13:14:52Z",
  "closed_at": "2020-12-25T10:10:45Z",
  "labels": [
    "type/bug",
    "component/build",
    "severity/major"
  ],
  "comments_data": []
}