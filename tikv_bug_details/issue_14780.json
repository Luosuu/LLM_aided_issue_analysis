{
  "issue_number": 14780,
  "title": "Clusters upgraded from <6.5 to >=6.5 may suffer additional bad performance from accumulated lock records",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### The problem\r\n\r\nThere used to be a problem that `WriteType::Lock` records may accumulate in write CF and slow down read performance. Before 6.5, we have an optimization that change `Lock` records into `Put` records in some limited cases, but it's not complete and sometimes causes problems.\r\n\r\nLater a complete solution to the problem (https://github.com/tikv/tikv/issues/13694) was proposed and implemented, and then the old solution was reverted (https://github.com/pingcap/tidb/pull/42488). However, there are still some unfinished stuff here:\r\n\r\n1. The optimization may not take effect for some old data from upgraded clusters. It's unimplemented yet as said in [the tracking issue](https://github.com/tikv/tikv/issues/13694). If a key has a `Lock` or `Rollback` record from old version (doesn't have the `last_change_ts` field), a new `Lock` record written on it won't have the field either. We used to thought it at least won't make anything worse. However since [an old optimization was reverted](https://github.com/pingcap/tidb/pull/42488), cases that benefits from the old optimization may suddenly run into problem after upgrading to new version.\r\n2. The last version information was not properly set for `Rollback` records (in `rollback` and `check_txn_status` requests). It may cause more severe problem than we expected: if a key that's frequently locked without changing (accumulates `Lock` records), and occationally a rollback occurs on it, then due to the behavior we mentioned above that *`Lock` records written after another `Lock` or `Rollback` records without last version info will keep not containing last version info*, unoptimized lock records will then accumulate on this key. Actually, setting last version info for rollback record was once implemented, but later reverted since it's found to have correctness issue (see: https://github.com/tikv/tikv/pull/13834). It can't be simply implemented as how we do for `Lock` records.\r\n\r\n### Solutions\r\n\r\n#### Approach 1: Continue scanning write records after skipping\r\n\r\nIt's already proposed in this comment: https://github.com/tikv/tikv/pull/13717#discussion_r1011270636\r\n\r\nWhen calculating the last version info, if the most recent write record is a `Lock` or `Rollback` record without last version info (which may come from old version), we still make the next record point to it. When reading the latest `Lock`/`Rollback` record and jumps into another `Lock`/`Rollback` record (without last version info), we let the reader continue scanning versions one by one as how the old reading logic did.\r\n\r\n```\r\nReading\r\n   |  _______skipping______\r\n   ↓ /                      ↘  ----next-->  ----next-->\r\n   * Lock@15    * Lock@13   | * Lock@10    * Lock@8    *Put@5\r\n     last->10     last->10  |\r\n                            |\r\n                            ^ Upgrading\r\n```\r\n\r\n#### Approach 2: Scan and calculate the accurate `last_change_ts` when writting\r\n\r\nWhen calculating the last version info (usually in acquire_pessimistic_lock and prewrite), if we find the most recent version is a `Lock` or `Rollback` without last vesion info, we scan Write CF until finding a valid version (or finding the key is empty). We may add the scanning logic to the function `Write::next_last_change_info`, and pass a reader to it for scanning earlier versions.\r\n\r\nIn both way, the problem caused by not setting last version info for `Rollback` record can be solved, assuming that `Rollback` recorcds won't accumulate too much.\r\n\r\nCurrently, we prefer **the second idea** as it looks much easier to implement, and we believe the occational performace cost during writing is acceptable. For the first solution, we'll have to ensure all reading logic supports this behavior and cover all of them by tests.\r\n\r\n\r\nReferences: \r\n* https://github.com/pingcap/tidb/issues/25659\r\n* https://github.com/pingcap/tidb/issues/33393\r\n* https://github.com/tikv/tikv/issues/13694\r\n\r\nFixing this also closes #13694 .",
  "state": "closed",
  "created_at": "2023-05-19T07:34:19Z",
  "updated_at": "2023-05-22T10:15:40Z",
  "closed_at": "2023-05-22T10:15:40Z",
  "labels": [
    "type/bug",
    "sig/transaction",
    "severity/critical",
    "affects-6.5",
    "affects-7.1"
  ],
  "comments_data": []
}