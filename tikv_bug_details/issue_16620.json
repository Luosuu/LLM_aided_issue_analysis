{
  "issue_number": 16620,
  "title": "`CheckTxnStatus` on primary key of optimistic transaction writing non-protectecd rollback can break transaction atomicity",
  "body": "## Bug Report\r\n\r\nIn `CheckTxnStatus`, when it's called on the primary of an optimistic transaction, and the lock exists and expired, it then calls the `rollback_lock` function to remove the lock:\r\n\r\nhttps://github.com/tikv/tikv/blob/4965ac3fdb3f28c2d053d64cea57188c1470c437/src/storage/txn/actions/check_txn_status.rs#L294-L336\r\n\r\nNote line 326 which decides whether the rollback record should be protected:\r\n\r\nhttps://github.com/tikv/tikv/blob/4965ac3fdb3f28c2d053d64cea57188c1470c437/src/storage/txn/actions/check_txn_status.rs#L325-L326\r\n\r\nIt doesn't protect the rollback record on the primary of optimistic transactions.\r\n\r\nThis looks quite reasonable back to the years when async commit/1PC was not yet supported. Because, for a non-protected rollback record, the only way that it disappears (except GC) is to being collapsed, in which case there must be another rollback record who has larger `start_ts`. The purpose of the rollback records is to prevent the transaction itself from successfully prewriting the same lock again, so that it's promised the transaction must fail. And in this case, as there must be another record with larger ts in write cf which must cause WriteConflict error the later-arriving prewrite request, so it can still prevent the transaction from succeeding.\r\n\r\nHowever, things become different if async commit/1PC is taken into consideration. Async commit and 1PC introduces following changes:\r\n\r\n* A transaction's commit_ts can be the same as another transaction's start_ts\r\n* Further, we define that for a same ts, when it appears to be a commit_ts of a transaction, it's logically smaller than when it's a start_ts/read_ts of a transaction. So that a read operation can see data that has commit_ts == current read_ts, and **prewriting on a key who has latest commit record with commit_ts equals to the current transaction's start_ts won't cause write conflict**\r\n\r\nThen the code mentioned above becomes problematic. Consider the following case:\r\n\r\n1. Transaction $T_0$ writes on key $k$, and $T_0.commit\\\\_ts = 10$ in async commit mode\r\n2. Optimistic 2PC transaction $T_1$ begins, $T_1.start\\\\_ts = 10$. It prewrites on its primary which is $k$, and a secondary key $k_2$, but failed to receive the response of the primary due to network issue. \r\n3. Transaction $T_2$ accesses key $k_2$, and founds the lock of $T_1$, so it starts resolving locks. It calls `CheckTxnStatus` on key $k$, found that $T_1$'s primary has been expired, so it rolls back that lock. The rollback record is expected to be written with the start_ts in the key. However, it founds that there's already another transaction $T_0$'s commit record on the same key (overlapped write). As in this case the rollback isn't protected, here it will just give up writing the rollback. As a result, $T_0$'s primary lock is unlocked, but no rollback information is written.\r\n4. Transaction $T_2$ believes $T_1$ must be rolled back after the `CheckTxnStatus`. So it continue cleaning up $k_2$ and continue its work.\r\n5. $T_1$ retries prewriting on key $k$. It succeeds since there are no rollback record and no write conflict. It can then continue the commit phase of 2PC and found that committing on primary can be successful, breaking the transaction's atomicity.\r\n\r\nThe conclusion is that **the rollback must be protected to guarantee the correctness**, in which case an `has_overlapped_rollback` flag will be written to $T_0$'s commit record, preventing $T_1$'s retrying request to prewrite the primary from succeeding.\r\n\r\n- [x] Also it's necessary to check whether `CheckSecondaryLocks` has the same issue which may cause problems on async commit transactions.\r\n  - `CheckSecondaryLocks` looks fine.",
  "state": "closed",
  "created_at": "2024-03-08T11:08:00Z",
  "updated_at": "2024-03-12T08:36:40Z",
  "closed_at": "2024-03-12T08:36:40Z",
  "labels": [
    "type/bug",
    "sig/transaction",
    "severity/critical",
    "affects-5.4",
    "affects-6.1",
    "affects-6.5",
    "affects-7.1",
    "affects-7.5"
  ],
  "comments_data": []
}