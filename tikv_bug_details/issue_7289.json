{
  "issue_number": 7289,
  "title": "Optimistic lock blocks reads",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\n```\r\nTiKV\r\nRelease Version:   4.1.0-alpha\r\nGit Commit Hash:   6620ba26a9547011978496df6840e9786da77c17\r\nGit Commit Branch: more-txn-failpoints\r\nUTC Build Time:    2020-03-25 09:27:24\r\nRust Version:      rustc 1.42.0-nightly (0de96d37f 2019-12-19)\r\nEnable Features:   jemalloc portable sse failpoints protobuf-codec\r\nProfile:           debug\r\n```\r\n\r\n### What operating system and CPU are you using?\r\n<!-- If you're using Linux, you can run `cat /proc/cpuinfo` -->\r\nany system is ok.\r\n\r\n### Steps to reproduce\r\n<!-- If possible, provide a recipe for reproducing the error. A complete runnable program is good. -->\r\nIf the primary lock is pessimistic lock and some secondary locks are optimistic locks, these secondary locks will block reads because the pessimistic lock can't be pushed its commit ts.\r\n\r\nI write an [integration test](https://github.com/pingcap/automated-tests/pull/116/files#diff-395e09b32e5ffa4941292a8dd6788826R1274) for it and it fails:\r\n```\r\n[2020/03/29 13:07:05.310 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1274] [\"case-6: Read meets optimistic locks and the primary lock is a pessimistic lock. Skip them and read old data\"]\r\n[2020/03/29 13:07:26.232 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1282] [\"create table down\"]\r\n[2020/03/29 13:07:26.246 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1287] [\"Write session locks all keys with pessimistic locks\"]\r\n[2020/03/29 13:07:26.249 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1295] [\"commit write session\"]\r\n[2020/03/29 13:07:26.486 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1305] [\"Write session aborts and all locks are left. The primary lock is a pessimistic lock and secondary locks are optimistic locks\"]\r\n[2020/03/29 13:07:26.487 +08:00] [INFO] [TestSkipLockRead/SkipLockReadCase] [demo.go:1310] [read] [kind=unique_index_scan] [subquery=false]\r\n--- FAIL: TestSkipLockRead (32.18s)\r\n    --- FAIL: TestSkipLockRead/SkipLockReadCase (32.18s)\r\n        util.go:59:\r\n                Error Trace:    util.go:59\r\n                Error:          Received unexpected error:\r\n\r\n                                        Error Trace:    demo.go:1317\r\n                                                                                db.go:99\r\n                                                                                demo.go:1275\r\n                                                                                util.go:69\r\n                                                                                run.go:33\r\n                                                                                util.go:55\r\n                                        Error:          optimistic locks shouldn't block read\r\n```\r\n\r\n\r\n### What did you expect?\r\nOptimistic locks shouldn't block reads if the primary lock exsits.\r\n\r\n### What did happened?\r\nOptimistic locks blocks reads.\r\n",
  "state": "closed",
  "created_at": "2020-03-29T05:14:31Z",
  "updated_at": "2020-04-01T12:31:05Z",
  "closed_at": "2020-04-01T12:31:05Z",
  "labels": [
    "type/bug",
    "sig/transaction"
  ],
  "comments_data": []
}