{
  "issue_number": 4310,
  "title": "PendingCmd panics on drop",
  "body": "It's not ok generally to panic in destructors because of the risk of double-panic ([see api guide](https://rust-lang-nursery.github.io/api-guidelines/dependability.html#destructors-never-fail-c-dtor-fail)), which causes an abort.\r\n\r\nHere's the code:\r\n\r\n```\r\nimpl Drop for PendingCmd {\r\n    fn drop(&mut self) {\r\n        if self.cb.is_some() {\r\n            panic!(\r\n                \"callback of pending command at [index: {}, term: {}] is leak.\",\r\n                self.index, self.term\r\n            );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhat is the expected outcome for `cb` if the thread panicks? Is it ok to not call it in that situation? If that's ok then adding `!std::thread::panicking` to the condition in the dtor should be sufficient.\r\n\r\n",
  "state": "closed",
  "created_at": "2019-03-05T01:10:59Z",
  "updated_at": "2020-08-28T11:25:23Z",
  "closed_at": "2020-08-28T11:25:23Z",
  "labels": [
    "type/bug",
    "help wanted",
    "difficulty/easy",
    "status/mentor"
  ],
  "comments_data": [
    {
      "id": 469510929,
      "user": "brson",
      "created_at": "2019-03-05T02:31:49Z",
      "body": "Before trying to fix this I think we should get more clarity on the downsides of using `thread::panicking` in drop."
    },
    {
      "id": 470761584,
      "user": "brson",
      "created_at": "2019-03-08T00:54:56Z",
      "body": "I chatted a bit on #rust-libs about fallible destructor patterns today, and came away thinking we should go ahead and use thread::panicking to avoid the double-panic.\r\n\r\nThat is, if it is acceptable to not call that callback on panic. Hopefully someone will think about that during review.\r\n\r\nGenerally though, I think the best pattern for fallible destructors is to have a close method that returns a Result, and a drop method that verifies that close was called. I sketched out how this looks [here](https://gist.github.com/brson/4ab0526baab38972bccdfb60ef7a9bd9), though I must say I've never seen code with the dual `close()`/`destroy()` methods like that."
    }
  ]
}