{
  "issue_number": 15020,
  "title": "Enabling failpoint `raftkv_early_error_report`, `cleanup`, `pessimistic_prewrite` sometimes leads to tikv panic",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\nsh-5.1# ./tikv-server -V\r\nTiKV \r\nRelease Version:   7.2.0\r\nEdition:           Community\r\nGit Commit Hash:   12ce5540f9e8f781f14d3b3a58fb9442f03b6b29\r\nGit Commit Branch: heads/refs/tags/v7.2.0\r\nUTC Build Time:    2023-06-19 09:16:29\r\nRust Version:      rustc 1.67.0-nightly (96ddd32c4 2022-11-14)\r\nEnable Features:   pprof-fp jemalloc mem-profiling portable sse failpoints test-engine-kv-rocksdb test-engine-raft-raft-engine cloud-aws cloud-gcp cloud-azure\r\nProfile:           dist_release\r\nsh-5.1# \r\n\r\n\r\n### What operating system and CPU are you using?\r\n<!-- If you're using Linux, you can run `cat /proc/cpuinfo` -->\r\n\r\n### Steps to reproduce\r\n\r\nRun [`SkipLockRead`](https://github.com/PingCAP-QE/automated-tests/blob/66d637144b626916cad42cd27e32f322e7660fcd/ticases/transaction/pessimistic/cases.go#L1050) which is a test case in UTF.\r\n\r\nOne of the subcase in `SkipLockRead` will encounter this problem. The subcase sets following failpoints of TiKV. It's not sure yet which is the one that causes the problem:\r\n\r\n* `raftkv_early_error_report` = `return(?)` where `?` is some region ID that's being accessed\r\n* `cleanup` = `return(other)`\r\n* `pessimistic_rollback` = `return(PessimisticLockNotFound)`\r\n\r\n### What did you expect?\r\n\r\nThe test case executes successfully\r\n\r\n### What did happened?\r\n\r\nTiKV panicked:\r\n\r\n```\r\n[2023/06/26 17:18:06.454 +00:00] [FATAL] [lib.rs:497] [\"undetermined error: Error(Undetermined(\\\"async write on_applied callback is dropped\\\")) cid=2737, tag=pessimistic_rollback, process\\n                        result=Some(MultiRes { results: [] })\"] [backtrace=\"   0: tikv_util::set_panic_hook::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/lib.rs:496:18\\n   1: <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2032:9\\n      std::panicking::rust_panic_with_hook\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:692:13\\n   2: std::panicking::begin_panic_handler::{{closure}}\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:579:13\\n   3: std::sys_common::backtrace::__rust_end_short_backtrace\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:137:18\\n   4: rust_begin_unwind\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:575:5\\n   5: core::panicking::panic_fmt\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panicking.rs:65:14\\n   6: tikv::storage::txn::scheduler::TxnScheduler<E,L>::on_write_finished\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:845:25\\n   7: tikv::storage::txn::scheduler::TxnScheduler<E,L>::process_write::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:1597:21\\n   8: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:91:19\\n      tikv::storage::txn::scheduler::TxnScheduler<E,L>::process::{{closure}}::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:1152:71\\n      <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:91:19\\n      <resource_metering::InTags<T> as core::future::future::Future>::poll\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/resource_metering/src/lib.rs:266:9\\n      tikv::storage::txn::scheduler::TxnScheduler<E,L>::process::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:1166:9\\n      <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:91:19\\n      tikv::storage::txn::scheduler::TxnScheduler<E,L>::execute::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:735:54\\n   9: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:91:19\\n      <tracker::tls::TrackedFuture<F> as core::future::future::Future>::poll::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tracker/src/tls.rs:64:23\\n      std::thread::local::LocalKey<T>::try_with\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:446:16\\n      std::thread::local::LocalKey<T>::with\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:422:9\\n      <tracker::tls::TrackedFuture<F> as core::future::future::Future>::poll\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tracker/src/tls.rs:62:9\\n      tikv_util::yatp_pool::future_pool::PoolInner::spawn::{{closure}}\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/yatp_pool/future_pool.rs:167:27\\n      <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:91:19\\n      yatp::task::future::RawTask<F>::poll\\n             at rust/git/checkouts/yatp-e704b73c3ee279b6/5523a9a/src/task/future.rs:59:9\\n  10: yatp::task::future::TaskCell::poll\\n             at rust/git/checkouts/yatp-e704b73c3ee279b6/5523a9a/src/task/future.rs:103:9\\n      <yatp::task::future::Runner as yatp::pool::runner::Runner>::handle\\n             at rust/git/checkouts/yatp-e704b73c3ee279b6/5523a9a/src/task/future.rs:387:20\\n  11: <tikv_util::yatp_pool::YatpPoolRunner<T> as yatp::pool::runner::Runner>::handle\\n             at home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/yatp_pool/mod.rs:193:24\\n  12: yatp::pool::worker::WorkerThread<T,R>::run\\n             at rust/git/checkouts/yatp-e704b73c3ee279b6/5523a9a/src/pool/worker.rs:48:13\\n      yatp::pool::builder::LazyBuilder<T>::build::{{closure}}\\n             at rust/git/checkouts/yatp-e704b73c3ee279b6/5523a9a/src/pool/builder.rs:114:25\\n      std::sys_common::backtrace::__rust_begin_short_backtrace\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:121:18\\n  13: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:551:17\\n      <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/unwind_safe.rs:271:9\\n      std::panicking::try::do_call\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:483:40\\n      std::panicking::try\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:447:19\\n      std::panic::catch_unwind\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\\n      std::thread::Builder::spawn_unchecked_::{{closure}}\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:550:30\\n      core::ops::function::FnOnce::call_once{{vtable.shim}}\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:513:5\\n  14: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2000:9\\n      <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2000:9\\n      std::sys::unix::thread::Thread::new::thread_start\\n             at rust/toolchains/nightly-2022-11-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/unix/thread.rs:108:17\\n  15: start_thread\\n  16: __GI___clone\\n\"] [location=/home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/src/storage/txn/scheduler.rs:845] [thread_name=sched-worker-pool-3]\r\n```\r\n\r\nAnd the test case failed:\r\n\r\n```\r\nError:\r\n        Error Trace:    cases.go:1376\r\n                                                sql.go:62\r\n                                                cases.go:1342\r\n                                                util.go:85\r\n                                                case.go:28\r\n                                                runner.go:134\r\n                                                command.go:228\r\n                                                command.go:840\r\n                                                command.go:945\r\n                                                command.go:885\r\n                                                main.go:27\r\n                                                proc.go:250\r\n                                                asm_amd64.s:1571\r\n        Error:          An error is expected but got nil.\r\n```\r\n\r\nwhich is thrown at:\r\n\r\nhttps://github.com/PingCAP-QE/automated-tests/blob/66d637144b626916cad42cd27e32f322e7660fcd/ticases/transaction/pessimistic/cases.go#L1376",
  "state": "closed",
  "created_at": "2023-06-27T10:01:46Z",
  "updated_at": "2023-07-07T05:58:55Z",
  "closed_at": "2023-07-07T05:58:55Z",
  "labels": [
    "type/bug",
    "severity/moderate",
    "affects-6.5",
    "affects-7.1",
    "affects-7.2"
  ],
  "comments_data": [
    {
      "id": 1609188912,
      "user": "seiya-annie",
      "created_at": "2023-06-27T10:02:38Z",
      "body": "[tikv.log.gz](https://github.com/tikv/tikv/files/11880553/tikv.log.gz)\r\n"
    },
    {
      "id": 1609537187,
      "user": "cfzjywxk",
      "created_at": "2023-06-27T13:44:36Z",
      "body": "If the cause is the incompatibility between newly added assertions and previous test cases, we should open an issue in the test case repository recording the necessity of refactoring the cases as needed."
    },
    {
      "id": 1612664577,
      "user": "MyonKeminta",
      "created_at": "2023-06-29T08:58:56Z",
      "body": "The cause is that [`async_write`](https://github.com/tikv/tikv/blob/fa7baa9a5ab38a2c0872ec772252bf16158f6fb5/src/server/raftkv/mod.rs#L453) didn't use `on_applied` callback (which we wrapped with `must_call` recently) when the local variable `res` is an `Err`. `res` is made in the following code:\r\n\r\n```rust\r\n let mut res = (|| {\r\n            fail_point!(\"raftkv_async_write\");\r\n            if batch.modifies.is_empty() {\r\n                return Err(KvError::from(KvErrorInner::EmptyRequest));\r\n            }\r\n            Ok(())\r\n        })();\r\n\r\n        ASYNC_REQUESTS_COUNTER_VEC.write.all.inc();\r\n        let begin_instant = Instant::now_coarse();\r\n\r\n        if res.is_ok() {\r\n            // If rid is some, only the specified region reports error.\r\n            // If rid is None, all regions report error.\r\n            res = (|| {\r\n                fail_point!(\"raftkv_early_error_report\", |rid| {\r\n                    let region_id = ctx.get_region_id();\r\n                    rid.and_then(|rid| {\r\n                        let rid: u64 = rid.parse().unwrap();\r\n                        if rid == region_id { None } else { Some(()) }\r\n                    })\r\n                    .ok_or_else(|| RaftServerError::RegionNotFound(region_id).into())\r\n                });\r\n                Ok(())\r\n            })();\r\n        }\r\n```\r\n\r\nIt's possible to be `Err` only when:\r\n\r\n* An empty write batch is passed to `async_write`, which should be unreachable in fact; or\r\n* Failpoint `raftkv_early_error_report` is enabled to make a mock error.\r\n\r\nTo fix the problem, it seems that we can just call the callback when `res` is an error at:\r\n\r\nhttps://github.com/tikv/tikv/blob/fa7baa9a5ab38a2c0872ec772252bf16158f6fb5/src/server/raftkv/mod.rs#L552\r\n\r\nBy the way, it's kind of weird that our CI didn't find this problem as there are tests that are making use of the failpoint `raftkv_early_error_report`. Are they not running on CI?"
    },
    {
      "id": 1612666357,
      "user": "MyonKeminta",
      "created_at": "2023-06-29T09:00:12Z",
      "body": "Since async write won't be called with empty write batch in production, neigher will failpoints be used, this bug doesn't block releasing."
    },
    {
      "id": 1613029501,
      "user": "cfzjywxk",
      "created_at": "2023-06-29T12:05:22Z",
      "body": "> it seems that we can just call the callback when res  is an error\r\n\r\nIt's better to unify how the request is finished.\r\n\r\n> Are they not running on CI?\r\n\r\nThere is  a test case `test_raftkv_early_error_report` using this failpoint, but it is weird that it does not panic."
    },
    {
      "id": 1624763269,
      "user": "MyonKeminta",
      "created_at": "2023-07-07T05:19:14Z",
      "body": "https://github.com/tikv/tikv/pull/14872 's cherry-pick to 6.5 and 7.1 branch is not merged yet, and the problem would be introduced after merging them. Added affect-6.5 and affect-7.1 label for this issue."
    }
  ]
}