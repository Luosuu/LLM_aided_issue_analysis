{
  "issue_number": 4309,
  "title": "MustConsumeVec double-panics in dtor",
  "body": "Here's a backtrace I saw after the integrations suite aborted:\r\n\r\n```\r\n   2:     0x7f35f90e1012 - std::panicking::default_hook::{{closure}}::h841a24190f877711                                                                                                   [0/1209]                               at src/libstd/sys_common/backtrace.rs:59\r\n                               at src/libstd/panicking.rs:211\r\n   3:     0x7f35f90e0d7d - std::panicking::default_hook::hccb9ceccdd53c71e\r\n                               at src/libstd/panicking.rs:227\r\n   4:     0x7f35f90e1720 - std::panicking::rust_panic_with_hook::he9362bdf637fc5d8\r\n                               at src/libstd/panicking.rs:491\r\n   5:     0x7f35f90e12a1 - std::panicking::continue_panic_fmt::h8c8ecd2074b327b3\r\n                               at src/libstd/panicking.rs:398\r\n   6:     0x7f35f90e11ee - std::panicking::begin_panic_fmt::h1ea521500cda35f2\r\n                               at src/libstd/panicking.rs:353\r\n   7:     0x7f35f6a368d5 - <tikv::util::MustConsumeVec<T> as core::ops::drop::Drop>::drop::h3a3a9b2a849e950d\r\n                               at src/util/mod.rs:442\r\n   8:     0x7f35f5d37e04 - core::ptr::real_drop_in_place::h73e1a9f5ba94b524\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libcore/ptr.rs:204\r\n   9:     0x7f35f5d4e6f5 - core::ptr::real_drop_in_place::hb457c28999b6ad60\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libcore/ptr.rs:204\r\n  10:     0x7f35f5d496c5 - core::ptr::real_drop_in_place::ha6639cedc0ae13d2\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libcore/ptr.rs:204\r\n  11:     0x7f35f5d2e14b - core::ptr::real_drop_in_place::h586f2944246dee8f\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libcore/ptr.rs:204\r\n  12:     0x7f35f5d2ce8d - core::ptr::real_drop_in_place::h550ce18929bf74ec\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libcore/ptr.rs:204\r\n  13:     0x7f35f5c86084 - <tikv::raftstore::store::fsm::batch::BatchSystem<N, C>>::spawn::{{closure}}::h52454cc34b7d955a\r\n                               at /home/brian/pingcap/tikv/src/raftstore/store/fsm/batch.rs:413\r\n  14:     0x7f35f6116c53 - std::sys_common::backtrace::__rust_begin_short_backtrace::h9c7258ee61ef4189\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/sys_common/backtrace.rs:136\r\n  15:     0x7f35f60ea7a5 - std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}::h22937f1f94d8f216\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/thread/mod.rs:477\r\n  16:     0x7f35f5cedf85 - <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::hdc7ff75bf672b56c\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/panic.rs:319\r\n  17:     0x7f35f610b559 - std::panicking::try::do_call::h3b2352044d77b600\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/panicking.rs:310\r\n  18:     0x7f35f90f1429 - __rust_maybe_catch_panic\r\n                               at src/libpanic_unwind/lib.rs:102\r\n  19:     0x7f35f61083af - std::panicking::try::h4815b9ded690dc25\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/panicking.rs:289\r\n  20:     0x7f35f5cee135 - std::panic::catch_unwind::h31787006ba5c4dc5\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/panic.rs:398\r\n  21:     0x7f35f60e7eaf - std::thread::Builder::spawn_unchecked::{{closure}}::h42c325abc30012eb\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/libstd/thread/mod.rs:476\r\n  22:     0x7f35f60eb9c7 - <F as alloc::boxed::FnBox<A>>::call_box::h5cfecb9f166a31d2\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/liballoc/boxed.rs:673\r\n  23:     0x7f35f90e504d - std::sys::unix::thread::Thread::new::thread_start::h809dab03f76374f4\r\n                               at /rustc/14997d56a550f4aa99fe737593cd2758227afc56/src/liballoc/boxed.rs:683\r\n                               at src/libstd/sys_common/thread.rs:24\r\n                               at src/libstd/sys/unix/thread.rs:90\r\n  24:     0x7f35f3be76b9 - start_thread\r\n  25:     0x7f35f32d741c - clone\r\n  26:                0x0 - <unknown>\r\nthread panicked while panicking. aborting.\r\nstack backtrace:\r\n   0:     0x7f35f90e2303 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h0cd0554f80fdb8db\r\n                               at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1:     0xerror: process didn't exit successfully: `/home/brian/pingcap/tikv/target/debug/deps/integrations-bbf39140df7802d9` (signal: 4, SIGILL: illegal instruction)\r\n```\r\n\r\nThe source of the panick is:\r\n\r\n```\r\nimpl<T> Drop for MustConsumeVec<T> {\r\n    fn drop(&mut self) {\r\n        if !self.is_empty() {\r\n            panic!(\"resource leak detected: {}.\", self.tag);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIt is not appropriate for destructors to panic because it leads to double panic like this ([guide](https://rust-lang-nursery.github.io/api-guidelines/dependability.html#destructors-never-fail-c-dtor-fail). It would be fine to log this, but not panic.\r\n\r\nThe intent here looks to be that the vec must be cleared before it's destroyed, but that will not happen if some other code panicks, guaranteeing double panic and abort.\r\n\r\nIt is unavoidable that a MustConsumeVec will contain elements on panic. If that is unacceptable, then some extra mechanism must be added to do something useful with them on panic.\r\n\r\nThis is a tricky area in Rust. Usually when there is some invariant the must be fulfilled on drop, then you add a by-val `close` method that does those checks. Then though you have to verify that somebody called _that_ in the dtor, and what if they didn't? Can't panic for the same reasons as before.\r\n\r\nOften in these situations the dtor just does the least bad thing, e.g. if `fsync` fails on File close, it fails silently afaik.",
  "state": "closed",
  "created_at": "2019-03-05T01:05:52Z",
  "updated_at": "2019-06-28T23:02:27Z",
  "closed_at": "2019-06-28T23:02:27Z",
  "labels": [
    "type/bug",
    "help wanted",
    "difficulty/easy",
    "status/mentor",
    "component/server"
  ],
  "comments_data": [
    {
      "id": 469492522,
      "user": "brson",
      "created_at": "2019-03-05T01:07:20Z",
      "body": "Ok, probably a better solution here is to say \"if the thread doesn't panic, the buffer must be empty\" (assuming that is acceptable for its use case). And that can be expressed by adding `if !std::thread::panicking()` to the dtor."
    },
    {
      "id": 469510908,
      "user": "brson",
      "created_at": "2019-03-05T02:31:43Z",
      "body": "Before trying to fix this I think we should get more clarity on the downsides of using `thread::panicking` in drop."
    },
    {
      "id": 470761720,
      "user": "brson",
      "created_at": "2019-03-08T00:55:37Z",
      "body": "I chatted a bit on #rust-libs about fallible destructor patterns today, and came away thinking we should go ahead and use thread::panicking to avoid the double-panic.\r\n\r\nThat is, if it is acceptable to leave the buffer full on panic. Hopefully someone will think about that during review.\r\n\r\nGenerally though, I think the best pattern for fallible destructors is to have a close method that returns a Result, and a drop method that verifies that close was called. I sketched out how this looks [here](https://gist.github.com/brson/4ab0526baab38972bccdfb60ef7a9bd9), though I must say I've never seen code with the dual `close()`/`destroy()` methods like that."
    },
    {
      "id": 471280544,
      "user": "iosmanthus",
      "created_at": "2019-03-10T11:44:32Z",
      "body": "Maybe it should just panic? There have been already some resources leaked if the inner buffer is not empty which means there was something going wrong, so avoiding double panicking won't help the fact that some resources are leaked. btw, the original code may be rewritten as??:\r\n```rust\r\nimpl<T> Drop for MustConsumeVec<T> {\r\n    fn drop(&mut self) {\r\n        assert!(self.is_empty(), \"resource leak detected: {}.\", self.tag);\r\n    }\r\n}\r\n```"
    },
    {
      "id": 471938846,
      "user": "BusyJay",
      "created_at": "2019-03-12T10:15:15Z",
      "body": "Generally it won't panic inside drop unless there are bugs, so `thread::panicking` inside drop should be nearly-unreachable code."
    },
    {
      "id": 471941511,
      "user": "BusyJay",
      "created_at": "2019-03-12T10:22:29Z",
      "body": "In TiKV, if a panic happens, the whole process will be forced to exit later, so it's not necessary to panic again even resource leak is detected. The purpose of `MustConsumeVec` is to detect if there is resources not released properly during normal situation."
    }
  ]
}