{
  "issue_number": 8557,
  "title": "copr: table scan's assertion fail while enable cluster index by default in TiDB",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n`master`\r\n\r\n### Steps to reproduce\r\nIn private testing repo: `tidb-test/mysql_test`, after enabling cluster index by default in TiDB, the test fail because of the panicking of `TiKV`. Here is the stack trace:\r\n```\r\n[2020-08-31T09:06:00.296Z] [2020/08/31 17:04:35.276 +08:00] [FATAL] [lib.rs:481] [\"assertion failed: `(left == right)`\r\n  left: `4`,\r\n right: `8`\"] [backtrace=\"stack backtrace:\r\n   0: tikv_util::set_panic_hook::{{closure}}\r\n   1: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:524\r\n   2: rust_begin_unwind\r\n             at src/libstd/panicking.rs:431\r\n   3: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:385\r\n   4: <tidb_query_vec_executors::table_scan_executor::BatchTableScanExecutor<S> as tidb_query_vec_executors::interface::BatchExecutor>::next_batch\r\n   5: <tidb_query_common::execute_stats::WithSummaryCollector<C,T> as tidb_query_vec_executors::interface::BatchExecutor>::next_batch\r\n   6: tidb_query_vec_executors::runner::BatchExecutorsRunner<SS>::internal_handle_request\r\n   7: <minitrace::future::TraceWrapped<T> as core::future::future::Future>::poll\r\n   8: <tikv::coprocessor::interceptors::tracker::Tracker<F> as core::future::future::Future>::poll\r\n   9: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\r\n  10: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\r\n  11: <yatp::task::future::Runner as yatp::pool::runner::Runner>::handle\r\n  12: std::sys_common::backtrace::__rust_begin_short_backtrace\r\n  13: core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n  14: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/16957bd4d3a5377263f76ed74c572aad8e4b7e59/src/liballoc/boxed.rs:1078\r\n      <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/16957bd4d3a5377263f76ed74c572aad8e4b7e59/src/liballoc/boxed.rs:1078\r\n      std::sys::unix::thread::Thread::new::thread_start\r\n             at src/libstd/sys/unix/thread.rs:87\r\n  15: start_thread\r\n  16: __clone\r\n\"] [location=/rustc/16957bd4d3a5377263f76ed74c572aad8e4b7e59/src/libstd/macros.rs:16] [thread_name=unified-read-pool-1]\r\n\r\n```\r\n\r\nThe failed `SQL`s are:\r\n```sql\r\nCREATE TABLE t(\r\n a INTEGER,\r\n b BLOB,\r\n PRIMARY KEY (b(1))\r\n);\r\n\r\nINSERT INTO t(b) VALUES('a'),('b'),('c'),('d');\r\nFLUSH TABLES;\r\nSELECT LEAD(1,1,1) OVER(PARTITION BY a) FROM t;\r\n```",
  "state": "closed",
  "created_at": "2020-08-31T13:13:46Z",
  "updated_at": "2020-09-02T03:08:25Z",
  "closed_at": "2020-09-02T03:08:25Z",
  "labels": [
    "type/bug",
    "sig/coprocessor",
    "priority/high",
    "severity/critical"
  ],
  "comments_data": []
}