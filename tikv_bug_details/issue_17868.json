{
  "issue_number": 17868,
  "title": "TiKV panic with \"assertion failed: cached_last < trunc_to_idx\"",
  "body": "## Bug Report\r\n\r\n```log\r\nstore/TiDB master bank-multitable auto-retry auto-retry-limit :default update-in-place select FOR UPDATE txn-mode pessimistic isolation :repeatable-read nemesis partition-half,partition-pd-leader,partition-ring,schedules/20241119T123842.000Z/node-1.node-peer.jepsen-tps-7527309-1-659/kv.log:[2024/11/19 12:48:10.846 +00:00] [FATAL] [lib.rs:480] [\"assertion failed: cached_last < trunc_to_idx\"] [backtrace=\"   0: tikv_util::set_panic_hook::{{closure}}\\             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/lib.rs:479:18\r\n   1: <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2029:9\r\n      std::panicking::rust_panic_with_hook\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:783:13\r\n   2: std::panicking::begin_panic_handler::{{closure}}\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:649:13\r\n   3: std::sys_common::backtrace::__rust_end_short_backtrace\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:171:18\r\n   4: rust_begin_unwind\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:645:5\r\n   5: core::panicking::panic_fmt\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panicking.rs:72:14\r\n   6: core::panicking::panic\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panicking.rs:144:5\r\n   7: raftstore::store::entry_storage::EntryCache::append_impl\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/entry_storage.rs:202:21\r\n      raftstore::store::entry_storage::EntryCache::append\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/entry_storage.rs:156:32\r\n   8: raftstore::store::entry_storage::EntryStorage<EK,ER>::append\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/entry_storage.rs:1098:9\r\n   9: raftstore::store::peer_storage::PeerStorage<EK,ER>::handle_raft_ready\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/peer_storage.rs:993:13\r\n      raftstore::store::peer::Peer<EK,ER>::handle_raft_ready_append\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/peer.rs:2878:37\r\n  10: raftstore::store::fsm::peer::PeerFsmDelegate<EK,ER,T>::collect_ready\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/peer.rs:2173:19\r\n      <raftstore::store::fsm::store::RaftPoller<EK,ER,T> as batch_system::batch::PollHandler<raftstore::store::fsm::peer::PeerFsm<EK,ER>,raftstore::store::fsm::store::StoreFsm<EK>>>::handle_normal\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1101:13\r\n  11: batch_system::batch::Poller<N,C,Handler>::poll\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/batch-system/src/batch.rs:416:27\r\n  12: batch_system::batch::BatchSystem<N,C>::start_poller::{{closure}}\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/batch-system/src/batch.rs:589:17\r\n      <std::thread::Builder as tikv_util::sys::thread::StdThreadBuildWrapper>::spawn_wrapper::{{closure}}\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/sys/thread.rs:438:13\r\n      std::sys_common::backtrace::__rust_begin_short_backtrace\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:155:18\r\n  13: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:529:17\r\n      <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/unwind_safe.rs:272:9\r\n      std::panicking::try::do_call\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:552:40\r\n      std::panicking::try\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:516:19\r\n      std::panic::catch_unwind\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:142:14\r\n      std::thread::Builder::spawn_unchecked_::{{closure}}\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:528:30\r\n      core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5\r\n  14: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2015:9\r\n      <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:2015:9\r\n      std::sys::unix::thread::Thread::new::thread_start\r\n             at /rust/toolchains/nightly-2023-12-28-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/unix/thread.rs:108:17\r\n  15: start_thread\r\n  16: clone\r\n\"] [location=components/raftstore/src/store/entry_storage.rs:202] [thread_name=raftstore-1-1] [thread_id=144]\r\n```\r\n\r\nhttps://tcms.pingcap.net/dashboard/executions/plan/7527309\r\n\r\nThis panic is found by @SpadeA-Tang , thank you!\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\n\r\nNightly 2024-11-18\r\n\r\n### Steps to reproduce\r\n<!-- If possible, provide a recipe for reproducing the error. A complete runnable program is good. -->\r\n\r\nRun jepsen-bank-tbls-pessimistic\r\n",
  "state": "open",
  "created_at": "2024-11-20T04:21:55Z",
  "updated_at": "2024-11-22T08:49:54Z",
  "closed_at": null,
  "labels": [
    "type/bug",
    "severity/major",
    "may-affects-5.4",
    "may-affects-6.1",
    "may-affects-6.5",
    "may-affects-7.1",
    "may-affects-7.5",
    "may-affects-8.1",
    "impact/panic",
    "may-affects-8.5"
  ],
  "comments_data": [
    {
      "id": 2490154462,
      "user": "glorv",
      "created_at": "2024-11-21T06:07:57Z",
      "body": "Briefly look into this issue, seems the panic in this issue actually means **A raft peer should not receive append raft entries \r\nagain if they are already committed.** (The panic is caused by L202.)\r\n\r\nhttps://github.com/tikv/tikv/blob/3bd8c24d1a1eb277877557b35d3b175330e7010e/components/raftstore/src/store/entry_storage.rs#L183-L210\r\n\r\nBut I think this is a too strong assertion that the raft protocal does not requires. The raft protocal only requires that if an entry is committed, the entry with this index will never change. It does not forbid a raft peer to receive some raft entries again even if the peer knows these entries are already committed iff these raft entries are not changed.\r\n\r\nI think in the implementation of raftstore, one possible scenario that can triggers this assert failure is that: If an AppendMsg is lost in the network which will triggers append reject after a follower receives the next ApplyMsg and it will response with its current committed index which can be smaller the this leader's committed index as well as itself's last index. Then the leader will resend raft logs from this committed index. But before the next AppendMsg is send(from the follower's committed index), the leader may have sent a Heartbeat msg that advanced the follower's committed index and triggered apply. Then, when the follower receives the AppendMsg from its pervious committed index, this assert will fail.\r\n\r\n/cc @BusyJay @gengliqi @overvenus @Connor1996 What do you think?"
    },
    {
      "id": 2490169446,
      "user": "BusyJay",
      "created_at": "2024-11-21T06:20:23Z",
      "body": "raft-rs will find the term/index conflict and ensure entry with same index and term will be only appended once. Panic in cache probably means bug in application (like cache index error)."
    },
    {
      "id": 2490258852,
      "user": "glorv",
      "created_at": "2024-11-21T07:25:43Z",
      "body": "> raft-rs will find the term/index conflict and ensure entry with same index and term will be only appended once. Panic in cache probably means bug in application (like cache index error).\r\n\r\nYes, after re-reading raft-rs, I found raft-rs will directly reject Append Message if the message index is smaller than its current committed index, so what I said above is not possible."
    }
  ]
}