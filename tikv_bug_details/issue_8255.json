{
  "issue_number": 8255,
  "title": "cases::test_coprocessor::test_parse_request_failed_2 not work",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\nmaster\r\n\r\n### Steps to reproduce\r\n- add `println!(\"list {:?}\", fail::list());` at `fail_point!(\"rockskv_async_snapshot\",`\r\n- `cargo test --package tests --test failpoints -- cases::test_coprocessor::test_parse_request_failed_2 --exact --nocapture`\r\n\r\n### What did you expect?\r\nfail::list prints failpoint configuration\r\n",
  "state": "closed",
  "created_at": "2020-07-15T07:27:12Z",
  "updated_at": "2020-11-12T06:09:22Z",
  "closed_at": "2020-11-12T06:09:22Z",
  "labels": [
    "type/bug",
    "sig/coprocessor",
    "priority/low",
    "severity/major"
  ],
  "comments_data": [
    {
      "id": 682401028,
      "user": "BusyJay",
      "created_at": "2020-08-28T08:32:37Z",
      "body": "Does it still exist on master?"
    },
    {
      "id": 725861050,
      "user": "MyonKeminta",
      "created_at": "2020-11-12T06:09:21Z",
      "body": "You added the println statement to the `async_snapshot` function. However, the test means to return an error when parsing the request, which happens before `async_snapshot` function. So actually `async_snapshot` function should never be invoked, so the message you added is expected never to be printed. So as I understand it the test works well. If you comment out `fail::cfg(\"coprocessor_parse_request\", \"return()\").unwrap();` and `assert!(resp.get_other_error().contains(\"unsupported tp\"));`, the test will panic at failpoint `rockskv_async_snapshot` because it's configured so."
    }
  ]
}