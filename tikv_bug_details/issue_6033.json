{
  "issue_number": 6033,
  "title": "tidb_query_codegen unit test fails",
  "body": "## Bug Report\r\n\r\nRun `make dev`\r\n\r\n```\r\n     Running target/debug/deps/tidb_query_codegen-03c816ee687b241e\r\nrunning 11 tests\r\ntest rpn_function::tests_normal::test_no_generic_generate_fn_trait ... ok\r\ntest rpn_function::tests_normal::test_no_generic_generate_dummy_fn_trait_impl ... ok\r\ntest rpn_function::tests_normal::test_generic_generate_fn_trait ... ok\r\ntest rpn_function::tests_normal::test_generic_generate_dummy_fn_trait_impl ... ok\r\ntest rpn_function::tests_normal::test_no_generic_generate_evaluator ... ok\r\ntest rpn_function::tests_normal::test_generic_generate_evaluator ... ok\r\ntest rpn_function::tests_normal::test_generic_generate_real_fn_trait_impl ... ok\r\ntest rpn_function::tests_normal::test_no_generic_with_extras_generate_real_fn_trait_impl ... ok\r\ntest rpn_function::tests_normal::test_no_generic_generate_real_fn_trait_impl ... ok\r\nthread 'rpn_function::tests_normal::test_no_generic_generate_constructor' panicked at 'assertion failed: `(left == right)`\r\n  left: `\"pub const fn foo_fn_meta ( ) -> crate :: rpn_expr :: RpnFnMeta { # [ inline ] fn run ( ctx : & mut crate :: expr :: EvalContext , output_rows : usize , args : & [ crate :: rpn_expr :: RpnStackNode < \\'_ > ] , extra : & mut crate :: rpn_expr :: RpnFnCallExtra < \\'_ > , metadata : & ( dyn std :: any :: Any + Send ) , ) -> crate :: Result < crate :: codec :: data_type :: VectorValue > { use crate :: rpn_expr :: function :: { ArgConstructor , Evaluator , Null } ; < ArgConstructor < Real , _ >> :: new ( 1usize , < ArgConstructor < Int , _ >> :: new ( 0usize , Foo_Evaluator ( std :: marker :: PhantomData ) ) ) . eval ( Null , ctx , output_rows , args , extra , metadata ) } fn init_metadata ( expr : & mut :: tipb :: Expr ) -> Box < dyn std :: any :: Any + Send > { Box :: new ( ( ) ) } fn validate ( expr : & tipb :: Expr ) -> crate :: Result < ( ) > { use crate :: codec :: data_type :: Evaluable ; use crate :: rpn_expr :: function ; function :: validate_expr_return_type ( expr , Decimal :: EVAL_TYPE ) ? ; function :: validate_expr_arguments_eq ( expr , 2usize ) ? ; let children = expr . get_children ( ) ; function :: validate_expr_return_type ( & children [ 0usize ] , Int :: EVAL_TYPE ) ? ; function :: validate_expr_return_type ( & children [ 1usize ] , Real :: EVAL_TYPE ) ? ; Ok ( ( ) ) } crate :: rpn_expr :: RpnFnMeta { name : \\\"foo\\\" , metadata_ctor_ptr : init_metadata , validator_ptr : validate , fn_ptr : run , } }\"`,\r\n right: `\"pub const fn foo_fn_meta ( ) -> crate :: rpn_expr :: RpnFnMeta { # [ inline ] fn run ( ctx : & mut crate :: expr :: EvalContext , output_rows : usize , args : & [ crate :: rpn_expr :: RpnStackNode < \\'_ > ] , extra : & mut crate :: rpn_expr :: RpnFnCallExtra < \\'_ > , metadata : & ( dyn std :: any :: Any + Send ) , ) -> crate :: Result < crate :: codec :: data_type :: VectorValue > { use crate :: rpn_expr :: function :: { ArgConstructor , Evaluator , Null } ; < ArgConstructor < Real , _ >> :: new ( 1usize , < ArgConstructor < Int , _ >> :: new ( 0usize , Foo_Evaluator ( std :: marker :: PhantomData ) ) ) . eval ( Null , ctx , output_rows , args , extra , metadata ) } fn init_metadata ( expr : & mut :: tipb :: Expr ) -> Result < Box < dyn std :: any :: Any + Send >> { Ok ( Box :: new ( ( ) ) ) } fn validate ( expr : & tipb :: Expr ) -> crate :: Result < ( ) > { use crate :: codec :: data_type :: Evaluable ; use crate :: rpn_expr :: function ; function :: validate_expr_return_type ( expr , Decimal :: EVAL_TYPE ) ? ; function :: validate_expr_arguments_eq ( expr , 2usize ) ? ; let children = expr . get_children ( ) ; function :: validate_expr_return_type ( & children [ 0usize ] , Int :: EVAL_TYPE ) ? ; function :: validate_expr_return_type ( & children [ 1usize ] , Real :: EVAL_TYPE ) ? ; Ok ( ( ) ) } crate :: rpn_expr :: RpnFnMeta { name : \\\"foo\\\" , metadata_ctor_ptr : init_metadata , validator_ptr : validate , fn_ptr : run , } }\"`', components/tidb_query_codegen/src/rpn_function.rs:1240:9\r\nstack backtrace:\r\nthread 'rpn_function::tests_normal::test_generic_generate_constructor' panicked at 'assertion failed: `(left == right)`\r\n  left: `\"pub const fn foo_fn_meta < A : M , B > ( ) -> crate :: rpn_expr :: RpnFnMeta where B : N < A > { # [ inline ] fn run < A : M , B > ( ctx : & mut crate :: expr :: EvalContext , output_rows : usize , args : & [ crate :: rpn_expr :: RpnStackNode < \\'_ > ] , extra : & mut crate :: rpn_expr :: RpnFnCallExtra < \\'_ > , metadata : & ( dyn std :: any :: Any + Send ) , ) -> crate :: Result < crate :: codec :: data_type :: VectorValue > where B : N < A > { use crate :: rpn_expr :: function :: { ArgConstructor , Evaluator , Null } ; < ArgConstructor < A :: X , _ >> :: new ( 0usize , Foo_Evaluator :: < A , B > ( std :: marker :: PhantomData ) ) . eval ( Null , ctx , output_rows , args , extra , metadata ) } fn init_metadata < A : M , B > ( expr : & mut :: tipb :: Expr ) -> Box < dyn std :: any :: Any + Send > where B : N < A > { Box :: new ( ( ) ) } fn validate < A : M , B > ( expr : & tipb :: Expr ) -> crate :: Result < ( ) > where B : N < A > { use crate :: codec :: data_type :: Evaluable ; use crate :: rpn_expr :: function ; function :: validate_expr_return_type ( expr , B :: EVAL_TYPE ) ? ; function :: validate_expr_arguments_eq ( expr , 1usize ) ? ; let children = expr . get_children ( ) ; function :: validate_expr_return_type ( & children [ 0usize ] , A :: X :: EVAL_TYPE ) ? ; Ok ( ( ) ) } crate :: rpn_expr :: RpnFnMeta { name : \\\"foo\\\" , metadata_ctor_ptr : init_metadata :: < A , B > , validator_ptr : validate :: < A , B > , fn_ptr : run :: < A , B > , } }\"`,\r\n right: `\"pub const fn foo_fn_meta < A : M , B > ( ) -> crate :: rpn_expr :: RpnFnMeta where B : N < A > { # [ inline ] fn run < A : M , B > ( ctx : & mut crate :: expr :: EvalContext , output_rows : usize , args : & [ crate :: rpn_expr :: RpnStackNode < \\'_ > ] , extra : & mut crate :: rpn_expr :: RpnFnCallExtra < \\'_ > , metadata : & ( dyn std :: any :: Any + Send ) , ) -> crate :: Result < crate :: codec :: data_type :: VectorValue > where B : N < A > { use crate :: rpn_expr :: function :: { ArgConstructor , Evaluator , Null } ; < ArgConstructor < A :: X , _ >> :: new ( 0usize , Foo_Evaluator :: < A , B > ( std :: marker :: PhantomData ) ) . eval ( Null , ctx , output_rows , args , extra , metadata ) } fn init_metadata < A : M , B > ( expr : & mut :: tipb :: Expr ) -> Result < Box < dyn std :: any :: Any + Send >> where B : N < A > { Ok ( Box :: new ( ( ) ) ) } fn validate < A : M , B > ( expr : & tipb :: Expr ) -> crate :: Result < ( ) > where B : N < A > { use crate :: codec :: data_type :: Evaluable ; use crate :: rpn_expr :: function ; function :: validate_expr_return_type ( expr , B :: EVAL_TYPE ) ? ; function :: validate_expr_arguments_eq ( expr , 1usize ) ? ; let children = expr . get_children ( ) ; function :: validate_expr_return_type ( & children [ 0usize ] , A :: X :: EVAL_TYPE ) ? ; Ok ( ( ) ) } crate :: rpn_expr :: RpnFnMeta { name : \\\"foo\\\" , metadata_ctor_ptr : init_metadata :: < A , B > , validator_ptr : validate :: < A , B > , fn_ptr : run :: < A , B > , } }\"`', components/tidb_query_codegen/src/rpn_function.rs:1418:9\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.35/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.35/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:214\r\n   6: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:481\r\n   7: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:384\r\n   8: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:339\r\n   9: tidb_query_codegen::rpn_function::tests_normal::test_no_generic_generate_constructor\r\n             at components/tidb_query_codegen/src/rpn_function.rs:1240\r\n  10: tidb_query_codegen::rpn_function::tests_normal::test_no_generic_generate_constructor::{{closure}}\r\n             at components/tidb_query_codegen/src/rpn_function.rs:1198\r\n  11: core::ops::function::FnOnce::call_once\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libcore/ops/function.rs:227\r\n  12: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/liballoc/boxed.rs:922\r\n  13: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:80\r\n  14: std::panicking::try\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libstd/panicking.rs:275\r\n  15: std::panic::catch_unwind\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libstd/panic.rs:394\r\n  16: test::run_test::run_test_inner::{{closure}}\r\n             at src/libtest/lib.rs:1413\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.35/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.35/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: stdtest rpn_function::tests_normal::test_no_generic_generate_constructor ... ::panickingFAILED::\r\ndefault_hook\r\n             at src/libstd/panicking.rs:214\r\n   6: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:481\r\n   7: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:384\r\n   8: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:339\r\n   9: tidb_query_codegen::rpn_function::tests_normal::test_generic_generate_constructor\r\n             at components/tidb_query_codegen/src/rpn_function.rs:1418\r\n  10: tidb_query_codegen::rpn_function::tests_normal::test_generic_generate_constructor::{{closure}}\r\n             at components/tidb_query_codegen/src/rpn_function.rs:1370\r\n  11: core::ops::function::FnOnce::call_once\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libcore/ops/function.rs:227\r\n  12: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/liballoc/boxed.rs:922\r\n  13: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:80\r\n  14: std::panicking::try\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libstd/panicking.rs:275\r\n  15: std::panic::catch_unwind\r\n             at /rustc/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068/src/libstd/panic.rs:394\r\n  16: test::run_test::run_test_inner::{{closure}}\r\n             at src/libtest/lib.rs:1413\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\ntest rpn_function::tests_normal::test_generic_generate_constructor ... FAILED\r\nfailures:\r\nfailures:\r\n    rpn_function::tests_normal::test_generic_generate_constructor\r\n    rpn_function::tests_normal::test_no_generic_generate_constructor\r\ntest result: FAILED. 9 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\r\nerror: test failed, to rerun pass '-p tidb_query_codegen --lib'\r\nMakefile:217: recipe for target 'test' failed\r\nmake[1]: *** [test] Error 101\r\nmake[1]: Leaving directory '/home/geekypanda/Softwares/tikv'\r\nMakefile:108: recipe for target 'dev' failed\r\nmake: *** [dev] Error 2\r\n```",
  "state": "closed",
  "created_at": "2019-11-25T02:48:02Z",
  "updated_at": "2019-11-25T04:29:19Z",
  "closed_at": "2019-11-25T04:29:19Z",
  "labels": [
    "type/bug",
    "component/test-bench"
  ],
  "comments_data": []
}