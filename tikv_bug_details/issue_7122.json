{
  "issue_number": 7122,
  "title": "Performance regression on Sysbench between Feb 10 and Feb 28",
  "body": "## Bug Report\r\n\r\nIn #6962, we found that unify read pools caused a serious performance regression on TPCH. Yesterday, when we look back on Sysbench performance, we saw there existed a performance drop, and we found it maybe also caused by d2af249.\r\n\r\nMoreover, the fix [PR](https://github.com/tikv/tikv/pull/6981) doesn't take effect on Sysbench regression.\r\n\r\n![image](https://user-images.githubusercontent.com/3251373/76837431-86c4f480-686d-11ea-8253-4f1432ec1ae1.png)\r\n\r\n```\r\n$ lscpu\r\n\r\nArchitecture:          x86_64\r\nCPU op-mode(s):        32-bit, 64-bit\r\nByte Order:            Little Endian\r\nCPU(s):                40\r\nOn-line CPU(s) list:   0-39\r\nThread(s) per core:    2\r\nCore(s) per socket:    10\r\nSocket(s):             2\r\nNUMA node(s):          2\r\nVendor ID:             GenuineIntel\r\nCPU family:            6\r\nModel:                 79\r\nModel name:            Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz\r\nStepping:              1\r\nCPU MHz:               2027.990\r\nCPU max MHz:           3100.0000\r\nCPU min MHz:           1200.0000\r\nBogoMIPS:              4400.04\r\nVirtualization:        VT-x\r\nL1d cache:             32K\r\nL1i cache:             32K\r\nL2 cache:              256K\r\nL3 cache:              25600K\r\nNUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38\r\nNUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39\r\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts spec_ctrl intel_stibp\r\n```\r\n",
  "state": "closed",
  "created_at": "2020-03-17T08:39:52Z",
  "updated_at": "2020-04-04T11:29:31Z",
  "closed_at": "2020-04-04T11:29:31Z",
  "labels": [
    "type/bug"
  ],
  "comments_data": [
    {
      "id": 600099694,
      "user": "sticnarf",
      "created_at": "2020-03-17T14:24:35Z",
      "body": "Profile: [profile.svg.zip](https://github.com/tikv/tikv/files/4343737/profile.svg.zip)\r\n\r\n![image](https://user-images.githubusercontent.com/17217495/76862776-8c383400-6899-11ea-8739-98d642a0a603.png)\r\n\r\nI don't think the regression is as severe as it looks like.\r\n\r\nIn addition to the issue description, it's one TiDB instance and one TiKV instance running on the same server in this benchmark. The CPU resource on the machine is exhausted.\r\n\r\nFrom the flamegraph, we can see it takes a lot of time in `steal_batch_and_pop`. It means lots of threads are fighting for the same global task queue. It usually happens when tasks are few (because if threads are busy handling requests they don't have time to seize the queue) so we can accept the waste of resource in most cases. But in this case, the bottleneck is the total CPU resource of the machine. The waste here leads to performance regression.\r\n\r\nPotential improvements:\r\n1. Adaptive running thread count. It can be beneficial for some real cases but may not necessarily solve this issue. The running TiDB can disturb the strategy of releasing more threads for running.\r\n2. Limit the maximum number of threads which share the same global task queue to reduce contension if the thread number in the pool is considerable. NUMA-awareness can be also taken into consideration.\r\n\r\n/cc @BusyJay "
    },
    {
      "id": 600438311,
      "user": "BusyJay",
      "created_at": "2020-03-18T05:52:56Z",
      "body": "Low price node can also benefit from fixing the issue. Maybe yatp can maintain a global task count as an epoch to avoid false fetch."
    }
  ]
}