{
  "issue_number": 6498,
  "title": "Configuration validation doesn't find misspelled option names in config file",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\n```\r\nRelease Version:   3.1.0-beta.1\r\nGit Commit Hash:   b8b9327f615e9c54a08772b53505a9f864ce55cb\r\nGit Commit Branch: release-3.1\r\nUTC Build Time:    2020-01-12 05:58:49\r\nRust Version:      rustc 1.37.0-nightly (0e4a56b4b 2019-06-13)\r\n```\r\n\r\n### What operating system and CPU are you using?\r\n<!-- If you're using Linux, you can run `cat /proc/cpuinfo` -->\r\nDarwin seastar.local 19.2.0 Darwin Kernel Version 19.2.0: Sat Nov  9 03:47:04 PST 2019; root:xnu-6153.61.1~20/RELEASE_X86_64 x86_64\r\n\r\n### Steps to reproduce\r\n<!-- If possible, provide a recipe for reproducing the error. A complete runnable program is good. -->\r\n```\r\nprintf %s\\\\n > tikv.toml '[rocksdb]' 'max_open_files = 20000'\r\ntikv-server -C ./tikv.toml --pd=127.0.0.1 --config-check\r\ntikv-server -C ./tikv.toml --pd=127.0.0.1  2>&1 | grep -o 'max.open.files..........'\r\n```\r\n\r\n### What did you expect?\r\n\r\nUsing `max_open_files` should either work correctly or should cause configuration validation to fail. Silently accepting invalid configuration items can lead to serious security issues and a lot of wasted time for DBAs.\r\n\r\n### What did happened?\r\n\r\nTiKV silently accepted `max_open_files` instead of `max-open-files`, even though `max_open_files` is invalid and has no effect.",
  "state": "closed",
  "created_at": "2020-01-23T23:34:45Z",
  "updated_at": "2020-08-28T10:11:01Z",
  "closed_at": "2020-08-28T10:11:01Z",
  "labels": [
    "type/bug",
    "severity/moderate"
  ],
  "comments_data": [
    {
      "id": 577991311,
      "user": "kennytm",
      "created_at": "2020-01-24T04:57:17Z",
      "body": "cc serde-rs/serde#1609."
    },
    {
      "id": 578156203,
      "user": "siddontang",
      "created_at": "2020-01-24T14:37:29Z",
      "body": "@kennytm \r\n\r\nseem serde hasn't solved this problem, so what can we do in TiKV now? "
    },
    {
      "id": 578289387,
      "user": "kennytm",
      "created_at": "2020-01-24T20:30:27Z",
      "body": "We could:\r\n\r\n1. generate 2 sets of structs (manually or via proc macros), one for --config-check which has  `#[serde(deny_unknown_fields)]` and one for normal use which does not have the attribute; or\r\n2. patch serde ourselves, and use our fork until it is merged upstream. \r\n3. manually implement `Deserialize` which encodes the dynamic behavior ðŸ™ƒ "
    },
    {
      "id": 578380524,
      "user": "kolbe",
      "created_at": "2020-01-25T06:03:47Z",
      "body": "I'd rather the default behavior be for tikv-server to refuse to start if there are any invalid options in a config file, regardless of whether --check-config is used.\r\n\r\nI got some pushback on this being the default in tidb-server, but I did add a --strict-config option there. Maybe the same could be done in TiKV?"
    },
    {
      "id": 578382492,
      "user": "kennytm",
      "created_at": "2020-01-25T06:41:02Z",
      "body": "@kolbe \r\n\r\n> I'd rather the default behavior be for tikv-server to refuse to start if there are any invalid options in a config file, regardless of whether --check-config is used.\r\n\r\nWe tried that but it breaks backward compatibility (#5286) and needs to be reverted. \r\n\r\nAdding a `--strict-config` still requires https://github.com/tikv/tikv/issues/6498#issuecomment-578289387 since currently `serde_derive` only supports picking a single behavior (ignore or error) per type."
    },
    {
      "id": 580254044,
      "user": "gregwebs",
      "created_at": "2020-01-30T13:32:28Z",
      "body": "Should we extend serde for our use case then?"
    }
  ]
}