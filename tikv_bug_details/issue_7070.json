{
  "issue_number": 7070,
  "title": "Pipelined pessimistic lock may roll back a normal transaction",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n[`handle_non_pessimistic_lock_conflict`](https://github.com/tikv/tikv/blob/de13c6024e4168b91c4910533636758017c2fbe7/src/storage/mvcc/txn.rs#L209) assumes all pessimistic locks are acquired successfully. With [pipelined pessimistic lock](https://github.com/tikv/tikv/pull/6984), it breaks the assumption and results in rolling back a normal transaction.\r\n\r\nFor example:\r\n```sql\r\ncreate table t (k int primary key, v int, key v_idx (v));\r\ninsert into t values (1, 1);\r\n```\r\nTwo sessions are inserting row (1, 1) concurrently. Session-1 fails to acquires the pessimistic lock on row key and Session-2 succeeds. When session-1 prewrites, it may meet the lock belonging to session-2 on the `v_idx` key, it will roll back the session-2.\r\n",
  "state": "open",
  "created_at": "2020-03-12T06:20:56Z",
  "updated_at": "2020-11-04T07:16:24Z",
  "closed_at": null,
  "labels": [
    "type/bug",
    "sig/transaction",
    "priority/low",
    "severity/moderate"
  ],
  "comments_data": [
    {
      "id": 721556529,
      "user": "youjiali1995",
      "created_at": "2020-11-04T07:16:07Z",
      "body": "One solution is that returns the real TTL other than 0 when pipelined locking is enabled. The drawback is it may hurt performance when a lock is really left.\r\n\r\nBecause the pipelined locking is not enabled by default in the release-4.0 branch and it's unlikely to fail to acquire pessimistic locks even if it's enabled, I will lower its severity and won't fix it now."
    }
  ]
}