{
  "issue_number": 16307,
  "title": "Snapshot recovery wait apply may be blocked by logs from a pervious term",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\nConsider:\r\n* A leader (peer1) appends 6 logs but not commits them before taking snapshot.\r\n* A new leader (peer2) is elected and append and commits its logs to index 4.\r\n* All of these peers has applied index 1.\r\n\r\nThen snapshot recovery peer1 may be blocked by wait apply to its last index 6,\r\nsince no write is allowed during recovery, and its commit index never reach 6.\r\n\r\n```\r\n(1,1): means a log at term 1 index 1.\r\npeer1: | (1,1) | (1,2) | (1,3) | (1,4) | (1,5) | | (1,6) |\r\npeer2: | (1,1) | (2,2) | (2,3) | (2,4) |\r\npeer2: | (1,1) | (2,2) | (2,3) | (2,4) |\r\n```\r\n\r\nhttps://github.com/tikv/tikv/blob/e0d70726b332a33e503c3f2addc66b9794303aea/components/raftstore/src/store/fsm/peer.rs#L958-L1010\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\n\r\nv7.5.0\r\n\r\n### What did you expect?\r\n\r\nWait apply finishes when a peer applies all committed logs.\r\n\r\n### What did happened?\r\n\r\nWait apply is blocked.",
  "state": "open",
  "created_at": "2024-01-08T06:29:55Z",
  "updated_at": "2024-01-29T18:20:02Z",
  "closed_at": null,
  "labels": [
    "type/bug",
    "component/backup-restore"
  ],
  "comments_data": [
    {
      "id": 1880460093,
      "user": "YuJuncen",
      "created_at": "2024-01-08T06:46:51Z",
      "body": "For now, we have a workaround for this: we will firstly wait leader apply to the last index and then issue the wait apply request to follower.\r\n\r\nThis can bypass most of this case in happy path. However, it is also possible that a peer is isolated with others, then we send a wait apply request to it before the new leader truncate its log. This problem still exists.\r\n\r\nPerhaps removing waiting apply to follower will be enough to solve this. Given we don't need the underlying DB be the same anymore. (Thanks to the new flashback implementation)\r\n\r\nOr, we can abort wait apply once the term changed."
    }
  ]
}