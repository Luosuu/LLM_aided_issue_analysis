{
  "issue_number": 16164,
  "title": "apply-write_memtable_time and TiDB latency increases during cdc initial scan",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n```\r\n/ # /tikv-server -V                                                  \r\nTiKV                                                                 \r\nRelease Version:   6.5.3                                             \r\nEdition:           Enterprise                                        \r\nGit Commit Hash:   ed884cd2968f53d6ca0239bc7dd2364ed56b6461          \r\nGit Commit Branch: heads/refs/tags/v6.5.3-20231207-ed884cd           \r\nUTC Build Time:    2023-12-07 12:51:16                               \r\n```\r\n\r\n### What operating system and CPU are you using?\r\nX86, K8S\r\n\r\n### Steps to reproduce\r\n0. TiKV configuration: cdc.incremental-fetch-speed-limit = 256MiB, cdc.incremental-scan-speed-limit=128MiB\r\n1. Pause CDC changefeed \r\n2. Run workload for 1 hour\r\n3. Resume changefeed \r\n\r\n### What did you expect?\r\nTiDB latency should not increases a lot.\r\n\r\n### What did happened?\r\nRocksDB apply-write_memtable_time increases a lot, and TiDB latency increases a lot accordingly.\r\n\r\n![image](https://github.com/tikv/tikv/assets/7403864/6eb8d74f-895e-4c3d-aa91-5445a0731919)\r\n\r\n![img_v3_0261_37b77459-50a4-4ade-ad0a-fae7d174391g](https://github.com/tikv/tikv/assets/7403864/1d9c7ae5-c4b9-492c-9367-379a0b187ea4)\r\n\r\n",
  "state": "open",
  "created_at": "2023-12-11T07:58:01Z",
  "updated_at": "2024-11-01T10:18:26Z",
  "closed_at": null,
  "labels": [
    "type/bug",
    "severity/major",
    "may-affects-5.4",
    "may-affects-6.1",
    "may-affects-6.5",
    "may-affects-7.1",
    "may-affects-7.5",
    "affects-8.1",
    "affects-8.5"
  ],
  "comments_data": [
    {
      "id": 1915317833,
      "user": "tonyxuqqi",
      "created_at": "2024-01-29T18:25:25Z",
      "body": "The max 523us should not be the bottleneck of the end-to-end latency. "
    }
  ]
}