{
  "issue_number": 9388,
  "title": "ready can be advanced by a wrong peer",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\nSupposing peer (1, 1) is split into (1, 2) and (1, 1) on store 1. If it takes too long for peer 1 to apply snapshot and then split, an uninitialized peer 2 can be created first and then the split one will replace then uninitialized one.\r\n\r\nIf before peer 1 is split, peer 2 receives a message, then the uninitialized peer and split peer may be fetched in one batch. Because batch system maps ready to peer by ID, so if the uninitialized peer doesn't generate readiness, then the readiness generated by split peer will be mapped to uninitialized one as they have the same region ID.\r\n\r\nIn the past, uninitialized peer has to be a follower and can't be in merge state, so all messages in readiness will be sent and no other actions will be performed. Because peer is uninitialized, so no proposal has been handled, no read states will be queued. For the split peer, although ready is not advanced, but raft will happily create a duplicated ready and all paused progresses will be resumed except committed logs. Duplicated committed logs can make apply thread panic. Fortunately, there will usually be no committed logs for a just split peer.\r\n\r\nNow we have used async ready, unmatched ready will lead to panic directly as the numbers probably don't matched.\r\n\r\n/cc @NingLin-P @gengliqi ",
  "state": "closed",
  "created_at": "2020-12-29T13:28:04Z",
  "updated_at": "2020-12-31T04:56:45Z",
  "closed_at": "2020-12-31T04:56:45Z",
  "labels": [
    "type/bug",
    "sig/raft",
    "severity/major"
  ],
  "comments_data": []
}