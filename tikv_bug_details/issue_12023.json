{
  "issue_number": 12023,
  "title": "RaftStore panicked during jepsen bank test",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\nmaster @ a7d1595f5486616be34e0cf2bbf372edb5f0e85a\r\n\r\n### What operating system and CPU are you using?\r\n<!-- If you're using Linux, you can run `cat /proc/cpuinfo` -->\r\nKubernetes\r\n\r\n### Steps to reproduce\r\n<!-- If possible, provide a recipe for reproducing the error. A complete runnable program is good. -->\r\nRun jepsen bank test with follower read. I'm not sure whether the problem is easy to be reproduced or not.\r\n\r\n### What did you expect?\r\nTiKV shoudn't panic during test.\r\n\r\n### What did happened?\r\nTest failed due to tikv panicked.\r\n```\r\n[2022/02/24 23:59:56.411 +00:00] [FATAL] [lib.rs:466] [\"assertion failed: `(left == right)`\\n  left: `11519`,\\n right: `11424`\"] [backtrace=\"   0: tikv_util::set_panic_hook::{{closure}}\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/lib.rs:465:18\\n   1: std::panicking::rust_panic_with_hook\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:702:17\\n   2: std::panicking::begin_panic_handler::{{closure}}\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:588:13\\n   3: std::sys_common::backtrace::__rust_end_short_backtrace\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys_common/backtrace.rs:138:18\\n   4: rust_begin_unwind\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:584:5\\n   5: core::panicking::panic_fmt\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panicking.rs:143:14\\n   6: core::panicking::assert_failed_inner\\n   7: core::panicking::assert_failed\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panicking.rs:182:5\\n   8: raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::check_msg\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1659:17\\n      raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::on_raft_message\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1786:32\\n      raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::handle_msgs\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:587:37\\n   9: <raftstore::store::fsm::store::RaftPoller<EK,ER,T> as batch_system::batch::PollHandler<raftstore::store::fsm::peer::PeerFsm<EK,ER>,raftstore::store::fsm::store::StoreFsm<EK>>>::handle_control\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:737:9\\n      batch_system::batch::Poller<N,C,Handler>::poll\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/batch-system/src/batch.rs:395:27\\n  10: raftstore::store::worker::refresh_config::PoolController<N,C,H>::increase_by::{{closure}}\\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/worker/refresh_config.rs:71:21\\n      std::sys_common::backtrace::__rust_begin_short_backtrace\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys_common/backtrace.rs:122:18\\n  11: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/thread/mod.rs:498:17\\n      <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panic/unwind_safe.rs:271:9\\n      std::panicking::try::do_call\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:492:40\\n      std::panicking::try\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:456:19\\n      std::panic::catch_unwind\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panic.rs:137:14\\n      std::thread::Builder::spawn_unchecked_::{{closure}}\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/thread/mod.rs:497:30\\n      core::ops::function::FnOnce::call_once{{vtable.shim}}\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/ops/function.rs:227:5\\n  12: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/alloc/src/boxed.rs:1854:9\\n      <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/alloc/src/boxed.rs:1854:9\\n      std::sys::unix::thread::Thread::new::thread_start\\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys/unix/thread.rs:108:17\\n  13: start_thread\\n  14: clone\\n\"] [location=/home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1659] [thread_name=raftstore-2-0]\r\n   0: tikv_util::set_panic_hook::{{closure}}\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/tikv_util/src/lib.rs:465:18\r\n   1: std::panicking::rust_panic_with_hook\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:702:17\r\n   2: std::panicking::begin_panic_handler::{{closure}}\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:588:13\r\n   3: std::sys_common::backtrace::__rust_end_short_backtrace\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys_common/backtrace.rs:138:18\r\n   4: rust_begin_unwind\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:584:5\r\n   5: core::panicking::panic_fmt\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panicking.rs:143:14\r\n   6: core::panicking::assert_failed_inner\r\n   7: core::panicking::assert_failed\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panicking.rs:182:5\r\n   8: raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::check_msg\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1659:17\r\n      raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::on_raft_message\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:1786:32\r\n      raftstore::store::fsm::store::StoreFsmDelegate<EK,ER,T>::handle_msgs\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:587:37\r\n   9: <raftstore::store::fsm::store::RaftPoller<EK,ER,T> as batch_system::batch::PollHandler<raftstore::store::fsm::peer::PeerFsm<EK,ER>,raftstore::store::fsm::store::StoreFsm<EK>>>::handle_control\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/fsm/store.rs:737:9\r\n      batch_system::batch::Poller<N,C,Handler>::poll\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/batch-system/src/batch.rs:395:27\r\n  10: raftstore::store::worker::refresh_config::PoolController<N,C,H>::increase_by::{{closure}}\r\n             at /home/jenkins/agent/workspace/build-common/go/src/github.com/pingcap/tikv/components/raftstore/src/store/worker/refresh_config.rs:71:21\r\n      std::sys_common::backtrace::__rust_begin_short_backtrace\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys_common/backtrace.rs:122:18\r\n  11: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/thread/mod.rs:498:17\r\n      <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/panic/unwind_safe.rs:271:9\r\n      std::panicking::try::do_call\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:492:40\r\n      std::panicking::try\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panicking.rs:456:19\r\n      std::panic::catch_unwind\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/panic.rs:137:14\r\n      std::thread::Builder::spawn_unchecked_::{{closure}}\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/thread/mod.rs:497:30\r\n      core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/core/src/ops/function.rs:227:5\r\n  12: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/alloc/src/boxed.rs:1854:9\r\n      <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/alloc/src/boxed.rs:1854:9\r\n      std::sys::unix::thread::Thread::new::thread_start\r\n             at /rustc/1e12aef3fab243407f9d71ba9956cb2a1bf105d5/library/std/src/sys/unix/thread.rs:108:17\r\n  13: start_thread\r\n```\r\nThe full log can be accessed [here](http://172.16.4.180:31714/artifacts/testground/plan-exec-605216/plan-exec-605216-3091159712/archive).",
  "state": "closed",
  "created_at": "2022-02-25T02:27:56Z",
  "updated_at": "2022-03-04T08:55:49Z",
  "closed_at": "2022-03-04T08:55:49Z",
  "labels": [
    "type/bug",
    "sig/raft",
    "severity/major",
    "affects-5.0",
    "affects-5.1",
    "affects-5.2",
    "affects-5.3",
    "affects-5.4"
  ],
  "comments_data": [
    {
      "id": 1050463271,
      "user": "zyguan",
      "created_at": "2022-02-25T02:42:26Z",
      "body": "Meet the problem again during append test.\r\nhttp://172.16.4.180:31714/artifacts/testground/plan-exec-605211/plan-exec-605211-809574787/archive"
    },
    {
      "id": 1050650759,
      "user": "NingLin-P",
      "created_at": "2022-02-25T08:43:37Z",
      "body": "The test panic at:\r\nhttps://github.com/tikv/tikv/blob/88baa28089ce2247c41001d26d97a14d10a2cc4b/components/raftstore/src/store/fsm/store.rs#L1659\r\n\r\nbecause a merged region have a peer id larger than the message's. It is possible if a node is isolated and a peer on this node is removed and add back then merged to other region. When the network recover, the isolated peer send a message to other normal node can trigger this panic.\r\n\r\nWe can fix that by changing to `assert!(peer.get_id() >= msg.get_from_peer().get_id());`, as a peer of a merged region won't be change anymore and `Peer` from `MergeState` is the most up to date so its id must larger or equal to the peer id  from message . /cc @BusyJay "
    },
    {
      "id": 1050688545,
      "user": "BusyJay",
      "created_at": "2022-02-25T09:33:09Z",
      "body": "> can fix that by changing to assert!(peer.get_id() >= msg.get_from_peer().get_id());\r\n\r\nAgree.\r\n\r\n<del>There seems to be a bug in `need_gc_merge`. In the case you mentioned, it's possible that peers can receive merge_target from peers in the same regions, so it will record the wrong mapping in the `targets_map`.</del>\r\n\r\nI miss read, it should be OK."
    },
    {
      "id": 1055143820,
      "user": "NingLin-P",
      "created_at": "2022-03-01T08:16:44Z",
      "body": ">  It is possible if a node is isolated and a peer on this node is removed and add back then merged to other region.\r\n\r\nThis case may not occur because the merge check requires the minimal `matched` or `committed_index` of all peers larger than 0, namely the leader had communicated with each peer. But a stale message could still trigger this panic though."
    },
    {
      "id": 1056946305,
      "user": "BusyJay",
      "created_at": "2022-03-02T13:43:05Z",
      "body": "> But a stale message could still trigger this panic though.\r\n\r\nHow can such a stale message be sent?\r\n\r\n"
    },
    {
      "id": 1058129639,
      "user": "BusyJay",
      "created_at": "2022-03-03T15:01:20Z",
      "body": "I believe the case should be:\r\n\r\n1. (1, 2, 3) wants to merge to (4, 5, 6), 1 is leader, 2 and 3 are followers;\r\n2. 1 is isolated from 2, so 2 starts campaign, but fail to send message to 1, so the message is buffered in queue and waiting to be retried;\r\n3. 3 becomes the new leader, and remove 2 add 7, so region becomes (1, 7, 3).\r\n4. 3 propose to merge to (4, 5, 6), it can succeed.\r\n5. isolation is recovered, then the message buffered in step 2 will be retried and sent to 1, which will find it's merged and then check if ID meets the guarantee. It obviously not match, hence panic.\r\n\r\nI can find similar logs in both cases that connection to store 2 is aborted for tens of seconds and then recover not long before store 2 is panicked."
    }
  ]
}