{
  "issue_number": 10680,
  "title": "L0 files are not fully respected when using ingest deletion",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\nv5.1.1\r\n\r\n### What operating system and CPU are you using?\r\nLinux\r\n\r\n### Steps to reproduce\r\nI didn't reproduce the problem, but I can see the problem in a production cluster. It seems keep inserting with large schedule limit should be able to reproduce the issue.\r\n\r\n### What did you expect?\r\nTiKV can keep accepting requests.\r\n\r\n### What did happened?\r\nWrite stall due to too many L0 files.\r\nApparently, ingestion should not happen when L0 files exceed half the limit, which should be 10 as #3606 implemented. But I can see it keeps ingesting L0 files count reaches 19.\r\n\r\nAnother problem is deletion can ingest too large file. I have seen an ingestion file exceeds 400MiB. Large files can slow down L0 compaction, which triggers L0 -> L0 compactions and produce more large L0 files and result in stall in the end.",
  "state": "closed",
  "created_at": "2021-08-06T12:38:58Z",
  "updated_at": "2021-08-19T12:22:02Z",
  "closed_at": "2021-08-19T12:22:02Z",
  "labels": [
    "type/bug",
    "severity/minor"
  ],
  "comments_data": [
    {
      "id": 895655094,
      "user": "Lily2025",
      "created_at": "2021-08-10T01:13:08Z",
      "body": "/severity Minor"
    }
  ]
}