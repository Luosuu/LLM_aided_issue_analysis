{
  "issue_number": 17098,
  "title": "Compilation and packaging issues on NixOS",
  "body": "## Bug Report\r\n\r\n<!-- Thanks for your bug report! Don't worry if you can't fill out all the sections. -->\r\n\r\n### What version of TiKV are you using?\r\n<!-- You can run `tikv-server --version` -->\r\nVersion 8.1.0\r\n\r\n### What operating system and CPU are you using?\r\n<!-- If you're using Linux, you can run `cat /proc/cpuinfo` -->\r\nNixOS / Linux | x64\r\n\r\n### Steps to reproduce\r\n<!-- If possible, provide a recipe for reproducing the error. A complete runnable program is good. -->\r\nBuild it with rustc version 1.77.2\r\n\r\n### What did you expect?\r\nThat it compiles.\r\n\r\n### What did happened?\r\n```\r\nwarning: The interpretation of store paths arguments ending in `.drv` recently changed. If this command is now failing try again with '/nix/store/hx0ak1r4iakkq9xnw26ygbn63603ja4z-tikv-8.1.0.drv^*'\r\n@nix { \"action\": \"setPhase\", \"phase\": \"unpackPhase\" }\r\nRunning phase: unpackPhase\r\nunpacking source archive /nix/store/17piq70b24qrql63sijdi5273ghkmfyz-source\r\nsource root is source\r\nExecuting cargoSetupPostUnpackHook\r\nFinished cargoSetupPostUnpackHook\r\n@nix { \"action\": \"setPhase\", \"phase\": \"patchPhase\" }\r\nRunning phase: patchPhase\r\nExecuting cargoSetupPostPatchHook\r\nValidating consistency between /build/source/Cargo.lock and /build/cargo-vendor-dir/Cargo.lock\r\nFinished cargoSetupPostPatchHook\r\n@nix { \"action\": \"setPhase\", \"phase\": \"updateAutotoolsGnuConfigScriptsPhase\" }\r\nRunning phase: updateAutotoolsGnuConfigScriptsPhase\r\n@nix { \"action\": \"setPhase\", \"phase\": \"configurePhase\" }\r\nRunning phase: configurePhase\r\n@nix { \"action\": \"setPhase\", \"phase\": \"buildPhase\" }\r\nRunning phase: buildPhase\r\nExecuting cargoBuildHook\r\n++ env CC_X86_64_UNKNOWN_LINUX_GNU=/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin/cc CXX_X86_64_UNKNOWN_LINUX_GNU=/nix/store/9bv7dcvmfc>\r\n   Compiling libc v0.2.151\r\n   Compiling proc-macro2 v1.0.76\r\n   Compiling quote v1.0.28\r\n   Compiling unicode-ident v1.0.5\r\n   Compiling syn v1.0.103\r\n   Compiling autocfg v1.1.0\r\n   Compiling log v0.4.20\r\n   Compiling cfg-if v1.0.0\r\n   Compiling version_check v0.9.4\r\n   Compiling serde_derive v1.0.147\r\n   Compiling serde v1.0.147\r\n   Compiling pkg-config v0.3.16\r\n   Compiling memchr v2.7.1\r\n   Compiling smallvec v1.11.1\r\n   Compiling scopeguard v1.1.0\r\n   Compiling once_cell v1.19.0\r\n   Compiling lazy_static v1.4.0\r\n   Compiling pin-project-lite v0.2.9\r\n   Compiling futures-core v0.3.15\r\n   Compiling lock_api v0.4.6\r\n   Compiling futures-io v0.3.15\r\n   Compiling slab v0.4.2\r\n   Compiling proc-macro-hack v0.5.19\r\n   Compiling futures v0.1.31\r\n   Compiling futures-sink v0.3.15\r\n   Compiling pin-utils v0.1.0\r\n   Compiling proc-macro-nested v0.1.3\r\n   Compiling futures-channel v0.3.15\r\n   Compiling futures-task v0.3.15\r\n   Compiling vcpkg v0.2.11\r\n   Compiling parking_lot_core v0.9.1\r\n   Compiling futures-macro v0.3.15\r\n   Compiling futures-util v0.3.15\r\n   Compiling itoa v1.0.1\r\n   Compiling tokio v1.25.3\r\n   Compiling bitflags v2.4.1\r\n   Compiling unicode-segmentation v1.3.0\r\n   Compiling itoa v0.4.4\r\n   Compiling num-traits v0.2.17\r\n   Compiling ryu v1.0.4\r\n   Compiling fnv v1.0.6\r\n   Compiling regex-syntax v0.8.2\r\n   Compiling indexmap v1.6.2\r\n   Compiling ahash v0.8.7\r\n   Compiling tracing-core v0.1.32\r\n   Compiling heck v0.3.1\r\n   Compiling jobserver v0.1.17\r\n   Compiling syn v2.0.43\r\n   Compiling aho-corasick v1.1.2\r\n   Compiling cfg-if v0.1.10\r\n   Compiling openssl v0.10.57\r\n   Compiling cc v1.0.83\r\n   Compiling percent-encoding v2.1.0\r\n   Compiling foreign-types-shared v0.1.1\r\n   Compiling foreign-types v0.3.2\r\n   Compiling hashbrown v0.9.1\r\n   Compiling zerocopy v0.7.32\r\n   Compiling protobuf v2.8.0 (https://github.com/pingcap/rust-protobuf?branch=v2.8#6642ebaa)\r\n   Compiling allocator-api2 v0.2.14\r\n   Compiling bytes v1.0.1\r\n   Compiling matches v0.1.8\r\n   Compiling hex v0.3.2\r\n   Compiling httparse v1.8.0\r\n   Compiling num_cpus v1.13.1\r\n   Compiling signal-hook-registry v1.4.0\r\n   Compiling mio v0.8.11\r\n   Compiling socket2 v0.4.7\r\n   Compiling getrandom v0.2.11\r\n   Compiling parking_lot v0.12.1\r\n   Compiling equivalent v1.0.1\r\n   Compiling cmake v0.1.48 (https://github.com/rust-lang/cmake-rs#00e6b220)\r\n   Compiling num-integer v0.1.45\r\n   Compiling hashbrown v0.14.0\r\n   Compiling try-lock v0.2.2\r\n   Compiling want v0.3.0\r\n   Compiling ppv-lite86 v0.2.10\r\n   Compiling bitflags v1.3.2\r\n   Compiling native-tls v0.2.7\r\n   Compiling tower-service v0.3.2\r\n   Compiling base64 v0.13.0\r\n   Compiling crossbeam-utils v0.8.19\r\n   Compiling httpdate v1.0.0\r\n   Compiling form_urlencoded v1.0.1\r\n   Compiling openssl-probe v0.1.2\r\n   Compiling regex-automata v0.4.3\r\n   Compiling serde_json v1.0.64\r\n   Compiling autotools v0.2.6\r\n   Compiling unicode-bidi v0.3.4\r\n   Compiling unicode-normalization v0.1.12\r\n   Compiling openssl-sys v0.9.92\r\n   Compiling indexmap v2.0.1\r\n   Compiling libz-sys v1.1.3\r\n   Compiling protobuf-src v1.1.0+21.5\r\n   Compiling rand_core v0.6.2\r\n   Compiling time v0.1.43\r\n   Compiling idna v0.2.0\r\n   Compiling rand_chacha v0.3.0\r\n   Compiling memoffset v0.6.4\r\n   Compiling instant v0.1.12\r\n   Compiling byteorder v1.4.3\r\n   Compiling async-trait v0.1.58\r\n   Compiling parking_lot_core v0.8.3\r\n   Compiling ucd-trie v0.1.3\r\n   Compiling rand v0.8.5\r\n   Compiling pest v2.1.3\r\n   Compiling parking_lot v0.11.1\r\n   Compiling crossbeam-epoch v0.9.8\r\n   Compiling proc-macro-error-attr v1.0.4\r\n   Compiling proc-macro-error v1.0.4\r\n   Compiling encoding_rs v0.8.33\r\n   Compiling slog v2.5.2\r\n   Compiling ipnet v2.3.0\r\n   Compiling mime v0.3.16\r\n   Compiling same-file v1.0.5\r\n   Compiling walkdir v2.3.1\r\n   Compiling dirs-sys-next v0.1.2\r\n   Compiling dirs-next v2.0.0\r\n   Compiling semver-parser v0.10.2\r\n   Compiling grpcio-sys v0.10.3+1.44.0-patched\r\n   Compiling static_assertions v1.1.0\r\n   Compiling protobuf-codegen v2.8.0 (https://github.com/pingcap/rust-protobuf?branch=v2.8#6642ebaa)\r\n   Compiling grpcio-compiler v0.10.4\r\n   Compiling crc32fast v1.2.0\r\n   Compiling regex v1.10.2\r\n   Compiling hex v0.4.2\r\n   Compiling atty v0.2.13\r\n   Compiling crossbeam-deque v0.8.3\r\n   Compiling semver v0.11.0\r\n   Compiling fxhash v0.2.1\r\n   Compiling crossbeam-channel v0.5.11\r\n   Compiling rustc_version v0.3.3\r\n   Compiling rayon-core v1.9.3\r\n   Compiling zeroize v1.1.0\r\n   Compiling shlex v0.1.1\r\n   Compiling prometheus v0.13.0\r\n   Compiling tikv_alloc v0.1.0 (/build/source/components/tikv_alloc)\r\n   Compiling rayon v1.5.3\r\n   Compiling thread_local v1.1.4\r\nerror[E0554]: `#![feature]` may not be used on the stable release channel\r\n  --> components/tikv_alloc/src/lib.rs:88:12\r\n   |\r\n88 | #![feature(core_intrinsics)]\r\n   |            ^^^^^^^^^^^^^^^\r\n\r\n   Compiling crossbeam-queue v0.3.5\r\nFor more information about this error, try `rustc --explain E0554`.\r\nerror: could not compile `tikv_alloc` (lib) due to 1 previous error\r\nwarning: build failed, waiting for other jobs to finish...\r\n```",
  "state": "open",
  "created_at": "2024-06-05T14:06:30Z",
  "updated_at": "2024-08-07T05:53:31Z",
  "closed_at": null,
  "labels": [
    "type/bug",
    "severity/moderate"
  ],
  "comments_data": [
    {
      "id": 2164282040,
      "user": "glorv",
      "created_at": "2024-06-13T03:18:53Z",
      "body": "@makuru-dd Seems nixos does not support the feature `core_intrinsics`.  Currnetly, we only build and test tikv for linux os, other os are not guaranteed to be compatible with all the code. Could you provide more details about you use case to running tikv on nixos.\r\n\r\nI saw the `core_intrinsics` in introduced in #14866 in this case, Seems one easy workaround is to replace it with a normal atomic value like following:\r\n```\r\n#[repr(transparent)]\r\nstruct PeekableRemoteStat<T> {\r\n   ptr: AtomicUsize,\r\n   pathom: PhantomData<T>,\r\n};\r\n\r\nunsafe fn peek(&self) -> Option<T> {\r\n        let ptr =  self.ptr.load(Ordering::SeqCst);\r\n        if ptr == 0 {\r\n            None\r\n        } else {\r\n            Some(ptr::read(ptr as *const T))\r\n        }\r\n    }\r\n}\r\n```"
    },
    {
      "id": 2166403435,
      "user": "makuru-dd",
      "created_at": "2024-06-13T17:32:17Z",
      "body": "> @makuru-dd Seems nixos does not support the feature `core_intrinsics`. Currnetly, we only build and test tikv for linux os, other os are not guaranteed to be compatible with all the code. Could you provide more details about you use case to running tikv on nixos.\r\n> \r\n> I saw the `core_intrinsics` in introduced in #14866 in this case, Seems one easy workaround is to replace it with a normal atomic value like following:\r\n> \r\n> ```\r\n> #[repr(transparent)]\r\n> struct PeekableRemoteStat<T> {\r\n>    ptr: AtomicUsize,\r\n>    pathom: PhantomData<T>,\r\n> };\r\n> \r\n> unsafe fn peek(&self) -> Option<T> {\r\n>         let ptr =  self.ptr.load(Ordering::SeqCst);\r\n>         if ptr == 0 {\r\n>             None\r\n>         } else {\r\n>             Some(ptr::read(ptr as *const T))\r\n>         }\r\n>     }\r\n> }\r\n> ```\r\n\r\n> Could you provide more details about you use case to running tikv on nixos.\r\n\r\nHi I am trying to build TIKV for [NixOS](https://nixos.org/) / linux to add it to [MicroVM.nix](https://github.com/astro/microvm.nix), so I can use it as a key value back end for [seaweedfs](https://github.com/seaweedfs/seaweedfs), A distributed Filesystem instead of ceph, I need seaweedFS for storage of each VM.\r\n\r\n> Seems nixos does not support the feature core_intrinsics\r\n\r\nI have solved that problem by making a NixOS flake, this allows me to use `Rustc` Unstable, which seems to have `core_intrinsics`, sadly I cant push it up in to the package repository of NixOS.\r\nNow I am a stuck at errors relating to rocksdb, where I am missing certain files, that don't get imported, properly.\r\nIt would be nice, if you could help me with it.\r\nHere are the logs.\r\nhttps://0x0.st/Xc2A.log"
    },
    {
      "id": 2167126480,
      "user": "glorv",
      "created_at": "2024-06-14T03:03:29Z",
      "body": "/cc @Connor1996 @v01dstar  Could you help take a look?"
    },
    {
      "id": 2169135720,
      "user": "v01dstar",
      "created_at": "2024-06-15T05:22:45Z",
      "body": "``` nowrap\r\n/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin/c++ ... -I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb -I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb/include ... -c /build/cargo-vendor-dir/libtitan_sys-0.0.1/titan/src/blob_file_reader.cc\r\n```\r\nThe compiler was expecting those header files under `-I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb`, can you please check whether they are there?"
    },
    {
      "id": 2171580482,
      "user": "makuru-dd",
      "created_at": "2024-06-16T13:03:20Z",
      "body": "> ```\r\n> /nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin/c++ ... -I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb -I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb/include ... -c /build/cargo-vendor-dir/libtitan_sys-0.0.1/titan/src/blob_file_reader.cc\r\n> ```\r\n> \r\n> The compiler was expecting those header files under `-I/build/cargo-vendor-dir/libtitan_sys-0.0.1/../rocksdb`, can you please check whether they are there?\r\n\r\nSo, I checked and no, the are not there but `rocksdb-0.3.0` is there.\r\nMaybe it can't pull the git repo?"
    },
    {
      "id": 2178809540,
      "user": "kvtb",
      "created_at": "2024-06-19T14:06:34Z",
      "body": "It is better to pin exact rustc version from https://github.com/tikv/tikv/blob/v8.1.0/rust-toolchain.toml https://github.com/tikv/tikv/blob/v7.5.2/rust-toolchain than NixOS default.\r\n\r\nOr you will have to invent new patches on every update of NixOS's default Rust"
    },
    {
      "id": 2178818253,
      "user": "makuru-dd",
      "created_at": "2024-06-19T14:09:55Z",
      "body": " I already pinned it, @kvtb but thanks for the tip."
    },
    {
      "id": 2200904924,
      "user": "v01dstar",
      "created_at": "2024-07-01T19:48:38Z",
      "body": "I was on vacation for 2 weeks, have you resolved the issue? Feels to me, it is related to how you organize the dependencies. Do you use \"vendored\" sources? If so, have you imported the submodules when you download rust-rocksdb? `git submodule update --init --recursive` https://github.com/tikv/rust-rocksdb?tab=readme-ov-file#build\r\n\r\nMaybe you can try fixing the rust-rocksdb build first?"
    }
  ]
}