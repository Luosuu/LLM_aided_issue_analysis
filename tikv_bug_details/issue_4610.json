{
  "issue_number": 4610,
  "title": "Fuzz test failed for tikv::coprocessor::codec::mysql::Duration::parse",
  "body": "## Bug Report\r\n\r\n**What version of TiKV are you using?**\r\n\r\n3.0.0-beta.1\r\n\r\n**What operating system and CPU are you using?**\r\n\r\nmacOS 10.14.4\r\n\r\n**What did you do?**\r\n\r\nThe fuzz test added by WIP PR #4608 failed. This is the test:\r\n\r\n```rust\r\npub fn fuzz_coprocessor_codec_duration_from_parse(data: &[u8]) -> Result<(), Error> {\r\n    use std::io::Read;\r\n    use tikv::coprocessor::codec::mysql::Duration;\r\n    let mut cursor = Cursor::new(data);\r\n    let fsp = cursor.read_as_i8()?;\r\n    let mut buf: [u8; 32] = [b' '; 32];\r\n    cursor.read_exact(&mut buf)?;\r\n    let d = Duration::parse(&buf, fsp)?;\r\n    fuzz_duration(d, cursor)\r\n}\r\n```\r\n\r\nThis is the error report:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'attempt to multiply with overflow', src/coprocessor/codec/mysql/duration.rs:191:21\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n   1: std::sys_common::backtrace::_print\r\n   2: std::panicking::default_hook::{{closure}}\r\n   3: std::panicking::default_hook\r\n   4: std::panicking::rust_panic_with_hook\r\n   5: std::panicking::continue_panic_fmt\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::panicking::panic\r\n   9: tikv::coprocessor::codec::mysql::duration::Duration::parse\r\n  10: fuzz_targets::fuzz_coprocessor_codec_duration_from_parse\r\n  11: rust_fuzzer_test_input\r\n  12: __rust_maybe_catch_panic\r\n  13: std::panicking::try\r\n  14: LLVMFuzzerTestOneInput\r\n  15: _ZN6fuzzer6Fuzzer15ExecuteCallbackEPKhm\r\n  16: _ZN6fuzzer6Fuzzer6RunOneEPKhmbPNS_9InputInfoEPb\r\n  17: _ZN6fuzzer6Fuzzer16MutateAndTestOneEv\r\n  18: _ZN6fuzzer6Fuzzer4LoopERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_16fuzzer_allocatorIS8_EEEE\r\n  19: _ZN6fuzzer12FuzzerDriverEPiPPPcPFiPKhmE\r\n  20: main\r\n==56552== ERROR: libFuzzer: deadly signal\r\n    #0 0x1166d1707 in __sanitizer_print_stack_trace (lib__rustc__clang_rt.asan_osx_dynamic.dylib:x86_64+0x68707)\r\n    #1 0x110bd583b in fuzzer::Fuzzer::CrashCallback() (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b7383b)\r\n    #2 0x110bd57ed in fuzzer::Fuzzer::StaticCrashSignalCallback() (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b737ed)\r\n    #3 0x110c16437 in fuzzer::CrashHandler(int, __siginfo*, void*) (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105bb4437)\r\n    #4 0x7fff590abb5c in _sigtramp (libsystem_platform.dylib:x86_64+0x4b5c)\r\n    #5 0x3500000bd0  (<unknown module>)\r\n    #6 0x110c4a7ee in __rust_maybe_catch_panic (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105be87ee)\r\n    #7 0x110bd3fde in std::panicking::try::hd4964c260fccd748 (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b71fde)\r\n    #8 0x110bd3a72 in LLVMFuzzerTestOneInput (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b71a72)\r\n    #9 0x110bd6f9a in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b74f9a)\r\n    #10 0x110bd6999 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b74999)\r\n    #11 0x110bd85c1 in fuzzer::Fuzzer::MutateAndTestOne() (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b765c1)\r\n    #12 0x110bd9871 in fuzzer::Fuzzer::Loop(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, fuzzer::fuzzer_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105b77871)\r\n    #13 0x110c04ab8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105ba2ab8)\r\n    #14 0x110c27179 in main (fuzz_coprocessor_codec_duration_from_parse:x86_64+0x105bc5179)\r\n    #15 0x7fff58ec63d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 2 ChangeBit-CopyPart-; base unit: 4744b705bce806db21998c6b5c000865f87bf51a\r\n0xff,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x20,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x35,0x35,0x35,0x0,0x1,\r\n\\xff555555550000000 0000000000023555\\x00\\x01\r\nartifact_prefix='./'; Test unit written to ./crash-eda52eca653e470cf2fed7ad070b4f09e122dab9\r\nBase64: /zU1NTU1NTU1MDAwMDAwMCAwMDAwMDAwMDAwMDIzNTU1AAE=\r\nRunning fuzzer failed: Libfuzzer exited with code Some(77)\r\nError: 1\r\n```\r\n",
  "state": "closed",
  "created_at": "2019-04-30T00:50:09Z",
  "updated_at": "2020-08-25T09:27:13Z",
  "closed_at": "2020-08-25T09:27:13Z",
  "labels": [
    "type/bug",
    "sig/coprocessor"
  ],
  "comments_data": [
    {
      "id": 488020205,
      "user": "iosmanthus",
      "created_at": "2019-04-30T16:25:40Z",
      "body": "From my perspective, the bug is caused by delaying the check of the value of the `hour/minute/second` to `Duration::new`. \r\n1. the following code never checks the value of `hour/minute/second` until calling `Duration::new`\r\nhttps://github.com/tikv/tikv/blob/d4f238d09dd3a3d0555d50d8fbcf49e9da6fbb4f/src/coprocessor/codec/mysql/duration.rs#L165-L188\r\n2. do the checking here:\r\nhttps://github.com/tikv/tikv/blob/d4f238d09dd3a3d0555d50d8fbcf49e9da6fbb4f/src/coprocessor/codec/mysql/duration.rs#L122-L129\r\n\r\nI will fix it! Thanks for reminding! ðŸ˜Š"
    },
    {
      "id": 489304033,
      "user": "iosmanthus",
      "created_at": "2019-05-04T07:41:58Z",
      "body": "Fixed in https://github.com/tikv/tikv/pull/4497, I do the check while parsing the format string."
    }
  ]
}